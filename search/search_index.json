{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hi\uff0c\u6211\u662fChin\uff0c\u6b22\u8fce\u6765\u5230\u6211\u7684\u4e3b\u9875\uff01 \u00b6 \u201cIf I've learned one thing in the 14 years I've been a full-time cartoonist, it's that you can not let anyone else define your professionalism. It has to be a personal ethos to which you adhere despite third party influence or acceptance. The old measuring sticks for professionalism are going away and now more than ever it's time for independent creatives to set the bar. Set it high.\u201d -- Scott R. Kurtz \u6211\uff0c\u70ed\u7231\u8ba1\u7b97\u673a\u548c\u5d4c\u5165\u5f0f\uff0c\u6c89\u8ff7\u4e8e\u4ee3\u7801\u7684\u4e16\u754c \u559c\u6b22\u5b89\u9759\u7684\u73af\u5883\uff0c\u7231\u542c\u73c2\u77e3\u59d0\u59d0\u7684\u6b4c \u867d\u7136\u72ec\u6765\u72ec\u5f80\uff0c\u4f46\u5e76\u4e0d\u5b64\u5355 \u6211\u7684\u811a\u6b65\u624d\u521a\u521a\u5f00\u59cb \u6211\u7684\u7ad9\u70b9 \u00b6 GitHub \u535a\u5ba2\u56ed \u6253\u8d4f\u8d5e\u52a9 \u00b6 \u652f\u4ed8\u5b9d \u5fae\u4fe1","title":"\u4e3b\u9875"},{"location":"#hichin","text":"\u201cIf I've learned one thing in the 14 years I've been a full-time cartoonist, it's that you can not let anyone else define your professionalism. It has to be a personal ethos to which you adhere despite third party influence or acceptance. The old measuring sticks for professionalism are going away and now more than ever it's time for independent creatives to set the bar. Set it high.\u201d -- Scott R. Kurtz \u6211\uff0c\u70ed\u7231\u8ba1\u7b97\u673a\u548c\u5d4c\u5165\u5f0f\uff0c\u6c89\u8ff7\u4e8e\u4ee3\u7801\u7684\u4e16\u754c \u559c\u6b22\u5b89\u9759\u7684\u73af\u5883\uff0c\u7231\u542c\u73c2\u77e3\u59d0\u59d0\u7684\u6b4c \u867d\u7136\u72ec\u6765\u72ec\u5f80\uff0c\u4f46\u5e76\u4e0d\u5b64\u5355 \u6211\u7684\u811a\u6b65\u624d\u521a\u521a\u5f00\u59cb","title":"Hi\uff0c\u6211\u662fChin\uff0c\u6b22\u8fce\u6765\u5230\u6211\u7684\u4e3b\u9875\uff01"},{"location":"#_1","text":"GitHub \u535a\u5ba2\u56ed","title":"\u6211\u7684\u7ad9\u70b9"},{"location":"#_2","text":"\u652f\u4ed8\u5b9d \u5fae\u4fe1","title":"\u6253\u8d4f\u8d5e\u52a9"},{"location":"Embed/123/","text":"123","title":"123"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/","text":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e00\uff09\uff1a\u70b9\u706f \u00b6 \u6700\u8fd1\u901b\u6dd8\u5b9d\u65f6\uff0c\u53d1\u73b0\u4e00\u5757ATtiny88\u6838\u5fc3\u677f\uff08MH-ET LIVE Tiny88\uff09\u7528\u5b8c\u7ea2\u5305\u540e\u53ea\u52694\u5757\u94b1\u4e86\uff0c\u679c\u65ad\u4e0b\u5355\uff0c\u51c6\u5907\u597d\u597d\u628a\u73a9\u4e00\u756a\u3002 MH-ET LIVE Tiny88\u4ecb\u7ecd \u00b6 \u8fd9\u5757\u6838\u5fc3\u677f\u4f7f\u7528\u7684MCU\u578b\u53f7\u662fATtiny88\uff0c\u4e3b\u8981\u53c2\u6570\u5982\u4e0b\uff1a \u8d44\u6e90 \u4e3b\u8981\u7279\u5f81 Flash 8KB SRAM 512B \u9891\u7387 12MHz EEPROM 64B \u5b9a\u65f6\u5668 1\u4e2a8bit\uff0c1\u4e2a16bit PWM 2\u901a\u9053 ADC 8\u901a\u905310bit \u6bd4\u8f83\u5668 1 GPIO 28 SPI 1 TWI 1 \u770b\u95e8\u72d7 1 \u7535\u538b 0~4MHz @ 1.8~5.5V 0~8MHz @ 2.7~5.5V 0~12MHz @ 4.5~5.5V MH-ET LIVE Tiny88\u7684\u5f15\u811a\u56fe\u5982\u4e0b\uff1a \u677f\u5b50\u5171\u5f15\u51fa\u4e8626\u4e2aIO\u53e3\uff0c\u5c11\u4e86\u76842\u4e2aIO\u53e3\u662fPB6\u548cPC6\uff0c\u5176\u4e2dPB6\u6ca1\u6709\u5f15\u51fa\uff0c\u53ef\u4ee5\u901a\u8fc7\u7194\u4e1d\u4f4d\u5c06RST\u5f15\u811a\u914d\u7f6e\u4e3aPC6\u3002\u53e6\u5916\uff0c1\u53f7\u548c2\u53f7\u5f15\u811a\u662f\u8fde\u63a5\u5230USB\u53e3\u7684\uff0c\u4f9bVUSB\u4f7f\u7528\uff0c\u6700\u597d\u4e0d\u8981\u53e6\u4f5c\u4ed6\u7528\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u677f\u5b50\u642d\u8f7d\u7684\u6676\u632f\u9891\u7387\u4e3a16MHz\uff0c\u5df2\u7ecf\u8d85\u8fc7\u4e86 ATtiny88\u624b\u518c \u91cc\u6807\u660e\u7684\u6700\u5927\u5de5\u4f5c\u9891\u738712MHz\uff0c\u8d85\u9891\u4e8633%\u3002 \u7194\u4e1d\u4f4d \u00b6 ATtiny88\u62e5\u67093\u4e2a\u5b57\u8282\u7684\u7194\u4e1d\u4f4d\uff0c\u548c\u4e00\u822c\u7684\u903b\u8f91\u76f8\u53cd\uff0c\u7194\u4e1d\u4f4d\u4e2d\u7684 1 \u8868\u793a\u672a\u7f16\u7a0b\uff08\u7981\u6b62\uff09\uff0c 0 \u8868\u793a\u5df2\u7f16\u7a0b\uff08\u542f\u7528\uff09\u3002\u4fee\u6539\u7194\u4e1d\u4f4d\u65f6\u9700\u8981\u8c28\u614e\u518d\u8c28\u614e\uff0c\u5426\u5219\u53ef\u80fd\u9020\u6210\u9501\u6b7b\u5355\u7247\u673a\uff08\u4fd7\u79f0\u53d8\u7816\uff09\u3002 \u7194\u4e1d\u6269\u5c55\u4f4d \u00b6 SELFPRGEN \uff1a\u8bbe\u4e3a 0 \u8868\u793a\u542f\u7528\u81ea\u7f16\u7a0b\uff08 SPM \u6307\u4ee4\uff09 \u7194\u4e1d\u9ad8\u4f4d \u00b6 RSTDISBL \uff1a\u8bbe\u4e3a 0 \u65f6\u5c06\u590d\u4f4d\u5f15\u811a\u7528\u4f5c\u666e\u901aIO\uff08PC6\uff09\uff0c \u4fee\u6539\u9700\u8c28\u614e\uff01 DWEN \uff1a\u8bbe\u4e3a 0 \u65f6\u542f\u7528\u8c03\u8bd5\u63a5\u53e3 SPIEN \uff1a\u8bbe\u4e3a 0 \u65f6\u53ef\u4ee5\u901a\u8fc7SPI\u4e0b\u8f7d\u7a0b\u5e8f\u548c\u6570\u636e\uff0c \u4fee\u6539\u9700\u8c28\u614e\uff01 WDTON \uff1a\u8bbe\u4e3a 0 \u65f6\u5c06\u603b\u662f\u542f\u7528\u770b\u95e8\u72d7 EESAVE \uff1a\u8bbe\u4e3a 0 \u65f6\u64e6\u9664\u82af\u7247\u65f6\u4f1a\u4fdd\u7559EEPROM\u4e2d\u7684\u5185\u5bb9 BODLEVEL[2:0] \uff1a\u8bbe\u7f6e\u6b20\u538b\u68c0\u6d4b\u7b49\u7ea7 \u7194\u4e1d\u4f4e\u4f4d \u00b6 CKDIV8 \uff1a\u8bbe\u4e3a 0 \u65f6\u7cfb\u7edf\u65f6\u949f\u4f1a\u8fdb\u884c8\u5206\u9891 CKOUT \uff1a\u8bbe\u4e3a 0 \u65f6\u542f\u7528\u65f6\u949f\u8f93\u51fa\uff08\u901a\u8fc7CLKO\u5f15\u811a\uff09 SUT[1:0] \uff1a\u8bbe\u7f6e\u542f\u52a8\u65f6\u95f4 CKSEL[1:0] \uff1a\u8bbe\u7f6e\u65f6\u949f\u6e90 \u4fee\u6539\u7194\u4e1d\u4f4d \u00b6 \u5728Windows\u73af\u5883\u4e0b\uff0c\u53ef\u4ee5\u501f\u52a9 PROGISP \u8f6f\u4ef6\u67e5\u770b\u548c\u4fee\u6539\u7194\u4e1d\u4f4d\u3002 \u901a\u8fc7USBasp\u5c06\u6838\u5fc3\u677f\u4e0e\u7535\u8111\u8fde\u63a5\uff0c\u6253\u5f00PROGISP\u8f6f\u4ef6\uff0c\u5728\u201cSelect Chip\u201d\u4e0b\u9009\u62e9\u201cATtiny88\u201d\uff0c\u70b9\u51fb\u201cRD\u201d\u6309\u94ae\uff0c\u5982\u679c\u8fde\u63a5\u6ca1\u6709\u95ee\u9898\uff0c\u4f1a\u63d0\u793a\u201c\u8bfb\u51faID\u6210\u529f\u201d\u3002 \u70b9\u51fb\u201c\u81ea\u52a8\u201d\u6309\u94ae\u65c1\u8fb9\u7684\u201c...\u201d\u6309\u94ae\u3002 \u5728\u5f39\u51fa\u7684\u5c0f\u7a97\u53e3\u4e2d\u70b9\u51fb\u4e0b\u65b9\u201c\u4f4d\u914d\u7f6e\u65b9\u5f0f\u201d\u6807\u7b7e\u9875\u4e2d\u7684\u201c\u8bfb\u51fa\u201d\u6309\u94ae\uff0c\u63d0\u793a\u201c\u7194\u4e1d\u4f4d\u8bfb\u51fa\u6210\u529f\u201d\u3002 \u70b9\u51fb\u9700\u8981\u4fee\u6539\u7194\u4e1d\u4f4d\u5373\u53ef\u5207\u6362\u8be5\u4f4d\u7684\u503c\uff0c\u8bbe\u7f6e\u5b8c\u6bd5\u540e\u70b9\u51fb\u201c\u4f4d\u914d\u7f6e\u65b9\u5f0f\u201d\u4e2d\u7684\u201c\u5199\u5165\u201d\u6309\u94ae\uff0c\u63d0\u793a\u201c\u7194\u4e1d\u4f4d\u5199\u5165\u6210\u529f\u201d\u3002 \u81f3\u6b64\uff0c\u4fbf\u5b8c\u6210\u4e86\u7194\u4e1d\u4f4d\u7684\u4fee\u6539\u3002 \u70b9\u706f \u00b6 \u201c\u70b9\u706f\u201d\u7a0b\u5e8f\u5c31\u662f\u5355\u7247\u673a\u5f00\u53d1\u4e2d\u7684\u201cHello World\uff01\u201d\uff0c\u501f\u52a9\u5b83\uff0c\u53ef\u4ee5\u5927\u81f4\u4f53\u4f1a\u5355\u7247\u673a\u5f00\u53d1\u7684\u5b8c\u6574\u6d41\u7a0b\u3002 \u5bc4\u5b58\u5668\u4ecb\u7ecd \u00b6 \u5728ATtiny88\u4e2d\uff0c\u6bcf\u4e2aIO\u53e3\u90fd\u53ef\u4f5c\u4e3a\u8f93\u5165\u6216\u8005\u8f93\u51fa\uff0c\u5e76\u4e14\u90fd\u6709\u4e00\u4e2a\u72ec\u7acb\u53ef\u63a7\u7684\u5185\u90e8\u4e0a\u62c9\u7535\u963b\u3002 \u4e0eIO\u76f8\u5173\u7684\u5bc4\u5b58\u5668\u4e3b\u8981\u6709 MCUCR \u3001 PORTCR \u3001 PORTx \u3001 DDRx \u3001 PINx \u3002 PUD \uff1a\u5199 1 \u7981\u6b62\u5185\u90e8\u4e0a\u62c9\u7535\u963b\uff08\u5168\u5c40\uff09 BBMx \uff1a\u5199 1 \u4f7f\u80fd\u5bf9\u5e94\u7aef\u53e3\u7684Break-Before-Make\u6a21\u5f0f PUDx \uff1a\u5199 1 \u7981\u6b62\u5bf9\u5e94\u7aef\u53e3\u7684\u5185\u90e8\u4e0a\u62c9\u7535\u963b PORTx \u5bc4\u5b58\u5668\u5b58\u653e\u8f93\u51fa\u6570\u636e\uff0c PINx \u5bc4\u5b58\u5668\u5b58\u653e\u8f93\u5165\u6570\u636e\uff0c DDRx \u5bc4\u5b58\u5668\u7528\u4e8e\u914d\u7f6e\u7aef\u53e3\u65b9\u5411\uff0c 0 \u8868\u793a\u8f93\u5165\uff0c 1 \u8868\u793a\u8f93\u51fa\u3002 \u5f53IO\u914d\u7f6e\u4e3a\u8f93\u5165\u6a21\u5f0f\u65f6\uff0c\u5411 PORTx \u5bc4\u5b58\u5668\u4e2d\u5199 1 \u8868\u793a\u542f\u7528\u5185\u90e8\u4e0a\u62c9\u7535\u963b\u3002 \u4e0d\u7ba1\u662f\u8f93\u5165\u8fd8\u662f\u8f93\u51fa\u6a21\u5f0f\uff0c\u5411 PINx \u5bc4\u5b58\u5668\u4e2d\u5199 1 \u90fd\u8868\u793a\u7ffb\u8f6c PORTx \u5bc4\u5b58\u5668\u4e2d\u5bf9\u5e94\u4f4d\u7684\u72b6\u6001\u3002 IO\u53e3\u7684\u5177\u4f53\u914d\u7f6e\u7ec4\u5408\u5982\u4e0b\u6240\u793a\uff1a \u4ee3\u7801 \u00b6 \u4ee3\u7801\u6587\u4ef6\u7684\u6574\u4f53\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 4 5 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2514\u2500\u2500 src \u2514\u2500\u2500 main.c \u4e3a\u4e86\u65b9\u4fbf\u7f16\u8bd1\uff0c\u5728\u6839\u76ee\u5f55\u4e0b\u7f16\u5199\u4e00\u4e2a Makefile \u6587\u4ef6\uff1a Makefile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 CC = avr-gcc CP = avr-objcopy SZ = avr-size DP = avr-objdump AVRDUDE = avrdude TARGET = led BUILD_DIR = build C_SOURCES = src/main.c C_INCLUDES = -Iinc C_DEFS = -DF_CPU = 16000000 LIBS = -lc -lm LIBDIRS = MCU = -mmcu = attiny88 OPT = -Og CFLAGS = $( MCU ) $( C_DEFS ) $( C_INCLUDES ) $( OPT ) -g -std = gnu99 -Wall -fdata-sections -ffunction-sections LDFLAGS = $( MCU ) $( LIBS ) $( LIBDIRS ) -Wl,--gc-sections -Wl,-Map = $( BUILD_DIR ) / $( TARGET ) .map,--cref PROGRAMMER_ID = usbasp PARTNO = t88 PORT = BAUDRATE = OBJECTS = $( addprefix $( BUILD_DIR ) /, $( C_SOURCES:.c = .o )) CFLAGS += -MMD -MP -MF \" $( @:%.o = %.d ) \" -Wa,-adhmls = $( @:%.o = %.lst ) AVRDUDE_FLAGS = -c $( PROGRAMMER_ID ) -p $( PARTNO ) ifneq ($(PORT),) AVRDUDE_FLAGS += -P $( PORT ) endif ifneq ($(BAUDRATE),) AVRDUDE_FLAGS += -b $( BAUDRATE ) endif .PHONY : all clean flash all : $( BUILD_DIR ) / $( TARGET ) . elf $( BUILD_DIR ) / $( TARGET ) . txt $( BUILD_DIR ) / $( TARGET ) . hex $( BUILD_DIR ) / $( TARGET ) . bin $(BUILD_DIR)/%.o : %. c Makefile | $( BUILD_DIR ) $( CC ) -c $( CFLAGS ) -o $@ $< $(BUILD_DIR)/$(TARGET).elf : $( OBJECTS ) $( CC ) $( LDFLAGS ) $( OBJECTS ) -o $@ $( SZ ) $@ $(BUILD_DIR)/$(TARGET).txt : $( BUILD_DIR ) / $( TARGET ) . elf $( DP ) -h -S $< > $@ $(BUILD_DIR)/$(TARGET).hex : $( BUILD_DIR ) / $( TARGET ) . elf $( CP ) -O ihex $< $@ $(BUILD_DIR)/$(TARGET).bin : $( BUILD_DIR ) / $( TARGET ) . elf $( CP ) -O binary -S $< $@ $(BUILD_DIR) : mkdir -p $( sort $( dir $( OBJECTS ))) clean : rm -rf $( BUILD_DIR ) flash : $( BUILD_DIR ) / $( TARGET ) . hex $( AVRDUDE ) $( AVRDUDE_FLAGS ) -U flash:w:$<:i -include $(OBJECTS:%.o=%.d) Makefile \u6587\u4ef6\u4e2d\u7684 TARGET \u53d8\u91cf\u6307\u5b9a\u76ee\u6807\u540d\u79f0\uff0c BUILD_DIR \u53d8\u91cf\u6307\u5b9a\u7f16\u8bd1\u76ee\u5f55\uff0c C_SOURCES \u6307\u5b9aC\u6e90\u6587\u4ef6\uff0c C_DEFS \u6307\u5b9aC\u5b8f\u5b9a\u4e49\uff0c C_INCLUDES \u6307\u5b9a\u5934\u6587\u4ef6\u76ee\u5f55\u3002 MH-ET LIVE Tiny88\u677f\u8f7d\u7684LED\u8fde\u63a5\u52300\u53f7\u5f15\u811a\uff0c\u5bf9\u5e94\u7684\u662fPD0\uff0c\u9ad8\u7535\u5e73\u70b9\u4eae\u3002\u5728 src \u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a main.c \u6e90\u6587\u4ef6\uff0c\u8f93\u5165\u5982\u4e0b\u4ee3\u7801\uff0c\u5b9e\u73b0\uff1a\u8bbe\u7f6ePD0\u4f4d\u8f93\u51fa\u6a21\u5f0f\uff0c\u7136\u540e\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u7ffb\u8f6cPD0\u7684\u8f93\u51fa\u3002 src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <stdint.h> #include <avr/io.h> static void delay ( void ); int main ( void ) { DDRD |= 0x01 ; PORTD |= 0x01 ; for (;;) { PIND = 0x01 ; delay (); } } static void delay ( void ) { for ( volatile uint32_t i = 0 ; i < 0x20000 ; i ++ ); } \u7f16\u8bd1\u4ee3\u7801\uff1a 1 make \u5c06\u5728 build \u6587\u4ef6\u5939\u4e0b\u751f\u6210ELF/HEX/BIN\u6587\u4ef6\u3002 \u4e0b\u8f7d \u00b6 \u5728 /etc/udev/rules.d/ \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2aUSBasp\u7684\u89c4\u5219\u6587\u4ef6 99-usbasp.rules \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a /etc/udev/rules.d/99-usbasp.rules 1 ATTRS{idVendor}==\"16c0\", ATTRS{idProduct}==\"05dc\", MODE=\"664\", GROUP=\"plugdev\" \u5176\u4e2d\uff0c\u6ce8\u610f idVector \u548c idProduct \u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u586b\u5199\u3002 \u5b89\u88c5 avrdude \u8f6f\u4ef6\uff1a 1 sudo apt install avrdude \u8fde\u63a5USBasp\uff0c\u8fdb\u884c\u4e0b\u8f7d\uff1a 1 make flash \u4e0a\u8ff0\u547d\u4ee4\u5b9e\u9645\u4e0a\u6267\u884c\u7684\u662f\uff1a 1 avrdude -c usbasp -p t88 -U flash:w:build/led.hex:i avrdude \u4e2d\u5e38\u7528\u7684\u9009\u9879\u5982\u4e0b \u9009\u9879 \u542b\u4e49 \u53d6\u503c -c programmer-id \u6307\u5b9a\u7f16\u7a0b\u5668 usbasp \uff1aUSBasp arduino \uff1aArduinoISP -p partno \u6307\u5b9a\u5355\u7247\u673a t88 \uff1aATtiny88 m328p \uff1aATmega328P m32u4 \uff1aATmega32U4 -P port \u6307\u5b9a\u7aef\u53e3 -b baudrate \u6307\u5b9a\u6ce2\u7279\u7387 -U memtype:op:filename[:format] \u6307\u5b9a\u6267\u884c\u7684\u64cd\u4f5c memtype \uff1a\u5185\u5b58\u533a\u57df op \uff1a\u64cd\u4f5c filename \uff1a\u6587\u4ef6\u540d format \uff1a\u6587\u4ef6\u683c\u5f0f memtype \u7684\u53d6\u503c\uff1a flash \uff1aFlash ROM eeprom \uff1aEEPROM efuse / hfuse / lfuse \uff1a\u6269\u5c55/\u9ad8/\u4f4e\u7194\u4e1d\u4f4d op \u7684\u53d6\u503c\uff1a r \uff1a\u8bfb w \uff1a\u5199 v \uff1a\u6821\u9a8c format \u7684\u53d6\u503c\uff1a i \uff1aIntel Hex r \uff1araw binary e \uff1aELF \u8f93\u51fa\u5982\u4e0b\u4fe1\u606f\u8868\u793a\u4e0b\u8f7d\u6210\u529f\uff1a \u53c2\u8003\u8d44\u6599 \u00b6 ATtiny88 Datasheet PROGISP AVRDUDE User Manual","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e00\uff09\uff1a\u70b9\u706f"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#attiny88","text":"\u6700\u8fd1\u901b\u6dd8\u5b9d\u65f6\uff0c\u53d1\u73b0\u4e00\u5757ATtiny88\u6838\u5fc3\u677f\uff08MH-ET LIVE Tiny88\uff09\u7528\u5b8c\u7ea2\u5305\u540e\u53ea\u52694\u5757\u94b1\u4e86\uff0c\u679c\u65ad\u4e0b\u5355\uff0c\u51c6\u5907\u597d\u597d\u628a\u73a9\u4e00\u756a\u3002","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e00\uff09\uff1a\u70b9\u706f"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#mh-et-live-tiny88","text":"\u8fd9\u5757\u6838\u5fc3\u677f\u4f7f\u7528\u7684MCU\u578b\u53f7\u662fATtiny88\uff0c\u4e3b\u8981\u53c2\u6570\u5982\u4e0b\uff1a \u8d44\u6e90 \u4e3b\u8981\u7279\u5f81 Flash 8KB SRAM 512B \u9891\u7387 12MHz EEPROM 64B \u5b9a\u65f6\u5668 1\u4e2a8bit\uff0c1\u4e2a16bit PWM 2\u901a\u9053 ADC 8\u901a\u905310bit \u6bd4\u8f83\u5668 1 GPIO 28 SPI 1 TWI 1 \u770b\u95e8\u72d7 1 \u7535\u538b 0~4MHz @ 1.8~5.5V 0~8MHz @ 2.7~5.5V 0~12MHz @ 4.5~5.5V MH-ET LIVE Tiny88\u7684\u5f15\u811a\u56fe\u5982\u4e0b\uff1a \u677f\u5b50\u5171\u5f15\u51fa\u4e8626\u4e2aIO\u53e3\uff0c\u5c11\u4e86\u76842\u4e2aIO\u53e3\u662fPB6\u548cPC6\uff0c\u5176\u4e2dPB6\u6ca1\u6709\u5f15\u51fa\uff0c\u53ef\u4ee5\u901a\u8fc7\u7194\u4e1d\u4f4d\u5c06RST\u5f15\u811a\u914d\u7f6e\u4e3aPC6\u3002\u53e6\u5916\uff0c1\u53f7\u548c2\u53f7\u5f15\u811a\u662f\u8fde\u63a5\u5230USB\u53e3\u7684\uff0c\u4f9bVUSB\u4f7f\u7528\uff0c\u6700\u597d\u4e0d\u8981\u53e6\u4f5c\u4ed6\u7528\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u677f\u5b50\u642d\u8f7d\u7684\u6676\u632f\u9891\u7387\u4e3a16MHz\uff0c\u5df2\u7ecf\u8d85\u8fc7\u4e86 ATtiny88\u624b\u518c \u91cc\u6807\u660e\u7684\u6700\u5927\u5de5\u4f5c\u9891\u738712MHz\uff0c\u8d85\u9891\u4e8633%\u3002","title":"MH-ET LIVE Tiny88\u4ecb\u7ecd"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#_1","text":"ATtiny88\u62e5\u67093\u4e2a\u5b57\u8282\u7684\u7194\u4e1d\u4f4d\uff0c\u548c\u4e00\u822c\u7684\u903b\u8f91\u76f8\u53cd\uff0c\u7194\u4e1d\u4f4d\u4e2d\u7684 1 \u8868\u793a\u672a\u7f16\u7a0b\uff08\u7981\u6b62\uff09\uff0c 0 \u8868\u793a\u5df2\u7f16\u7a0b\uff08\u542f\u7528\uff09\u3002\u4fee\u6539\u7194\u4e1d\u4f4d\u65f6\u9700\u8981\u8c28\u614e\u518d\u8c28\u614e\uff0c\u5426\u5219\u53ef\u80fd\u9020\u6210\u9501\u6b7b\u5355\u7247\u673a\uff08\u4fd7\u79f0\u53d8\u7816\uff09\u3002","title":"\u7194\u4e1d\u4f4d"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#_2","text":"SELFPRGEN \uff1a\u8bbe\u4e3a 0 \u8868\u793a\u542f\u7528\u81ea\u7f16\u7a0b\uff08 SPM \u6307\u4ee4\uff09","title":"\u7194\u4e1d\u6269\u5c55\u4f4d"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#_3","text":"RSTDISBL \uff1a\u8bbe\u4e3a 0 \u65f6\u5c06\u590d\u4f4d\u5f15\u811a\u7528\u4f5c\u666e\u901aIO\uff08PC6\uff09\uff0c \u4fee\u6539\u9700\u8c28\u614e\uff01 DWEN \uff1a\u8bbe\u4e3a 0 \u65f6\u542f\u7528\u8c03\u8bd5\u63a5\u53e3 SPIEN \uff1a\u8bbe\u4e3a 0 \u65f6\u53ef\u4ee5\u901a\u8fc7SPI\u4e0b\u8f7d\u7a0b\u5e8f\u548c\u6570\u636e\uff0c \u4fee\u6539\u9700\u8c28\u614e\uff01 WDTON \uff1a\u8bbe\u4e3a 0 \u65f6\u5c06\u603b\u662f\u542f\u7528\u770b\u95e8\u72d7 EESAVE \uff1a\u8bbe\u4e3a 0 \u65f6\u64e6\u9664\u82af\u7247\u65f6\u4f1a\u4fdd\u7559EEPROM\u4e2d\u7684\u5185\u5bb9 BODLEVEL[2:0] \uff1a\u8bbe\u7f6e\u6b20\u538b\u68c0\u6d4b\u7b49\u7ea7","title":"\u7194\u4e1d\u9ad8\u4f4d"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#_4","text":"CKDIV8 \uff1a\u8bbe\u4e3a 0 \u65f6\u7cfb\u7edf\u65f6\u949f\u4f1a\u8fdb\u884c8\u5206\u9891 CKOUT \uff1a\u8bbe\u4e3a 0 \u65f6\u542f\u7528\u65f6\u949f\u8f93\u51fa\uff08\u901a\u8fc7CLKO\u5f15\u811a\uff09 SUT[1:0] \uff1a\u8bbe\u7f6e\u542f\u52a8\u65f6\u95f4 CKSEL[1:0] \uff1a\u8bbe\u7f6e\u65f6\u949f\u6e90","title":"\u7194\u4e1d\u4f4e\u4f4d"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#_5","text":"\u5728Windows\u73af\u5883\u4e0b\uff0c\u53ef\u4ee5\u501f\u52a9 PROGISP \u8f6f\u4ef6\u67e5\u770b\u548c\u4fee\u6539\u7194\u4e1d\u4f4d\u3002 \u901a\u8fc7USBasp\u5c06\u6838\u5fc3\u677f\u4e0e\u7535\u8111\u8fde\u63a5\uff0c\u6253\u5f00PROGISP\u8f6f\u4ef6\uff0c\u5728\u201cSelect Chip\u201d\u4e0b\u9009\u62e9\u201cATtiny88\u201d\uff0c\u70b9\u51fb\u201cRD\u201d\u6309\u94ae\uff0c\u5982\u679c\u8fde\u63a5\u6ca1\u6709\u95ee\u9898\uff0c\u4f1a\u63d0\u793a\u201c\u8bfb\u51faID\u6210\u529f\u201d\u3002 \u70b9\u51fb\u201c\u81ea\u52a8\u201d\u6309\u94ae\u65c1\u8fb9\u7684\u201c...\u201d\u6309\u94ae\u3002 \u5728\u5f39\u51fa\u7684\u5c0f\u7a97\u53e3\u4e2d\u70b9\u51fb\u4e0b\u65b9\u201c\u4f4d\u914d\u7f6e\u65b9\u5f0f\u201d\u6807\u7b7e\u9875\u4e2d\u7684\u201c\u8bfb\u51fa\u201d\u6309\u94ae\uff0c\u63d0\u793a\u201c\u7194\u4e1d\u4f4d\u8bfb\u51fa\u6210\u529f\u201d\u3002 \u70b9\u51fb\u9700\u8981\u4fee\u6539\u7194\u4e1d\u4f4d\u5373\u53ef\u5207\u6362\u8be5\u4f4d\u7684\u503c\uff0c\u8bbe\u7f6e\u5b8c\u6bd5\u540e\u70b9\u51fb\u201c\u4f4d\u914d\u7f6e\u65b9\u5f0f\u201d\u4e2d\u7684\u201c\u5199\u5165\u201d\u6309\u94ae\uff0c\u63d0\u793a\u201c\u7194\u4e1d\u4f4d\u5199\u5165\u6210\u529f\u201d\u3002 \u81f3\u6b64\uff0c\u4fbf\u5b8c\u6210\u4e86\u7194\u4e1d\u4f4d\u7684\u4fee\u6539\u3002","title":"\u4fee\u6539\u7194\u4e1d\u4f4d"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#_6","text":"\u201c\u70b9\u706f\u201d\u7a0b\u5e8f\u5c31\u662f\u5355\u7247\u673a\u5f00\u53d1\u4e2d\u7684\u201cHello World\uff01\u201d\uff0c\u501f\u52a9\u5b83\uff0c\u53ef\u4ee5\u5927\u81f4\u4f53\u4f1a\u5355\u7247\u673a\u5f00\u53d1\u7684\u5b8c\u6574\u6d41\u7a0b\u3002","title":"\u70b9\u706f"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#_7","text":"\u5728ATtiny88\u4e2d\uff0c\u6bcf\u4e2aIO\u53e3\u90fd\u53ef\u4f5c\u4e3a\u8f93\u5165\u6216\u8005\u8f93\u51fa\uff0c\u5e76\u4e14\u90fd\u6709\u4e00\u4e2a\u72ec\u7acb\u53ef\u63a7\u7684\u5185\u90e8\u4e0a\u62c9\u7535\u963b\u3002 \u4e0eIO\u76f8\u5173\u7684\u5bc4\u5b58\u5668\u4e3b\u8981\u6709 MCUCR \u3001 PORTCR \u3001 PORTx \u3001 DDRx \u3001 PINx \u3002 PUD \uff1a\u5199 1 \u7981\u6b62\u5185\u90e8\u4e0a\u62c9\u7535\u963b\uff08\u5168\u5c40\uff09 BBMx \uff1a\u5199 1 \u4f7f\u80fd\u5bf9\u5e94\u7aef\u53e3\u7684Break-Before-Make\u6a21\u5f0f PUDx \uff1a\u5199 1 \u7981\u6b62\u5bf9\u5e94\u7aef\u53e3\u7684\u5185\u90e8\u4e0a\u62c9\u7535\u963b PORTx \u5bc4\u5b58\u5668\u5b58\u653e\u8f93\u51fa\u6570\u636e\uff0c PINx \u5bc4\u5b58\u5668\u5b58\u653e\u8f93\u5165\u6570\u636e\uff0c DDRx \u5bc4\u5b58\u5668\u7528\u4e8e\u914d\u7f6e\u7aef\u53e3\u65b9\u5411\uff0c 0 \u8868\u793a\u8f93\u5165\uff0c 1 \u8868\u793a\u8f93\u51fa\u3002 \u5f53IO\u914d\u7f6e\u4e3a\u8f93\u5165\u6a21\u5f0f\u65f6\uff0c\u5411 PORTx \u5bc4\u5b58\u5668\u4e2d\u5199 1 \u8868\u793a\u542f\u7528\u5185\u90e8\u4e0a\u62c9\u7535\u963b\u3002 \u4e0d\u7ba1\u662f\u8f93\u5165\u8fd8\u662f\u8f93\u51fa\u6a21\u5f0f\uff0c\u5411 PINx \u5bc4\u5b58\u5668\u4e2d\u5199 1 \u90fd\u8868\u793a\u7ffb\u8f6c PORTx \u5bc4\u5b58\u5668\u4e2d\u5bf9\u5e94\u4f4d\u7684\u72b6\u6001\u3002 IO\u53e3\u7684\u5177\u4f53\u914d\u7f6e\u7ec4\u5408\u5982\u4e0b\u6240\u793a\uff1a","title":"\u5bc4\u5b58\u5668\u4ecb\u7ecd"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#_8","text":"\u4ee3\u7801\u6587\u4ef6\u7684\u6574\u4f53\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 4 5 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2514\u2500\u2500 src \u2514\u2500\u2500 main.c \u4e3a\u4e86\u65b9\u4fbf\u7f16\u8bd1\uff0c\u5728\u6839\u76ee\u5f55\u4e0b\u7f16\u5199\u4e00\u4e2a Makefile \u6587\u4ef6\uff1a Makefile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 CC = avr-gcc CP = avr-objcopy SZ = avr-size DP = avr-objdump AVRDUDE = avrdude TARGET = led BUILD_DIR = build C_SOURCES = src/main.c C_INCLUDES = -Iinc C_DEFS = -DF_CPU = 16000000 LIBS = -lc -lm LIBDIRS = MCU = -mmcu = attiny88 OPT = -Og CFLAGS = $( MCU ) $( C_DEFS ) $( C_INCLUDES ) $( OPT ) -g -std = gnu99 -Wall -fdata-sections -ffunction-sections LDFLAGS = $( MCU ) $( LIBS ) $( LIBDIRS ) -Wl,--gc-sections -Wl,-Map = $( BUILD_DIR ) / $( TARGET ) .map,--cref PROGRAMMER_ID = usbasp PARTNO = t88 PORT = BAUDRATE = OBJECTS = $( addprefix $( BUILD_DIR ) /, $( C_SOURCES:.c = .o )) CFLAGS += -MMD -MP -MF \" $( @:%.o = %.d ) \" -Wa,-adhmls = $( @:%.o = %.lst ) AVRDUDE_FLAGS = -c $( PROGRAMMER_ID ) -p $( PARTNO ) ifneq ($(PORT),) AVRDUDE_FLAGS += -P $( PORT ) endif ifneq ($(BAUDRATE),) AVRDUDE_FLAGS += -b $( BAUDRATE ) endif .PHONY : all clean flash all : $( BUILD_DIR ) / $( TARGET ) . elf $( BUILD_DIR ) / $( TARGET ) . txt $( BUILD_DIR ) / $( TARGET ) . hex $( BUILD_DIR ) / $( TARGET ) . bin $(BUILD_DIR)/%.o : %. c Makefile | $( BUILD_DIR ) $( CC ) -c $( CFLAGS ) -o $@ $< $(BUILD_DIR)/$(TARGET).elf : $( OBJECTS ) $( CC ) $( LDFLAGS ) $( OBJECTS ) -o $@ $( SZ ) $@ $(BUILD_DIR)/$(TARGET).txt : $( BUILD_DIR ) / $( TARGET ) . elf $( DP ) -h -S $< > $@ $(BUILD_DIR)/$(TARGET).hex : $( BUILD_DIR ) / $( TARGET ) . elf $( CP ) -O ihex $< $@ $(BUILD_DIR)/$(TARGET).bin : $( BUILD_DIR ) / $( TARGET ) . elf $( CP ) -O binary -S $< $@ $(BUILD_DIR) : mkdir -p $( sort $( dir $( OBJECTS ))) clean : rm -rf $( BUILD_DIR ) flash : $( BUILD_DIR ) / $( TARGET ) . hex $( AVRDUDE ) $( AVRDUDE_FLAGS ) -U flash:w:$<:i -include $(OBJECTS:%.o=%.d) Makefile \u6587\u4ef6\u4e2d\u7684 TARGET \u53d8\u91cf\u6307\u5b9a\u76ee\u6807\u540d\u79f0\uff0c BUILD_DIR \u53d8\u91cf\u6307\u5b9a\u7f16\u8bd1\u76ee\u5f55\uff0c C_SOURCES \u6307\u5b9aC\u6e90\u6587\u4ef6\uff0c C_DEFS \u6307\u5b9aC\u5b8f\u5b9a\u4e49\uff0c C_INCLUDES \u6307\u5b9a\u5934\u6587\u4ef6\u76ee\u5f55\u3002 MH-ET LIVE Tiny88\u677f\u8f7d\u7684LED\u8fde\u63a5\u52300\u53f7\u5f15\u811a\uff0c\u5bf9\u5e94\u7684\u662fPD0\uff0c\u9ad8\u7535\u5e73\u70b9\u4eae\u3002\u5728 src \u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a main.c \u6e90\u6587\u4ef6\uff0c\u8f93\u5165\u5982\u4e0b\u4ee3\u7801\uff0c\u5b9e\u73b0\uff1a\u8bbe\u7f6ePD0\u4f4d\u8f93\u51fa\u6a21\u5f0f\uff0c\u7136\u540e\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u7ffb\u8f6cPD0\u7684\u8f93\u51fa\u3002 src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <stdint.h> #include <avr/io.h> static void delay ( void ); int main ( void ) { DDRD |= 0x01 ; PORTD |= 0x01 ; for (;;) { PIND = 0x01 ; delay (); } } static void delay ( void ) { for ( volatile uint32_t i = 0 ; i < 0x20000 ; i ++ ); } \u7f16\u8bd1\u4ee3\u7801\uff1a 1 make \u5c06\u5728 build \u6587\u4ef6\u5939\u4e0b\u751f\u6210ELF/HEX/BIN\u6587\u4ef6\u3002","title":"\u4ee3\u7801"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#_9","text":"\u5728 /etc/udev/rules.d/ \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2aUSBasp\u7684\u89c4\u5219\u6587\u4ef6 99-usbasp.rules \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a /etc/udev/rules.d/99-usbasp.rules 1 ATTRS{idVendor}==\"16c0\", ATTRS{idProduct}==\"05dc\", MODE=\"664\", GROUP=\"plugdev\" \u5176\u4e2d\uff0c\u6ce8\u610f idVector \u548c idProduct \u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u586b\u5199\u3002 \u5b89\u88c5 avrdude \u8f6f\u4ef6\uff1a 1 sudo apt install avrdude \u8fde\u63a5USBasp\uff0c\u8fdb\u884c\u4e0b\u8f7d\uff1a 1 make flash \u4e0a\u8ff0\u547d\u4ee4\u5b9e\u9645\u4e0a\u6267\u884c\u7684\u662f\uff1a 1 avrdude -c usbasp -p t88 -U flash:w:build/led.hex:i avrdude \u4e2d\u5e38\u7528\u7684\u9009\u9879\u5982\u4e0b \u9009\u9879 \u542b\u4e49 \u53d6\u503c -c programmer-id \u6307\u5b9a\u7f16\u7a0b\u5668 usbasp \uff1aUSBasp arduino \uff1aArduinoISP -p partno \u6307\u5b9a\u5355\u7247\u673a t88 \uff1aATtiny88 m328p \uff1aATmega328P m32u4 \uff1aATmega32U4 -P port \u6307\u5b9a\u7aef\u53e3 -b baudrate \u6307\u5b9a\u6ce2\u7279\u7387 -U memtype:op:filename[:format] \u6307\u5b9a\u6267\u884c\u7684\u64cd\u4f5c memtype \uff1a\u5185\u5b58\u533a\u57df op \uff1a\u64cd\u4f5c filename \uff1a\u6587\u4ef6\u540d format \uff1a\u6587\u4ef6\u683c\u5f0f memtype \u7684\u53d6\u503c\uff1a flash \uff1aFlash ROM eeprom \uff1aEEPROM efuse / hfuse / lfuse \uff1a\u6269\u5c55/\u9ad8/\u4f4e\u7194\u4e1d\u4f4d op \u7684\u53d6\u503c\uff1a r \uff1a\u8bfb w \uff1a\u5199 v \uff1a\u6821\u9a8c format \u7684\u53d6\u503c\uff1a i \uff1aIntel Hex r \uff1araw binary e \uff1aELF \u8f93\u51fa\u5982\u4e0b\u4fe1\u606f\u8868\u793a\u4e0b\u8f7d\u6210\u529f\uff1a","title":"\u4e0b\u8f7d"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%82%B9%E7%81%AF/#_10","text":"ATtiny88 Datasheet PROGISP AVRDUDE User Manual","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ATWI/","text":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e03\uff09\uff1aTWI \u00b6 TWI\u6a21\u5757\u4ecb\u7ecd \u00b6 ATtiny88\u7684TWI\u6a21\u5757\u517c\u5bb9Phillips I2C\u4ee5\u53caSMBus\uff0c\u652f\u6301\u4e3b\u4ece\u6a21\u5f0f\uff0c\u652f\u63017bit\u5730\u5740\uff0c\u6700\u5927\u5141\u8bb8128\u4e2a\u4e0d\u540c\u7684\u4ece\u673a\u5730\u5740\u3002\u5728\u591a\u4e3b\u673a\u6a21\u5f0f\u4e0b\uff0c\u652f\u6301\u603b\u7ebf\u4ef2\u88c1\u3002\u4ece\u673a\u6a21\u5f0f\u4e0b\u7684\u6570\u636e\u901f\u7387\u9ad8\u8fbe400kHz\uff0c\u4e14\u4ece\u673a\u5730\u5740\u53ef\u7f16\u7a0b\u3002\u5728\u7761\u7720\u6a21\u5f0f\u4e0b\uff0c\u652f\u6301\u5730\u5740\u8bc6\u522b\u5524\u9192\u3002 \u6ce8\u610f\uff1a\u4e3a\u4e86\u4f7f\u7528TWI\u6a21\u5757\uff0c PRR \u5bc4\u5b58\u5668\u4e2d\u7684 PRTWI \u4f4d\u5fc5\u987b\u8bbe\u4e3a0\u3002 \u6570\u636e\u4f4d\u4f20\u8f93\uff1a \u5f00\u59cb\u548c\u505c\u6b62\u6761\u4ef6\uff1a \u5730\u5740\u5e27\u683c\u5f0f\uff1a \u6570\u636e\u5e27\u683c\u5f0f\uff1a \u5b8c\u6574\u7684\u4f20\u8f93\u8fc7\u7a0b\uff1a \u666e\u901a\u6a21\u5f0f\u65f6\u949f\u9891\u7387\uff1a \\[f_{SCL} = \\frac{clk_{I/O}}{16 + (2 \\times TWBR \\times TWPS)}\\] \u9ad8\u901f\u6a21\u5f0f\u65f6\u949f\u9891\u7387\uff1a \\[f_{SCL} = \\frac{clk_{TWIHS}}{16 + (2 \\times TWBR \\times TWPS)}\\] \u5176\u4e2d\uff0c \\(clk_{I/O}\\) \u4e3a\u5206\u9891\u540e\u7684\u7cfb\u7edf\u65f6\u949f\uff0c \\(clk_{TWIHS}\\) \u4e3a\u7cfb\u7edf\u65f6\u949f\u3002 \u6ce8\u610f\uff1a\u4e3b\u673a\u6a21\u5f0f\u4e0b\uff0c TWBR \u503c\u4e0d\u80fd\u4f4e\u4e8e10\u3002 \u4e0b\u56fe\u5c55\u73b0\u4e86\u4e00\u4e2a\u5178\u578b\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u4e0eTWI\u6a21\u5757\u4ea4\u4e92\u7684\u3002 ATtiny88\u7684TWI\u62e5\u6709\u56db\u79cd\u6a21\u5f0f\uff1aMaster Transmitter\u3001Master Receiver\u3001Slave Transmitter\u3001Slave Receiver\u3002 Master Transmitter\u6a21\u5f0f\u4e0b\u7684\u72b6\u6001\u7801\uff1a Master Receiver\u6a21\u5f0f\u4e0b\u7684\u72b6\u6001\u7801\uff1a Slave Receiver\u6a21\u5f0f\u4e0b\u7684\u72b6\u6001\u7801\uff1a Slave Transmitter\u6a21\u5f0f\u4e0b\u7684\u72b6\u6001\u7801\uff1a \u5176\u4ed6\u72b6\u6001\u7801\uff1a \u591a\u4e3b\u673a\u4ef2\u88c1\u8fc7\u7a0b\u53ca\u72b6\u6001\u7801\uff1a \u5bc4\u5b58\u5668 \u00b6 TWBR[7:0] \uff1a\u5206\u9891\u7cfb\u6570\uff0c\u5728\u4e3b\u673a\u6a21\u5f0f\u4e0b\u4e0d\u80fd\u4f4e\u4e8e10\u3002 TWINT \uff1aTWI\u4e2d\u65ad\u6807\u5fd7\uff0c\u5fc5\u987b\u51991\u6e05\u9664\uff08\u4e0d\u4f1a\u6267\u884c\u5b8c\u4e2d\u65ad\u81ea\u52a8\u6e05\u9664\uff09\uff0c\u5728\u6e05\u9664\u524d\uff0c\u5fc5\u987b\u5b8c\u6210\u5bf9 TWAR \u5bc4\u5b58\u5668\u3001 TWSR \u5bc4\u5b58\u5668\u3001 TWDR \u5bc4\u5b58\u5668\u7684\u64cd\u4f5c\u3002 TWINT \u7f6e\u4f4d\u671f\u95f4\uff0cSCL\u7ebf\u59cb\u7ec8\u4fdd\u6301\u4f4e\u7535\u5e73\u3002 TWEA \uff1a\u51991\u4f7f\u80fd\u5e94\u7b54\u3002 TWSTA \uff1a\u51991\u4ea7\u751fSTART\u4fe1\u53f7\uff0c\u5728START\u4fe1\u53f7\u4f20\u8f93\u5b8c\u6210\u540e\u5fc5\u987b\u624b\u52a8\u6e05\u9664\u8be5\u4f4d\u3002 TWSTO \uff1a\u51991\u4ea7\u751fSTOP\u4fe1\u53f7\uff0c\u8be5\u4f4d\u4f1a\u81ea\u52a8\u6e05\u9664\u3002\u4ece\u673a\u72b6\u6001\u4e0b\uff0c\u8bbe\u7f6e\u8be5\u4f4d\u53ef\u4ee5\u4ece\u9519\u8bef\u72b6\u6001\u4e2d\u6062\u590d\u3002 TWWC \uff1a\u5199\u51b2\u7a81\u6807\u5fd7\uff0c\u5728 TWINT \u4f4d\u4e3a1\u65f6\u5199 TWDR \u5bc4\u5b58\u5668\u6e05\u9664\u3002 TWEN \uff1a\u51991\u4f7f\u80fdTWI\u6a21\u5757\u3002 TWIE \uff1a\u51991\u4f7f\u80fdTWI\u4e2d\u65ad\u3002 TWS \uff1aTWI\u72b6\u6001\u7801\u3002 TWPS \uff1aTWI\u5206\u9891\u3002 TWA[6:0] \uff1aTWI\u4ece\u673a\u5730\u5740\u3002 TWGCE \uff1a\u51991\u4f7f\u80fdGeneral Call\u3002 TWAM[6:0] \uff1aTWI\u5730\u5740\u63a9\u7801\uff0c\u8bbe\u4e3a1\u5c06\u5ffd\u7565\u5bf9\u5e94\u4f4d\u7684\u5339\u914d\u3002 TWHS \uff1a\u51991\u4f7f\u80fdTWI\u9ad8\u901f\u6a21\u5f0f\u3002 \u4ee3\u7801 \u00b6 \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528ATtiny88\u7684TWI\u6a21\u5757\u4e0eSSD1306 OLED\u8fdb\u884c\u901a\u4fe1\u5237\u5c4f\u3002 \u6e90\u6587\u4ef6\u7684\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2502 \u251c\u2500\u2500 serial.h \u2502 \u2514\u2500\u2500 serial_stdio.h \u2514\u2500\u2500 src \u251c\u2500\u2500 main.c \u251c\u2500\u2500 serial.c \u2514\u2500\u2500 serial_stdio.c src/main.c \u6e90\u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 #include <stdint.h> #include <stdio.h> #include <avr/io.h> #include <avr/interrupt.h> #include <serial_stdio.h> #define OLED_ADDR 0x3C #define oled_write_command(cmd) oled_write_byte(0, cmd) #define oled_write_data(data) oled_write_byte(1, data) static void oled_setup ( void ); static void oled_write_byte ( uint8_t dc , uint8_t data ); static void oled_fill ( uint8_t color ); int main ( void ) { cli (); stdio_setup (); // initialize stdio and redirect it to serial oled_setup (); // initialize oled sei (); static const uint8_t colors [] = { 0x01 , 0x02 , 0x04 , 0x08 , 0x10 , 0x20 , 0x40 , 0x80 , 0x40 , 0x20 , 0x10 , 0x08 , 0x04 , 0x02 }; uint8_t i = 0 ; for (;;) { oled_fill ( colors [ i ]); i = ( i + 1 ) % sizeof ( colors ); } } static void oled_setup ( void ) { static const uint8_t cmds [] = { 0xAE , 0xD5 , 0x80 , 0xA8 , 0x3F , 0xD3 , 0x00 , 0x40 , 0x8D , 0x14 , 0x20 , 0x00 , 0xA1 , 0xC8 , 0xDA , 0x12 , 0x81 , 0xEF , 0xD9 , 0xF1 , 0xDB , 0x30 , 0xA4 , 0xA6 , 0xAF }; TWSR = 0x00 ; // TWPS = 1 TWBR = 12 ; // TWBR = 12, freq = 16MHz / (16 + 2 * 12 * 1) = 400KHz TWHSR = 0x00 ; // disable high speed mode for ( uint8_t i = 0 ; i < sizeof ( cmds ); i ++ ) { oled_write_command ( cmds [ i ]); } oled_fill ( 0x00 ); } static void oled_write_byte ( uint8_t dc , uint8_t data ) { // transmit START condition TWCR = _BV ( TWINT ) | _BV ( TWSTA ) | _BV ( TWEN ); while ( ! ( TWCR & _BV ( TWINT ))); // transmit SLA+W TWDR = OLED_ADDR << 1 ; TWCR = _BV ( TWINT ) | _BV ( TWEN ); while ( ! ( TWCR & _BV ( TWINT ))); // transmit control byte TWDR = dc ? 0x40 : 0x00 ; TWCR = _BV ( TWINT ) | _BV ( TWEN ); while ( ! ( TWCR & _BV ( TWINT ))); // transmit data byte TWDR = data ; TWCR = _BV ( TWINT ) | _BV ( TWEN ); while ( ! ( TWCR & _BV ( TWINT ))); // transmit STOP condition TWCR = _BV ( TWINT ) | _BV ( TWSTO ) | _BV ( TWEN ); // Note that TWINT is NOT set after a STOP condition has been transmitted } static void oled_fill ( uint8_t color ) { oled_write_command ( 0x21 ); oled_write_command ( 0x00 ); oled_write_command ( 0x7F ); oled_write_command ( 0x22 ); oled_write_command ( 0x00 ); oled_write_command ( 0x07 ); for ( uint8_t i = 0 ; i < 128 ; i ++ ) { for ( uint8_t j = 0 ; j < 8 ; j ++ ) { oled_write_data ( color ); } } } \u53c2\u8003\u8d44\u6599 \u00b6 ATtiny88 Datasheet","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e03\uff09\uff1aTWI"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ATWI/#attiny88twi","text":"","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e03\uff09\uff1aTWI"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ATWI/#twi","text":"ATtiny88\u7684TWI\u6a21\u5757\u517c\u5bb9Phillips I2C\u4ee5\u53caSMBus\uff0c\u652f\u6301\u4e3b\u4ece\u6a21\u5f0f\uff0c\u652f\u63017bit\u5730\u5740\uff0c\u6700\u5927\u5141\u8bb8128\u4e2a\u4e0d\u540c\u7684\u4ece\u673a\u5730\u5740\u3002\u5728\u591a\u4e3b\u673a\u6a21\u5f0f\u4e0b\uff0c\u652f\u6301\u603b\u7ebf\u4ef2\u88c1\u3002\u4ece\u673a\u6a21\u5f0f\u4e0b\u7684\u6570\u636e\u901f\u7387\u9ad8\u8fbe400kHz\uff0c\u4e14\u4ece\u673a\u5730\u5740\u53ef\u7f16\u7a0b\u3002\u5728\u7761\u7720\u6a21\u5f0f\u4e0b\uff0c\u652f\u6301\u5730\u5740\u8bc6\u522b\u5524\u9192\u3002 \u6ce8\u610f\uff1a\u4e3a\u4e86\u4f7f\u7528TWI\u6a21\u5757\uff0c PRR \u5bc4\u5b58\u5668\u4e2d\u7684 PRTWI \u4f4d\u5fc5\u987b\u8bbe\u4e3a0\u3002 \u6570\u636e\u4f4d\u4f20\u8f93\uff1a \u5f00\u59cb\u548c\u505c\u6b62\u6761\u4ef6\uff1a \u5730\u5740\u5e27\u683c\u5f0f\uff1a \u6570\u636e\u5e27\u683c\u5f0f\uff1a \u5b8c\u6574\u7684\u4f20\u8f93\u8fc7\u7a0b\uff1a \u666e\u901a\u6a21\u5f0f\u65f6\u949f\u9891\u7387\uff1a \\[f_{SCL} = \\frac{clk_{I/O}}{16 + (2 \\times TWBR \\times TWPS)}\\] \u9ad8\u901f\u6a21\u5f0f\u65f6\u949f\u9891\u7387\uff1a \\[f_{SCL} = \\frac{clk_{TWIHS}}{16 + (2 \\times TWBR \\times TWPS)}\\] \u5176\u4e2d\uff0c \\(clk_{I/O}\\) \u4e3a\u5206\u9891\u540e\u7684\u7cfb\u7edf\u65f6\u949f\uff0c \\(clk_{TWIHS}\\) \u4e3a\u7cfb\u7edf\u65f6\u949f\u3002 \u6ce8\u610f\uff1a\u4e3b\u673a\u6a21\u5f0f\u4e0b\uff0c TWBR \u503c\u4e0d\u80fd\u4f4e\u4e8e10\u3002 \u4e0b\u56fe\u5c55\u73b0\u4e86\u4e00\u4e2a\u5178\u578b\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u4e0eTWI\u6a21\u5757\u4ea4\u4e92\u7684\u3002 ATtiny88\u7684TWI\u62e5\u6709\u56db\u79cd\u6a21\u5f0f\uff1aMaster Transmitter\u3001Master Receiver\u3001Slave Transmitter\u3001Slave Receiver\u3002 Master Transmitter\u6a21\u5f0f\u4e0b\u7684\u72b6\u6001\u7801\uff1a Master Receiver\u6a21\u5f0f\u4e0b\u7684\u72b6\u6001\u7801\uff1a Slave Receiver\u6a21\u5f0f\u4e0b\u7684\u72b6\u6001\u7801\uff1a Slave Transmitter\u6a21\u5f0f\u4e0b\u7684\u72b6\u6001\u7801\uff1a \u5176\u4ed6\u72b6\u6001\u7801\uff1a \u591a\u4e3b\u673a\u4ef2\u88c1\u8fc7\u7a0b\u53ca\u72b6\u6001\u7801\uff1a","title":"TWI\u6a21\u5757\u4ecb\u7ecd"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ATWI/#_1","text":"TWBR[7:0] \uff1a\u5206\u9891\u7cfb\u6570\uff0c\u5728\u4e3b\u673a\u6a21\u5f0f\u4e0b\u4e0d\u80fd\u4f4e\u4e8e10\u3002 TWINT \uff1aTWI\u4e2d\u65ad\u6807\u5fd7\uff0c\u5fc5\u987b\u51991\u6e05\u9664\uff08\u4e0d\u4f1a\u6267\u884c\u5b8c\u4e2d\u65ad\u81ea\u52a8\u6e05\u9664\uff09\uff0c\u5728\u6e05\u9664\u524d\uff0c\u5fc5\u987b\u5b8c\u6210\u5bf9 TWAR \u5bc4\u5b58\u5668\u3001 TWSR \u5bc4\u5b58\u5668\u3001 TWDR \u5bc4\u5b58\u5668\u7684\u64cd\u4f5c\u3002 TWINT \u7f6e\u4f4d\u671f\u95f4\uff0cSCL\u7ebf\u59cb\u7ec8\u4fdd\u6301\u4f4e\u7535\u5e73\u3002 TWEA \uff1a\u51991\u4f7f\u80fd\u5e94\u7b54\u3002 TWSTA \uff1a\u51991\u4ea7\u751fSTART\u4fe1\u53f7\uff0c\u5728START\u4fe1\u53f7\u4f20\u8f93\u5b8c\u6210\u540e\u5fc5\u987b\u624b\u52a8\u6e05\u9664\u8be5\u4f4d\u3002 TWSTO \uff1a\u51991\u4ea7\u751fSTOP\u4fe1\u53f7\uff0c\u8be5\u4f4d\u4f1a\u81ea\u52a8\u6e05\u9664\u3002\u4ece\u673a\u72b6\u6001\u4e0b\uff0c\u8bbe\u7f6e\u8be5\u4f4d\u53ef\u4ee5\u4ece\u9519\u8bef\u72b6\u6001\u4e2d\u6062\u590d\u3002 TWWC \uff1a\u5199\u51b2\u7a81\u6807\u5fd7\uff0c\u5728 TWINT \u4f4d\u4e3a1\u65f6\u5199 TWDR \u5bc4\u5b58\u5668\u6e05\u9664\u3002 TWEN \uff1a\u51991\u4f7f\u80fdTWI\u6a21\u5757\u3002 TWIE \uff1a\u51991\u4f7f\u80fdTWI\u4e2d\u65ad\u3002 TWS \uff1aTWI\u72b6\u6001\u7801\u3002 TWPS \uff1aTWI\u5206\u9891\u3002 TWA[6:0] \uff1aTWI\u4ece\u673a\u5730\u5740\u3002 TWGCE \uff1a\u51991\u4f7f\u80fdGeneral Call\u3002 TWAM[6:0] \uff1aTWI\u5730\u5740\u63a9\u7801\uff0c\u8bbe\u4e3a1\u5c06\u5ffd\u7565\u5bf9\u5e94\u4f4d\u7684\u5339\u914d\u3002 TWHS \uff1a\u51991\u4f7f\u80fdTWI\u9ad8\u901f\u6a21\u5f0f\u3002","title":"\u5bc4\u5b58\u5668"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ATWI/#_2","text":"\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528ATtiny88\u7684TWI\u6a21\u5757\u4e0eSSD1306 OLED\u8fdb\u884c\u901a\u4fe1\u5237\u5c4f\u3002 \u6e90\u6587\u4ef6\u7684\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2502 \u251c\u2500\u2500 serial.h \u2502 \u2514\u2500\u2500 serial_stdio.h \u2514\u2500\u2500 src \u251c\u2500\u2500 main.c \u251c\u2500\u2500 serial.c \u2514\u2500\u2500 serial_stdio.c src/main.c \u6e90\u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 #include <stdint.h> #include <stdio.h> #include <avr/io.h> #include <avr/interrupt.h> #include <serial_stdio.h> #define OLED_ADDR 0x3C #define oled_write_command(cmd) oled_write_byte(0, cmd) #define oled_write_data(data) oled_write_byte(1, data) static void oled_setup ( void ); static void oled_write_byte ( uint8_t dc , uint8_t data ); static void oled_fill ( uint8_t color ); int main ( void ) { cli (); stdio_setup (); // initialize stdio and redirect it to serial oled_setup (); // initialize oled sei (); static const uint8_t colors [] = { 0x01 , 0x02 , 0x04 , 0x08 , 0x10 , 0x20 , 0x40 , 0x80 , 0x40 , 0x20 , 0x10 , 0x08 , 0x04 , 0x02 }; uint8_t i = 0 ; for (;;) { oled_fill ( colors [ i ]); i = ( i + 1 ) % sizeof ( colors ); } } static void oled_setup ( void ) { static const uint8_t cmds [] = { 0xAE , 0xD5 , 0x80 , 0xA8 , 0x3F , 0xD3 , 0x00 , 0x40 , 0x8D , 0x14 , 0x20 , 0x00 , 0xA1 , 0xC8 , 0xDA , 0x12 , 0x81 , 0xEF , 0xD9 , 0xF1 , 0xDB , 0x30 , 0xA4 , 0xA6 , 0xAF }; TWSR = 0x00 ; // TWPS = 1 TWBR = 12 ; // TWBR = 12, freq = 16MHz / (16 + 2 * 12 * 1) = 400KHz TWHSR = 0x00 ; // disable high speed mode for ( uint8_t i = 0 ; i < sizeof ( cmds ); i ++ ) { oled_write_command ( cmds [ i ]); } oled_fill ( 0x00 ); } static void oled_write_byte ( uint8_t dc , uint8_t data ) { // transmit START condition TWCR = _BV ( TWINT ) | _BV ( TWSTA ) | _BV ( TWEN ); while ( ! ( TWCR & _BV ( TWINT ))); // transmit SLA+W TWDR = OLED_ADDR << 1 ; TWCR = _BV ( TWINT ) | _BV ( TWEN ); while ( ! ( TWCR & _BV ( TWINT ))); // transmit control byte TWDR = dc ? 0x40 : 0x00 ; TWCR = _BV ( TWINT ) | _BV ( TWEN ); while ( ! ( TWCR & _BV ( TWINT ))); // transmit data byte TWDR = data ; TWCR = _BV ( TWINT ) | _BV ( TWEN ); while ( ! ( TWCR & _BV ( TWINT ))); // transmit STOP condition TWCR = _BV ( TWINT ) | _BV ( TWSTO ) | _BV ( TWEN ); // Note that TWINT is NOT set after a STOP condition has been transmitted } static void oled_fill ( uint8_t color ) { oled_write_command ( 0x21 ); oled_write_command ( 0x00 ); oled_write_command ( 0x7F ); oled_write_command ( 0x22 ); oled_write_command ( 0x00 ); oled_write_command ( 0x07 ); for ( uint8_t i = 0 ; i < 128 ; i ++ ) { for ( uint8_t j = 0 ; j < 8 ; j ++ ) { oled_write_data ( color ); } } }","title":"\u4ee3\u7801"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ATWI/#_3","text":"ATtiny88 Datasheet","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3/","text":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e09\uff09\uff1a\u4e32\u53e3 \u00b6 ATtiny88\u5355\u7247\u673a\u4e0d\u5305\u542b\u4e32\u53e3\u6a21\u5757\uff0c\u56e0\u6b64\u53ea\u80fd\u4f7f\u7528\u8f6f\u4ef6\u65b9\u5f0f\u6a21\u62df\u4e32\u53e3\u65f6\u5e8f\u3002 \u4e32\u53e3\u901a\u4fe1\u65f6\u5e8f\u901a\u5e38\u7531\u8d77\u59cb\u4f4d\u3001\u6570\u636e\u4f4d\u3001\u6821\u9a8c\u4f4d\u548c\u505c\u6b62\u4f4d\u56db\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u5e38\u89c1\u7684\u914d\u7f6e\u4e3a1\u4f4d\u8d77\u59cb\u4f4d\u30018\u4f4d\u6570\u636e\u4f4d\u3001\u65e0\u6821\u9a8c\u4f4d\u548c1\u4f4d\u505c\u6b62\u4f4d\u3002 \u6a21\u62df\u4e32\u53e3\u53d1\u9001\u65f6\u5e8f \u00b6 \u8bbe\u7f6eTX\u5f15\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f\uff0c\u521d\u59cb\u7535\u5e73\u72b6\u6001\u4e3a\u9ad8\u7535\u5e73\u3002 \u8bbe\u7f6e\u5b9a\u65f6\u5668\u5468\u671f\uff0c\u4ee59600\u6ce2\u7279\u7387\u4e3a\u4f8b\uff0c\u5c06\u5b9a\u65f6\u5668\u5468\u671f\u8bbe\u4e3a \\(\\frac{1s}{9600} \\approx 104us\\) \u3002 TX\u5f15\u811a\u8f93\u51fa\u4f4e\u7535\u5e73\uff08\u8d77\u59cb\u4f4d\uff09\uff0c\u540c\u65f6\u5f00\u542f\u5b9a\u65f6\u5668\u3002 \u4e4b\u540e\u76848\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u6bcf\u6b21\u8f93\u51fa1\u4f4d\u6570\u636e\uff0c\u4ece\u4f4e\u4f4d\u5f00\u59cb\u3002 \u7b2c9\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0cTX\u5f15\u811a\u8f93\u51fa\u9ad8\u7535\u5e73\uff08\u505c\u6b62\u4f4d\uff09\u3002 \u7b2c10\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5173\u95ed\u5b9a\u65f6\u5668\u3002 \u6a21\u62df\u4e32\u53e3\u63a5\u6536\u65f6\u5e8f \u00b6 \u8bbe\u7f6eRX\u5f15\u811a\u4e3a\u8f93\u5165\u6a21\u5f0f\uff0c\u4f7f\u80fd\u4e0a\u62c9\u7535\u963b\uff0c\u5f00\u542f\u4e0b\u964d\u6cbf\u4e2d\u65ad\u3002 \u5f53\u63a5\u6536\u5230\u8d77\u59cb\u4f4d\u65f6\uff0c\u89e6\u53d1\u4e0b\u964d\u6cbf\u4e2d\u65ad\uff0c\u8bbe\u7f6e\u5b9a\u65f6\u5668\u5468\u671f\u4e3a \\(\\frac{1s}{9600} \\times \\frac{1}{6} \\approx 17us\\) \uff0c\u5f00\u542f\u5b9a\u65f6\u5668\u3002 \u4e4b\u540e\u768430\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5bf9RX\u5f15\u811a\u7684\u7535\u5e73\u72b6\u6001\u8fdb\u884c\u8ba1\u6570\uff08\u8d77\u59cb\u4f4d\uff09\u3002 \u7b2c1\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5c06\u5b9a\u65f6\u5668\u5468\u671f\u91cd\u8bbe\u4e3a \\(\\frac{1s}{9600} \\times \\frac{1}{3} \\approx 35us\\) \u3002 \u7b2c3\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5982\u679c\u9ad8\u7535\u5e73\u6570\u91cf\u5927\u4e8e\u4f4e\u7535\u5e73\u6570\u91cf\uff0c\u5219\u8868\u793a\u8d77\u59cb\u4f4d\u63a5\u6536\u5931\u8d25\uff0c\u76f4\u63a5\u5173\u95ed\u5b9a\u65f6\u5668\uff0c\u5e76\u5f00\u542f\u4e0b\u964d\u6cbf\u4e2d\u65ad\u3002 \u7b2c6/9/.../24/27\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5224\u65ad\u9ad8\u7535\u5e73\u548c\u4f4e\u7535\u5e73\u7684\u6570\u91cf\uff0c\u9009\u53d6\u6570\u91cf\u591a\u7684\u90a3\u4e2a\u7535\u5e73\u4f5c\u4e3a\u6570\u636e\u4f4d\uff0c\u4ece\u4f4e\u4f4d\u5f00\u59cb\u586b\u5145\u3002 \u7b2c30\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5173\u95ed\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5f00\u542f\u4e0b\u964d\u6cbf\u4e2d\u65ad\uff0c\u5982\u679c\u9ad8\u7535\u5e73\u6570\u91cf\u5927\u4e8e\u4f4e\u7535\u5e73\u6570\u91cf\uff0c\u5219\u8868\u793a\u6210\u529f\u63a5\u6536\u5230\u505c\u6b62\u4f4d\uff0c\u6570\u636e\u6709\u6548\u3002 \u5916\u90e8\u4e2d\u65ad \u00b6 ATtiny88\u67098\u4e2a\u5916\u90e8\u4e2d\u65ad\u6e90\uff1aINT0\u3001INT1\u3001PCI0\u3001PCI1\u3001PCI2\u3001PCI3\u3002\u5176\u4e2dINT0/1\u652f\u6301\u4f4e\u7535\u5e73/\u4e0b\u964d\u6cbf/\u4e0a\u5347\u6cbf\u89e6\u53d1\uff0cPCI0/1/2/3\u5728\u5f15\u811a\u72b6\u6001\u6539\u53d8\u65f6\u89e6\u53d1\u3002 ATtiny88\u5916\u90e8\u4e2d\u65ad\u548c\u5f15\u811a\u7684\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a \u4e2d\u65ad\u6e90 \u5f15\u811a INT0 PD2 INT1 PD3 PCI0 PB[0:7] -> PCINT[0:7] PCI1 PC[0:7] -> PCINT[8:15] PCI2 PD[0:7] -> PCINT[16:23] PCI3 PA[0:3] -> PCINT[24:27] \u6ce8\u610f\uff1a\u5373\u4f7f\u5f15\u811a\u914d\u7f6e\u4e3a\u8f93\u51fa\u6a21\u5f0f\uff0c\u4e5f\u80fd\u89e6\u53d1\u76f8\u5e94\u7684\u4e2d\u65ad\u3002 \u5bc4\u5b58\u5668 \u00b6 ISC1[1:0] \uff1a\u8bbe\u7f6eINT1\u4e2d\u65ad\u89e6\u53d1\u65b9\u5f0f\u3002 ISC0[1:0] \uff1a\u8bbe\u7f6eINT0\u4e2d\u65ad\u89e6\u53d1\u65b9\u5f0f\uff0c\u53d6\u503c\u540c ISC1[1:0] \u3002 INT1 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdINT1\u4e2d\u65ad\u3002 INT0 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdINT0\u4e2d\u65ad\u3002 INTF1 \uff1aINT1\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 INTF0 \uff1aINT0\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 PCIE3 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdPCI3\uff08PCINT[27:24]\uff09\u4e2d\u65ad\u3002 PCIE2 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdPCI2\uff08PCINT[23:16]\uff09\u4e2d\u65ad\u3002 PCIE1 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdPCI1\uff08PCINT[15:8]\uff09\u4e2d\u65ad\u3002 PCIE0 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdPCI0\uff08PCINT[7:0]\uff09\u4e2d\u65ad\u3002 PCIF3 \uff1aPCI3\uff08PCINT[27:24]\uff09\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 PCIF2 \uff1aPCI2\uff08PCINT[23:16]\uff09\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 PCIF1 \uff1aPCI1\uff08PCINT[15:8]\uff09\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 PCIF0 \uff1aPCI0\uff08PCINT[7:0]\uff09\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 PCINTx \uff1a\u8bbe\u4e3a1\u4f7f\u80fdPCINTx\u4e2d\u65ad\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u4ee3\u7801\u6587\u4ef6\u7684\u6574\u4f53\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2502 \u2514\u2500\u2500 serial.h \u2514\u2500\u2500 src \u251c\u2500\u2500 main.c \u2514\u2500\u2500 serial.c inc/serial.h \u5934\u6587\u4ef6\u7684\u4ee3\u7801\u5185\u5bb9\u5982\u4e0b\uff1a inc/serial.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #pragma once #include <stdint.h> #define UART (&serial) typedef struct { const uint8_t * cfg ; uint8_t flag ; uint8_t tx_idx ; uint8_t tx_temp ; uint8_t tx_data ; uint8_t rx_idx ; uint8_t rx_temp ; uint8_t rx_data ; uint8_t rx_cnt ; } serial_t ; typedef enum { SERIAL_BR_1200 = 0 , SERIAL_BR_2400 , SERIAL_BR_4800 , SERIAL_BR_9600 , SERIAL_BR_19200 , SERIAL_BR_38400 , SERIAL_BR_57600 , SERIAL_BR_115200 } serial_baudrate_t ; typedef enum { SERIAL_FLAG_TXE = 0x01 , SERIAL_FLAG_RXNE = 0x02 } serial_flag_t ; extern serial_t serial ; void serial_setup ( serial_t * serial , serial_baudrate_t br ); uint8_t serial_get_flag ( serial_t * serial , serial_flag_t flag ); void serial_send_data ( serial_t * serial , uint8_t data ); uint8_t serial_receive_data ( serial_t * serial ); src/serial.c \u6e90\u6587\u4ef6\u7684\u4ee3\u7801\u5185\u5bb9\u5982\u4e0b\uff0c\u5176\u4e2d\u5c06PD1\u5f15\u811a\u5b9a\u4e49\u4e3aTX\uff0c\u5c06PD2\u5f15\u811a\u5b9a\u4e49\u4e3aRX\uff1a src/serial.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 #include <serial.h> #include <avr/io.h> #include <avr/interrupt.h> serial_t serial ; static const uint8_t serial_cfg [] = { 0x03 , 208 , 35 , 69 , // 1200 0x03 , 104 , 17 , 35 , // 2400 0x03 , 52 , 9 , 17 , // 4800 0x02 , 208 , 35 , 69 , // 9600 0x02 , 104 , 17 , 35 , // 19200 0x02 , 52 , 9 , 17 , // 38400 0x02 , 35 , 6 , 12 , // 57600 0x01 , 139 , 23 , 46 , // 115200 }; void serial_setup ( serial_t * serial , serial_baudrate_t br ) { serial -> cfg = & serial_cfg [ br * 4 ]; serial -> flag = SERIAL_FLAG_TXE ; // initial value for serial->flag // setup tx pin PORTD |= _BV ( PORTD1 ); // PD1 outputs high level DDRD |= _BV ( DDD1 ); // set PD1 as output // setup rx pin PORTD |= _BV ( PORTD2 ); // enable PD2 pull-up resistance DDRD &= ~ _BV ( DDD2 ); // set PD2 as input // setup INT0 EICRA &= ~ ( _BV ( ISC01 ) | _BV ( ISC00 )); EICRA |= _BV ( ISC01 ); // the falling edge of INT0 generates an interrupt request EIFR = _BV ( INTF0 ); // clear INT0 interrupt flag EIMSK |= _BV ( INT0 ); // enable INT0 interrupt // setup TIMER0 TCNT0 = 0 ; // clear counter TIMSK0 = 0 ; // disable all interrupts of TIMER0 TIFR0 = _BV ( OCF0B ) | _BV ( OCF0A ); // clear TIMER0_COMPA & TIMER0_COMPB interrupt flags TCCR0A = serial -> cfg [ 0 ]; // set mode & prescaler of TIMER0 } uint8_t serial_get_flag ( serial_t * serial , serial_flag_t flag ) { return serial -> flag & flag ; } void serial_send_data ( serial_t * serial , uint8_t data ) { serial -> flag &= ~ SERIAL_FLAG_TXE ; // clear TXE flag serial -> tx_data = data ; // store the data to transmit serial -> tx_temp = data ; serial -> tx_idx = 0 ; // reset index of transmission OCR0A = TCNT0 + serial -> cfg [ 1 ] - 1 ; // set period of TIMER0_COMPA PORTD &= ~ _BV ( PORTD1 ); // PD1 outputs low level TIFR0 = _BV ( OCF0A ); // clear TIMER0_COMPA interrupt flag TIMSK0 |= _BV ( OCIE0A ); // enable TIMER0_COMPA interrupt } uint8_t serial_receive_data ( serial_t * serial ) { uint8_t data = serial -> rx_data ; // read the data received serial -> flag &= ~ SERIAL_FLAG_RXNE ; // clear RXNE flag return data ; } static inline void serial_tx_timer_isr ( serial_t * serial ) { if ( serial -> tx_idx < 8 ) { // send databits if ( serial -> tx_temp & 0x01 ) { // output the lowest bit PORTD |= _BV ( PORTD1 ); } else { PORTD &= ~ _BV ( PORTD1 ); } serial -> tx_temp >>= 1 ; } else if ( serial -> tx_idx == 8 ) { // send stopbit PORTD |= _BV ( PORTD1 ); } else { // end of transmission serial -> flag |= SERIAL_FLAG_TXE ; // set TXE flag TIMSK0 &= ~ _BV ( OCIE0A ); // disable TIMER0_COMPA interrupt } OCR0A += serial -> cfg [ 1 ]; // set time of the next interrupt serial -> tx_idx ++ ; // update index of transmission } static inline void serial_rx_int_isr ( serial_t * serial ) { OCR0B = TCNT0 + serial -> cfg [ 2 ] - 1 ; // set time of the first TIMER0_COMPB interrupt EIMSK &= ~ _BV ( INT0 ); // disable INT0 interrupt TIFR0 = _BV ( OCF0B ); // clear TIMER0_COMPB interrupt flag TIMSK0 |= _BV ( OCIE0B ); // enable TIMER0_COMPB interrupt serial -> rx_idx = 0 ; // reset index of reception serial -> rx_cnt = 0 ; // clear counter of 0/1 } static inline void serial_rx_timer_isr ( serial_t * serial ) { serial -> rx_cnt += PIND & _BV ( PIND2 ) ? 0x10 : 0x01 ; // count 0/1 if ( serial -> rx_idx == 2 ) { // receive startbit if ( serial -> rx_cnt > 0x20 ) { // if startbit is '1' TIMSK0 &= ~ _BV ( OCIE0B ); // disable TIMER0_COMPB interrupt EIFR = _BV ( INTF0 ); // clear INT0 interrupt flag EIMSK |= _BV ( INT0 ); // enable INT0 interrupt flag } serial -> rx_cnt = 0 ; // reset counter of 0/1 } else if ( serial -> rx_idx == 29 ) { // receive stopbit if ( serial -> rx_cnt > 0x20 ) { // if stopbit is '1' serial -> rx_data = serial -> rx_temp ; // the data received is valid, store it to serial->rx_data serial -> flag |= SERIAL_FLAG_RXNE ; // set RXNE flag } TIMSK0 &= ~ _BV ( OCIE0B ); // disable TIMER0_COMPB interrupt EIFR = _BV ( INTF0 ); // clear INT0 interrupt flag EIMSK |= _BV ( INT0 ); // clear INT0 interrupt flag } else if ( serial -> rx_idx % 3 == 2 ) { // receive databits serial -> rx_temp >>= 1 ; if ( serial -> rx_cnt > 0x20 ) { serial -> rx_temp |= 0x80 ; } serial -> rx_cnt = 0 ; // reset counter of 0/1 } OCR0B += serial -> cfg [ 3 ]; // set time of the next interrupt serial -> rx_idx ++ ; // update index of reception } ISR ( TIMER0_COMPA_vect ) { uint8_t sreg = SREG ; serial_tx_timer_isr ( UART ); SREG = sreg ; } ISR ( INT0_vect ) { uint8_t sreg = SREG ; serial_rx_int_isr ( UART ); SREG = sreg ; } ISR ( TIMER0_COMPB_vect ) { uint8_t sreg = SREG ; serial_rx_timer_isr ( UART ); SREG = sreg ; } \u6ce8\u610f\uff1a\u5b9e\u6d4b115200\u4ee5\u4e0b\uff08\u542b\uff09\u7684\u6ce2\u7279\u7387\u53d1\u9001\u90fd\u6b63\u5e38\uff0c\u4f46\u662f9600\u4ee5\u4e0a\uff08\u4e0d\u542b\uff09\u7684\u6ce2\u7279\u7387\u63a5\u6536\u4e0d\u6b63\u5e38\uff0c\u5efa\u8bae\u65e5\u5e38\u4f7f\u75289600\u6ce2\u7279\u7387\u3002 \u91cd\u5b9a\u5411stdio\u5230\u4e32\u53e3 \u00b6 \u4e3a\u4e86\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u4e32\u53e3\uff0c\u53ef\u4ee5\u5c06\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u4e32\u53e3\uff0c\u5728AVR GCC\u4e2d\u7684\u505a\u6cd5\u5982\u4e0b\uff1a \u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\u7684\u63a5\u53e3\u51fd\u6570\uff0c\u539f\u578b\u5982\u4e0b\uff1a 1 2 int putc ( char c , FILE * stream ); int getc ( FILE * stream ); \u4f7f\u7528 FDEV_SETUP_STREAM \u521b\u5efa\u4e00\u4e2astream\u3002 1 FILE s = FDEV_SETUP_STREAM ( putc , getc , flag ) \u5c06\u4e0a\u9762\u521b\u5efa\u7684stream\u66ff\u6362\u6389 stdout / stdin \u3002 1 stdout = stdin = & s ; \u4ee3\u7801\u5b9e\u73b0 \u00b6 src/main.c \u6e90\u6587\u4ef6\u7684\u4ee3\u7801\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <stdint.h> #include <stdio.h> #include <avr/io.h> #include <avr/interrupt.h> #include <serial.h> static void stdio_setup ( void ); int main ( void ) { cli (); stdio_setup (); sei (); printf ( \"Hello, ATtiny88! \\r\\n \" ); for (;;) { putchar ( getchar ()); } } static int serial_putchar ( char c , FILE * stream ) { while ( ! serial_get_flag ( UART , SERIAL_FLAG_TXE )); serial_send_data ( UART , c ); return 0 ; } static int serial_getchar ( FILE * stream ) { while ( ! serial_get_flag ( UART , SERIAL_FLAG_RXNE )); return serial_receive_data ( UART ); } static void stdio_setup ( void ) { static FILE f = FDEV_SETUP_STREAM ( serial_putchar , serial_getchar , _FDEV_SETUP_RW ); serial_setup ( UART , SERIAL_BR_9600 ); stdout = & f ; stdin = & f ; } \u53c2\u8003\u8d44\u6599 \u00b6 avr-libc: Standard IO facilities ATtiny88 Datasheet","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e09\uff09\uff1a\u4e32\u53e3"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3/#attiny88","text":"ATtiny88\u5355\u7247\u673a\u4e0d\u5305\u542b\u4e32\u53e3\u6a21\u5757\uff0c\u56e0\u6b64\u53ea\u80fd\u4f7f\u7528\u8f6f\u4ef6\u65b9\u5f0f\u6a21\u62df\u4e32\u53e3\u65f6\u5e8f\u3002 \u4e32\u53e3\u901a\u4fe1\u65f6\u5e8f\u901a\u5e38\u7531\u8d77\u59cb\u4f4d\u3001\u6570\u636e\u4f4d\u3001\u6821\u9a8c\u4f4d\u548c\u505c\u6b62\u4f4d\u56db\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u5e38\u89c1\u7684\u914d\u7f6e\u4e3a1\u4f4d\u8d77\u59cb\u4f4d\u30018\u4f4d\u6570\u636e\u4f4d\u3001\u65e0\u6821\u9a8c\u4f4d\u548c1\u4f4d\u505c\u6b62\u4f4d\u3002","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e09\uff09\uff1a\u4e32\u53e3"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3/#_1","text":"\u8bbe\u7f6eTX\u5f15\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f\uff0c\u521d\u59cb\u7535\u5e73\u72b6\u6001\u4e3a\u9ad8\u7535\u5e73\u3002 \u8bbe\u7f6e\u5b9a\u65f6\u5668\u5468\u671f\uff0c\u4ee59600\u6ce2\u7279\u7387\u4e3a\u4f8b\uff0c\u5c06\u5b9a\u65f6\u5668\u5468\u671f\u8bbe\u4e3a \\(\\frac{1s}{9600} \\approx 104us\\) \u3002 TX\u5f15\u811a\u8f93\u51fa\u4f4e\u7535\u5e73\uff08\u8d77\u59cb\u4f4d\uff09\uff0c\u540c\u65f6\u5f00\u542f\u5b9a\u65f6\u5668\u3002 \u4e4b\u540e\u76848\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u6bcf\u6b21\u8f93\u51fa1\u4f4d\u6570\u636e\uff0c\u4ece\u4f4e\u4f4d\u5f00\u59cb\u3002 \u7b2c9\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0cTX\u5f15\u811a\u8f93\u51fa\u9ad8\u7535\u5e73\uff08\u505c\u6b62\u4f4d\uff09\u3002 \u7b2c10\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5173\u95ed\u5b9a\u65f6\u5668\u3002","title":"\u6a21\u62df\u4e32\u53e3\u53d1\u9001\u65f6\u5e8f"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3/#_2","text":"\u8bbe\u7f6eRX\u5f15\u811a\u4e3a\u8f93\u5165\u6a21\u5f0f\uff0c\u4f7f\u80fd\u4e0a\u62c9\u7535\u963b\uff0c\u5f00\u542f\u4e0b\u964d\u6cbf\u4e2d\u65ad\u3002 \u5f53\u63a5\u6536\u5230\u8d77\u59cb\u4f4d\u65f6\uff0c\u89e6\u53d1\u4e0b\u964d\u6cbf\u4e2d\u65ad\uff0c\u8bbe\u7f6e\u5b9a\u65f6\u5668\u5468\u671f\u4e3a \\(\\frac{1s}{9600} \\times \\frac{1}{6} \\approx 17us\\) \uff0c\u5f00\u542f\u5b9a\u65f6\u5668\u3002 \u4e4b\u540e\u768430\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5bf9RX\u5f15\u811a\u7684\u7535\u5e73\u72b6\u6001\u8fdb\u884c\u8ba1\u6570\uff08\u8d77\u59cb\u4f4d\uff09\u3002 \u7b2c1\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5c06\u5b9a\u65f6\u5668\u5468\u671f\u91cd\u8bbe\u4e3a \\(\\frac{1s}{9600} \\times \\frac{1}{3} \\approx 35us\\) \u3002 \u7b2c3\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5982\u679c\u9ad8\u7535\u5e73\u6570\u91cf\u5927\u4e8e\u4f4e\u7535\u5e73\u6570\u91cf\uff0c\u5219\u8868\u793a\u8d77\u59cb\u4f4d\u63a5\u6536\u5931\u8d25\uff0c\u76f4\u63a5\u5173\u95ed\u5b9a\u65f6\u5668\uff0c\u5e76\u5f00\u542f\u4e0b\u964d\u6cbf\u4e2d\u65ad\u3002 \u7b2c6/9/.../24/27\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5224\u65ad\u9ad8\u7535\u5e73\u548c\u4f4e\u7535\u5e73\u7684\u6570\u91cf\uff0c\u9009\u53d6\u6570\u91cf\u591a\u7684\u90a3\u4e2a\u7535\u5e73\u4f5c\u4e3a\u6570\u636e\u4f4d\uff0c\u4ece\u4f4e\u4f4d\u5f00\u59cb\u586b\u5145\u3002 \u7b2c30\u6b21\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5173\u95ed\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u5f00\u542f\u4e0b\u964d\u6cbf\u4e2d\u65ad\uff0c\u5982\u679c\u9ad8\u7535\u5e73\u6570\u91cf\u5927\u4e8e\u4f4e\u7535\u5e73\u6570\u91cf\uff0c\u5219\u8868\u793a\u6210\u529f\u63a5\u6536\u5230\u505c\u6b62\u4f4d\uff0c\u6570\u636e\u6709\u6548\u3002","title":"\u6a21\u62df\u4e32\u53e3\u63a5\u6536\u65f6\u5e8f"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3/#_3","text":"ATtiny88\u67098\u4e2a\u5916\u90e8\u4e2d\u65ad\u6e90\uff1aINT0\u3001INT1\u3001PCI0\u3001PCI1\u3001PCI2\u3001PCI3\u3002\u5176\u4e2dINT0/1\u652f\u6301\u4f4e\u7535\u5e73/\u4e0b\u964d\u6cbf/\u4e0a\u5347\u6cbf\u89e6\u53d1\uff0cPCI0/1/2/3\u5728\u5f15\u811a\u72b6\u6001\u6539\u53d8\u65f6\u89e6\u53d1\u3002 ATtiny88\u5916\u90e8\u4e2d\u65ad\u548c\u5f15\u811a\u7684\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a \u4e2d\u65ad\u6e90 \u5f15\u811a INT0 PD2 INT1 PD3 PCI0 PB[0:7] -> PCINT[0:7] PCI1 PC[0:7] -> PCINT[8:15] PCI2 PD[0:7] -> PCINT[16:23] PCI3 PA[0:3] -> PCINT[24:27] \u6ce8\u610f\uff1a\u5373\u4f7f\u5f15\u811a\u914d\u7f6e\u4e3a\u8f93\u51fa\u6a21\u5f0f\uff0c\u4e5f\u80fd\u89e6\u53d1\u76f8\u5e94\u7684\u4e2d\u65ad\u3002","title":"\u5916\u90e8\u4e2d\u65ad"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3/#_4","text":"ISC1[1:0] \uff1a\u8bbe\u7f6eINT1\u4e2d\u65ad\u89e6\u53d1\u65b9\u5f0f\u3002 ISC0[1:0] \uff1a\u8bbe\u7f6eINT0\u4e2d\u65ad\u89e6\u53d1\u65b9\u5f0f\uff0c\u53d6\u503c\u540c ISC1[1:0] \u3002 INT1 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdINT1\u4e2d\u65ad\u3002 INT0 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdINT0\u4e2d\u65ad\u3002 INTF1 \uff1aINT1\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 INTF0 \uff1aINT0\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 PCIE3 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdPCI3\uff08PCINT[27:24]\uff09\u4e2d\u65ad\u3002 PCIE2 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdPCI2\uff08PCINT[23:16]\uff09\u4e2d\u65ad\u3002 PCIE1 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdPCI1\uff08PCINT[15:8]\uff09\u4e2d\u65ad\u3002 PCIE0 \uff1a\u8bbe\u4e3a1\u4f7f\u80fdPCI0\uff08PCINT[7:0]\uff09\u4e2d\u65ad\u3002 PCIF3 \uff1aPCI3\uff08PCINT[27:24]\uff09\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 PCIF2 \uff1aPCI2\uff08PCINT[23:16]\uff09\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 PCIF1 \uff1aPCI1\uff08PCINT[15:8]\uff09\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 PCIF0 \uff1aPCI0\uff08PCINT[7:0]\uff09\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 PCINTx \uff1a\u8bbe\u4e3a1\u4f7f\u80fdPCINTx\u4e2d\u65ad\u3002","title":"\u5bc4\u5b58\u5668"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3/#_5","text":"\u4ee3\u7801\u6587\u4ef6\u7684\u6574\u4f53\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2502 \u2514\u2500\u2500 serial.h \u2514\u2500\u2500 src \u251c\u2500\u2500 main.c \u2514\u2500\u2500 serial.c inc/serial.h \u5934\u6587\u4ef6\u7684\u4ee3\u7801\u5185\u5bb9\u5982\u4e0b\uff1a inc/serial.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #pragma once #include <stdint.h> #define UART (&serial) typedef struct { const uint8_t * cfg ; uint8_t flag ; uint8_t tx_idx ; uint8_t tx_temp ; uint8_t tx_data ; uint8_t rx_idx ; uint8_t rx_temp ; uint8_t rx_data ; uint8_t rx_cnt ; } serial_t ; typedef enum { SERIAL_BR_1200 = 0 , SERIAL_BR_2400 , SERIAL_BR_4800 , SERIAL_BR_9600 , SERIAL_BR_19200 , SERIAL_BR_38400 , SERIAL_BR_57600 , SERIAL_BR_115200 } serial_baudrate_t ; typedef enum { SERIAL_FLAG_TXE = 0x01 , SERIAL_FLAG_RXNE = 0x02 } serial_flag_t ; extern serial_t serial ; void serial_setup ( serial_t * serial , serial_baudrate_t br ); uint8_t serial_get_flag ( serial_t * serial , serial_flag_t flag ); void serial_send_data ( serial_t * serial , uint8_t data ); uint8_t serial_receive_data ( serial_t * serial ); src/serial.c \u6e90\u6587\u4ef6\u7684\u4ee3\u7801\u5185\u5bb9\u5982\u4e0b\uff0c\u5176\u4e2d\u5c06PD1\u5f15\u811a\u5b9a\u4e49\u4e3aTX\uff0c\u5c06PD2\u5f15\u811a\u5b9a\u4e49\u4e3aRX\uff1a src/serial.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 #include <serial.h> #include <avr/io.h> #include <avr/interrupt.h> serial_t serial ; static const uint8_t serial_cfg [] = { 0x03 , 208 , 35 , 69 , // 1200 0x03 , 104 , 17 , 35 , // 2400 0x03 , 52 , 9 , 17 , // 4800 0x02 , 208 , 35 , 69 , // 9600 0x02 , 104 , 17 , 35 , // 19200 0x02 , 52 , 9 , 17 , // 38400 0x02 , 35 , 6 , 12 , // 57600 0x01 , 139 , 23 , 46 , // 115200 }; void serial_setup ( serial_t * serial , serial_baudrate_t br ) { serial -> cfg = & serial_cfg [ br * 4 ]; serial -> flag = SERIAL_FLAG_TXE ; // initial value for serial->flag // setup tx pin PORTD |= _BV ( PORTD1 ); // PD1 outputs high level DDRD |= _BV ( DDD1 ); // set PD1 as output // setup rx pin PORTD |= _BV ( PORTD2 ); // enable PD2 pull-up resistance DDRD &= ~ _BV ( DDD2 ); // set PD2 as input // setup INT0 EICRA &= ~ ( _BV ( ISC01 ) | _BV ( ISC00 )); EICRA |= _BV ( ISC01 ); // the falling edge of INT0 generates an interrupt request EIFR = _BV ( INTF0 ); // clear INT0 interrupt flag EIMSK |= _BV ( INT0 ); // enable INT0 interrupt // setup TIMER0 TCNT0 = 0 ; // clear counter TIMSK0 = 0 ; // disable all interrupts of TIMER0 TIFR0 = _BV ( OCF0B ) | _BV ( OCF0A ); // clear TIMER0_COMPA & TIMER0_COMPB interrupt flags TCCR0A = serial -> cfg [ 0 ]; // set mode & prescaler of TIMER0 } uint8_t serial_get_flag ( serial_t * serial , serial_flag_t flag ) { return serial -> flag & flag ; } void serial_send_data ( serial_t * serial , uint8_t data ) { serial -> flag &= ~ SERIAL_FLAG_TXE ; // clear TXE flag serial -> tx_data = data ; // store the data to transmit serial -> tx_temp = data ; serial -> tx_idx = 0 ; // reset index of transmission OCR0A = TCNT0 + serial -> cfg [ 1 ] - 1 ; // set period of TIMER0_COMPA PORTD &= ~ _BV ( PORTD1 ); // PD1 outputs low level TIFR0 = _BV ( OCF0A ); // clear TIMER0_COMPA interrupt flag TIMSK0 |= _BV ( OCIE0A ); // enable TIMER0_COMPA interrupt } uint8_t serial_receive_data ( serial_t * serial ) { uint8_t data = serial -> rx_data ; // read the data received serial -> flag &= ~ SERIAL_FLAG_RXNE ; // clear RXNE flag return data ; } static inline void serial_tx_timer_isr ( serial_t * serial ) { if ( serial -> tx_idx < 8 ) { // send databits if ( serial -> tx_temp & 0x01 ) { // output the lowest bit PORTD |= _BV ( PORTD1 ); } else { PORTD &= ~ _BV ( PORTD1 ); } serial -> tx_temp >>= 1 ; } else if ( serial -> tx_idx == 8 ) { // send stopbit PORTD |= _BV ( PORTD1 ); } else { // end of transmission serial -> flag |= SERIAL_FLAG_TXE ; // set TXE flag TIMSK0 &= ~ _BV ( OCIE0A ); // disable TIMER0_COMPA interrupt } OCR0A += serial -> cfg [ 1 ]; // set time of the next interrupt serial -> tx_idx ++ ; // update index of transmission } static inline void serial_rx_int_isr ( serial_t * serial ) { OCR0B = TCNT0 + serial -> cfg [ 2 ] - 1 ; // set time of the first TIMER0_COMPB interrupt EIMSK &= ~ _BV ( INT0 ); // disable INT0 interrupt TIFR0 = _BV ( OCF0B ); // clear TIMER0_COMPB interrupt flag TIMSK0 |= _BV ( OCIE0B ); // enable TIMER0_COMPB interrupt serial -> rx_idx = 0 ; // reset index of reception serial -> rx_cnt = 0 ; // clear counter of 0/1 } static inline void serial_rx_timer_isr ( serial_t * serial ) { serial -> rx_cnt += PIND & _BV ( PIND2 ) ? 0x10 : 0x01 ; // count 0/1 if ( serial -> rx_idx == 2 ) { // receive startbit if ( serial -> rx_cnt > 0x20 ) { // if startbit is '1' TIMSK0 &= ~ _BV ( OCIE0B ); // disable TIMER0_COMPB interrupt EIFR = _BV ( INTF0 ); // clear INT0 interrupt flag EIMSK |= _BV ( INT0 ); // enable INT0 interrupt flag } serial -> rx_cnt = 0 ; // reset counter of 0/1 } else if ( serial -> rx_idx == 29 ) { // receive stopbit if ( serial -> rx_cnt > 0x20 ) { // if stopbit is '1' serial -> rx_data = serial -> rx_temp ; // the data received is valid, store it to serial->rx_data serial -> flag |= SERIAL_FLAG_RXNE ; // set RXNE flag } TIMSK0 &= ~ _BV ( OCIE0B ); // disable TIMER0_COMPB interrupt EIFR = _BV ( INTF0 ); // clear INT0 interrupt flag EIMSK |= _BV ( INT0 ); // clear INT0 interrupt flag } else if ( serial -> rx_idx % 3 == 2 ) { // receive databits serial -> rx_temp >>= 1 ; if ( serial -> rx_cnt > 0x20 ) { serial -> rx_temp |= 0x80 ; } serial -> rx_cnt = 0 ; // reset counter of 0/1 } OCR0B += serial -> cfg [ 3 ]; // set time of the next interrupt serial -> rx_idx ++ ; // update index of reception } ISR ( TIMER0_COMPA_vect ) { uint8_t sreg = SREG ; serial_tx_timer_isr ( UART ); SREG = sreg ; } ISR ( INT0_vect ) { uint8_t sreg = SREG ; serial_rx_int_isr ( UART ); SREG = sreg ; } ISR ( TIMER0_COMPB_vect ) { uint8_t sreg = SREG ; serial_rx_timer_isr ( UART ); SREG = sreg ; } \u6ce8\u610f\uff1a\u5b9e\u6d4b115200\u4ee5\u4e0b\uff08\u542b\uff09\u7684\u6ce2\u7279\u7387\u53d1\u9001\u90fd\u6b63\u5e38\uff0c\u4f46\u662f9600\u4ee5\u4e0a\uff08\u4e0d\u542b\uff09\u7684\u6ce2\u7279\u7387\u63a5\u6536\u4e0d\u6b63\u5e38\uff0c\u5efa\u8bae\u65e5\u5e38\u4f7f\u75289600\u6ce2\u7279\u7387\u3002","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3/#stdio","text":"\u4e3a\u4e86\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u4e32\u53e3\uff0c\u53ef\u4ee5\u5c06\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u4e32\u53e3\uff0c\u5728AVR GCC\u4e2d\u7684\u505a\u6cd5\u5982\u4e0b\uff1a \u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\u7684\u63a5\u53e3\u51fd\u6570\uff0c\u539f\u578b\u5982\u4e0b\uff1a 1 2 int putc ( char c , FILE * stream ); int getc ( FILE * stream ); \u4f7f\u7528 FDEV_SETUP_STREAM \u521b\u5efa\u4e00\u4e2astream\u3002 1 FILE s = FDEV_SETUP_STREAM ( putc , getc , flag ) \u5c06\u4e0a\u9762\u521b\u5efa\u7684stream\u66ff\u6362\u6389 stdout / stdin \u3002 1 stdout = stdin = & s ;","title":"\u91cd\u5b9a\u5411stdio\u5230\u4e32\u53e3"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3/#_6","text":"src/main.c \u6e90\u6587\u4ef6\u7684\u4ee3\u7801\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <stdint.h> #include <stdio.h> #include <avr/io.h> #include <avr/interrupt.h> #include <serial.h> static void stdio_setup ( void ); int main ( void ) { cli (); stdio_setup (); sei (); printf ( \"Hello, ATtiny88! \\r\\n \" ); for (;;) { putchar ( getchar ()); } } static int serial_putchar ( char c , FILE * stream ) { while ( ! serial_get_flag ( UART , SERIAL_FLAG_TXE )); serial_send_data ( UART , c ); return 0 ; } static int serial_getchar ( FILE * stream ) { while ( ! serial_get_flag ( UART , SERIAL_FLAG_RXNE )); return serial_receive_data ( UART ); } static void stdio_setup ( void ) { static FILE f = FDEV_SETUP_STREAM ( serial_putchar , serial_getchar , _FDEV_SETUP_RW ); serial_setup ( UART , SERIAL_BR_9600 ); stdout = & f ; stdin = & f ; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%B2%E5%8F%A3/#_7","text":"avr-libc: Standard IO facilities ATtiny88 Datasheet","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BC%E5%90%B8%E7%81%AF/","text":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e8c\uff09\uff1a\u547c\u5438\u706f \u00b6 \u524d\u9762\u7684\u201c\u70b9\u706f\u201d\u5b9e\u9a8c\u5b9e\u73b0\u4e86\u95f4\u9694\u70b9\u4eae/\u7184\u706dLED\uff0c\u4f46\u662f\u95f4\u9694\u65f6\u95f4\u548c\u4eae\u5ea6\u90fd\u6ca1\u6cd5\u63a7\u5236\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528ATtiny88\u7684\u5b9a\u65f6\u5668\u6a21\u5757\u3002 ATtiny88\u5355\u7247\u673a\u542b\u67092\u4e2a\u5b9a\u65f6\u5668\uff0c\u5b9a\u65f6\u56680\u662f8bit\u7684\uff0c\u5b9a\u65f6\u56681\u662f16bit\u7684\uff0c\u5176\u4e2d\u5b9a\u65f6\u56681\u652f\u6301PWM\u529f\u80fd\u3002\u67e5\u8be2\u624b\u518c\u5f97\u77e5\uff0c\u5b9a\u65f6\u56681\u7684\u4e24\u4e2a\u901a\u9053\u7684\u8f93\u51fa\u811a\u4e3aPB1\u548cPB2\uff0c\u800cMH-ET LIVE Tiny88\u6838\u5fc3\u677f\u7684LED\u8fde\u63a5\u7684\u662fPD0\u811a\uff0c\u56e0\u6b64\u65e0\u6cd5\u5229\u7528\u5b9a\u65f6\u56681\u7684PWM\u529f\u80fd\u63a7\u5236\u677f\u8f7dLED\u3002\u8fd9\u91cc\u4ecb\u7ecd\u57fa\u4e8e\u5b9a\u65f6\u56680\uff0c\u901a\u8fc7\u8f6f\u4ef6\u6a21\u62dfPWM\u63a7\u5236\u677f\u8f7dLED\u7684\u65b9\u6cd5\u3002 \u5b9a\u65f6\u56680\u4ecb\u7ecd \u00b6 ATtiny88\u7684\u5b9a\u65f6\u56680\u662f\u4e00\u4e2a8bit\u7684\u5b9a\u65f6\u5668\uff0c\u62e5\u6709\u4e24\u4e2a\u72ec\u7acb\u7684\u8f93\u51fa\u6bd4\u8f83\u5355\u5143\uff0c\u652f\u6301CTC\u6a21\u5f0f\uff0c\u62e5\u6709\u4e09\u4e2a\u72ec\u7acb\u7684\u4e2d\u65ad\u6e90\uff08TOV0\uff0cOCF0A\uff0cOCF0B\uff09\u3002 \u5b9a\u65f6\u56680\u7684\u65f6\u949f\u6e90\u53ef\u4ee5\u662f\u7531\u5185\u90e8\u65f6\u949f\u6e90\u5206\u9891\u800c\u6765\uff0c\u4e5f\u53ef\u4ee5\u662f\u6765\u81eaT0\uff08PD4\uff09\u5f15\u811a\u7684\u5916\u90e8\u65f6\u949f\u6e90\u3002 \u6ce8\u610f\uff1a\u5728\u4f7f\u7528\u5b9a\u65f6\u56680\u65f6\uff0c\u52a1\u5fc5\u786e\u4fdd PRR \u5bc4\u5b58\u5668\u4e2d\u7684 PRTIM0 \u4f4d\u503c\u4e3a0\u3002 \u666e\u901a\u6a21\u5f0f \u00b6 \u5728\u666e\u901a\u6a21\u5f0f\u4e0b\uff0c TCNT0 \u5bc4\u5b58\u5668\u7684\u503c\u4ece0x00\u4e00\u76f4\u589e\u52a0\u52300xFF\uff0c\u7136\u540e\u56de\u52300x00\uff0c\u5982\u6b64\u5f80\u590d\u3002\u5f53 TCNT0 \u5bc4\u5b58\u5668\u7684\u503c\u56de\u52300x00\u65f6\uff0c TOV0 \u6807\u5fd7\u4f4d\u7f6e\u4f4d\uff0c\u540c\u65f6\u89e6\u53d1 TIMER0_OVF \u4e2d\u65ad\u3002 \u5f53 TCNT0 \u5bc4\u5b58\u5668\u7684\u503c\u4e0e OCR0x \u5bc4\u5b58\u5668\u7684\u503c\u76f8\u7b49\u65f6\uff0c OCF0x \u6807\u5fd7\u4f4d\u5c06 \u5728\u4e0b\u4e00\u4e2a\u65f6\u949f \u7f6e\u4f4d\uff0c\u540c\u65f6\u89e6\u53d1 TIMER0_COMPx \u4e2d\u65ad\u3002 CTC\u6a21\u5f0f \u00b6 \u5728CTC\uff08Clear Timer on Compare Match\uff09\u6a21\u5f0f\u4e0b\uff0c TCNT0 \u5bc4\u5b58\u5668\u7684\u503c\u4ece0x00\u4e00\u76f4\u589e\u52a0\u5230\u548c OCR0A \u5bc4\u5b58\u5668\u76f8\u7b49\uff0c\u7136\u540e\u56de\u5f52\u52300x00\u3002\u5f53 TCNT0 \u5bc4\u5b58\u5668\u7684\u503c\u56de\u52300x00\u65f6\uff0c OCF0A \u6807\u5fd7\u4f4d\u7f6e\u4f4d\uff0c\u540c\u65f6\u89e6\u53d1 TIMER0_COMPA \u4e2d\u65ad\u3002 \u5bc4\u5b58\u5668 \u00b6 CTC0 \uff1aCTC\u6a21\u5f0f\uff0c 0 \u4e3a\u666e\u901a\u6a21\u5f0f\uff0c 1 \u4e3aCTC\u6a21\u5f0f\u3002 CS0[2:0] \uff1a\u65f6\u949f\u6e90\u9009\u62e9\u3002 OCIE0B \uff1a\u7f6e 1 \u65f6\u4f7f\u80fd TIMER0_COMPB \u4e2d\u65ad\u3002 OCIE0A \uff1a\u7f6e 1 \u65f6\u4f7f\u80fd TIEMR0_COMPA \u4e2d\u65ad\u3002 TOIE0 \uff1a\u7f6e 1 \u65f6\u4f7f\u80fd TIMER0_OVF \u4e2d\u65ad\u3002 OCF0B \uff1a\u5b9a\u65f6\u56680\u8f93\u51fa\u6bd4\u8f83B\u5339\u914d\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u9664\uff0c\u6216\u8005\u53ef\u4ee5\u5199 1 \u6e05\u9664\u3002 OCF0A \uff1a\u5b9a\u65f6\u56680\u8f93\u51fa\u6bd4\u8f83A\u5339\u914d\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u9664\uff0c\u6216\u8005\u53ef\u4ee5\u5199 1 \u6e05\u9664\u3002 TOV0 \uff1a\u5b9a\u65f6\u56680\u6ea2\u51fa\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u9664\uff0c\u6216\u8005\u53ef\u4ee5\u5199 1 \u6e05\u9664\u3002 \u63a7\u5236LED\u95ea\u70c1\u5468\u671f \u00b6 \u5229\u7528ATtiny88\u5b9a\u65f6\u56680\u7684CTC\u6a21\u5f0f\u53ef\u4ee5\u7075\u6d3b\u63a7\u5236LED\u7684\u95ea\u70c1\u5468\u671f\uff0c OCR0A \u5bc4\u5b58\u5668\u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u5f0f\u8ba1\u7b97\u5f97\u5230\uff1a \\[OCR0A = time \\times f_{T0} - 1 = time \\times \\frac{f_{IO}}{prescaler} - 1\\] \u4ee3\u7801\u6587\u4ef6\u7684\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2514\u2500\u2500 src \u2514\u2500\u2500 main.c \u5176\u4e2d src/main.c \u6e90\u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <stdint.h> #include <avr/io.h> #include <avr/interrupt.h> int main ( void ) { cli (); // disable global interrupt DDRD |= _BV ( DDD0 ); // set PD0 as output PORTD |= _BV ( PORTD0 ); // PD0 outputs high level TCNT0 = 0 ; // clear counter OCR0A = 249 ; // reload value, 1ms TCCR0A = _BV ( CTC0 ) | _BV ( CS01 ) | _BV ( CS00 ); // CTC mode, prescaler = 64, clk_t0 = 250KHz TIFR0 = _BV ( OCF0A ); // clear OCF0A flag TIMSK0 = _BV ( OCIE0A ); // enable TIMER0_COMPA interrupt sei (); // enable global interrupt for (;;); // wait for interrupt } ISR ( TIMER0_COMPA_vect ) { static uint16_t count = 0 ; uint8_t sreg = SREG ; // store the status register if ( ++ count == 500 ) { count = 0 ; PIND = _BV ( PIND0 ); // toggle PD0 every 500ms } SREG = sreg ; // restore the status register } \u4e0a\u8ff0\u4ee3\u7801\u8bbe\u7f6e\u5b9a\u65f6\u56680\u7684\u65f6\u949f\u5206\u9891\u7cfb\u6570\u4e3a64\uff0c\u5373 \\(f_{T0} = \\frac{16MHz}{64} = 250KHz\\) \uff1b\u8bbe\u7f6e\u5b9a\u65f6\u5468\u671f\u4e3a1\u6beb\u79d2\uff0c\u5373 \\(OCR0A = 10^{-3}s \\times 250KHz - 1 = 249\\) \uff1b\u540c\u65f6\uff0c\u5f00\u542f TIMER0_COMPA \u4e2d\u65ad\u3002\u5728\u4e2d\u65ad\u51fd\u6570\u4e2d\uff0c\u6bcf500\u4e2a\u5468\u671f\u7ffb\u8f6c\u4e00\u6b21PD0\u7684\u7535\u5e73\u72b6\u6001\uff0c\u5b9e\u73b0\u4e86LED\u4ee51\u79d2\u4e3a\u5468\u671f\u7684\u95ea\u70c1\u529f\u80fd\u3002 \u63a7\u5236LED\u4eae\u5ea6 \u00b6 \u5229\u7528ATtiny88\u5b9a\u65f6\u56680\u7684\u666e\u901a\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u8f6f\u4ef6PWM\u529f\u80fd\uff0cPWM\u7684\u9891\u7387\u548c\u5360\u7a7a\u6bd4\u53ef\u4ee5\u901a\u8fc7\u4e0b\u5f0f\u8ba1\u7b97\u5f97\u5230\uff1a \\[f_{PWM} = \\frac{f_{T0}}{256} = \\frac{f_{IO}}{prescaler \\times 256}\\] \\[duty = \\frac{OCR0A + 1}{256}\\] \u4ee3\u7801\u6587\u4ef6\u7684\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2514\u2500\u2500 src \u2514\u2500\u2500 main.c \u5176\u4e2d src\\main.c \u6e90\u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <stdint.h> #include <avr/io.h> #include <avr/interrupt.h> int main ( void ) { cli (); // disable global interrupt DDRD |= _BV ( DDD0 ); // set PD0 as output PORTD &= ~ _BV ( PORTD0 ); // PD0 outputs low level TCNT0 = 0 ; // clear counter OCR0A = 0 ; // clear compare value TCCR0A = _BV ( CS01 ) | _BV ( CS00 ); // normal mode, prescaler = 64, clk_t0 = 250KHz, f_pwm = 977Hz TIFR0 = _BV ( OCF0A ) | _BV ( TOV0 ); // clear OCF0A & TOV0 flag TIMSK0 = _BV ( OCIE0A ) | _BV ( TOIE0 ); // enable TIMER0_COMPA & TIMER0_OVF interrupt sei (); // enable global interrupt for (;;); // wait for interrupt } ISR ( TIMER0_COMPA_vect ) { uint8_t sreg = SREG ; // store the status register PORTD &= ~ _BV ( PORTD0 ); // PD0 outputs low level SREG = sreg ; // restore the status register } ISR ( TIMER0_OVF_vect ) { static uint8_t count = 0 ; static int8_t inc = 1 ; uint8_t sreg = SREG ; // store the status register PORTD |= _BV ( PORTD0 ); // PD0 outputs high level if ( ++ count == 10 ) { OCR0A += inc ; // increase / decrease PWM duty every 10 cycles if ( OCR0A == 0xFF ) { inc = -1 ; } else if ( OCR0A == 0 ) { inc = 1 ; } count = 0 ; } SREG = sreg ; // restore the status register } \u4e0a\u8ff0\u4ee3\u7801\u8bbe\u7f6e\u5b9a\u65f6\u5668\u7684\u65f6\u949f\u5206\u9891\u7cfb\u6570\u4e3a64\uff0c\u5219PWM\u7684\u9891\u7387\u4e3a \\(f_{PWM} = \\frac{16MHz}{64 \\times 256} \\approx 977Hz\\) \uff0c\u5e76\u5f00\u542f\u4e86 TIMER0_COMPA \u548c TIMER0_OVF \u4e2d\u65ad\u3002\u5728 TIMER0_COMPA \u4e2d\u65ad\u91ccPD0\u8f93\u51fa\u4f4e\u7535\u5e73\uff0c\u5728 TIMER0_OVF \u4e2d\u65ad\u91ccPD0\u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u53e6\u5916\u6bcf10\u4e2a\u5468\u671f\u589e\u52a0/\u51cf\u5c11\u4e00\u6b21\u5360\u7a7a\u6bd4\u3002 \u5c06\u4ee3\u7801\u4e0b\u8f7d\u5230\u5355\u7247\u673a\u540e\uff0c\u677f\u8f7dLED\u5c06\u5448\u73b0\u547c\u5438\u706f\u7684\u6548\u679c\uff0c\u7531\u706d\u6162\u6162\u53d8\u4eae\uff0c\u518d\u7531\u4eae\u6162\u6162\u53d8\u706d\u3002\u540c\u65f6\uff0c\u5c06PD0\u5f15\u811a\u8fde\u63a5\u5230\u793a\u6ce2\u5668\uff0c\u53ef\u4ee5\u770b\u5230\u9891\u7387\u4e3a977Hz\u5de6\u53f3\u7684PWM\u6ce2\uff0c\u4e14\u5360\u7a7a\u6bd4\u5728\u89c4\u5f8b\u53d8\u5316\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u6cd5\u4ea7\u751f\u7684PWM\u6700\u4f4e\u5360\u7a7a\u6bd4\u4e3a \\(\\frac{1}{255}\\) \uff0c\u6700\u9ad8\u5360\u7a7a\u6bd4\u4ecb\u4e8e \\(\\frac{255}{256}\\) \u548c1\u4e4b\u95f4\uff0c\u8fd9\u662f\u56e0\u4e3a\u867d\u7136\u7406\u8bba\u4e0a OCR0A \u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a255\u65f6\u5360\u7a7a\u6bd4\u4e3a1\uff0c\u4f46\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b TIMER0_COMPA \u548c TIMER0_OVF \u8fd9\u4e24\u4e2a\u4e2d\u65ad\u4f1a\u540c\u65f6\u4ea7\u751f\uff0c\u800c TIMER0_COMPA \u4e2d\u65ad\u7684\u4f18\u5148\u7ea7\u6bd4 TIMER0_OVF \u9ad8\uff0c\u56e0\u6b64\u4f1a\u5148\u6267\u884c TIMER0_COMPA \u4e2d\u65ad\uff0c\u6267\u884c\u5b8c\u540e\u518d\u6267\u884c TIMER0_OVF \u4e2d\u65ad\uff0c\u6240\u4ee5PD0\u4f1a\u8f93\u51fa\u4e00\u4e2a\u65f6\u95f4\u5f88\u77ed\u7684\u4f4e\u7535\u5e73\u8109\u51b2\uff0c\u5bfc\u81f4\u5b9e\u9645\u5360\u7a7a\u6bd4\u8fbe\u4e0d\u52301\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 ATtiny88 Datasheet Programming and Interfacing ATMEL's AVRs","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e8c\uff09\uff1a\u547c\u5438\u706f"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BC%E5%90%B8%E7%81%AF/#attiny88","text":"\u524d\u9762\u7684\u201c\u70b9\u706f\u201d\u5b9e\u9a8c\u5b9e\u73b0\u4e86\u95f4\u9694\u70b9\u4eae/\u7184\u706dLED\uff0c\u4f46\u662f\u95f4\u9694\u65f6\u95f4\u548c\u4eae\u5ea6\u90fd\u6ca1\u6cd5\u63a7\u5236\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528ATtiny88\u7684\u5b9a\u65f6\u5668\u6a21\u5757\u3002 ATtiny88\u5355\u7247\u673a\u542b\u67092\u4e2a\u5b9a\u65f6\u5668\uff0c\u5b9a\u65f6\u56680\u662f8bit\u7684\uff0c\u5b9a\u65f6\u56681\u662f16bit\u7684\uff0c\u5176\u4e2d\u5b9a\u65f6\u56681\u652f\u6301PWM\u529f\u80fd\u3002\u67e5\u8be2\u624b\u518c\u5f97\u77e5\uff0c\u5b9a\u65f6\u56681\u7684\u4e24\u4e2a\u901a\u9053\u7684\u8f93\u51fa\u811a\u4e3aPB1\u548cPB2\uff0c\u800cMH-ET LIVE Tiny88\u6838\u5fc3\u677f\u7684LED\u8fde\u63a5\u7684\u662fPD0\u811a\uff0c\u56e0\u6b64\u65e0\u6cd5\u5229\u7528\u5b9a\u65f6\u56681\u7684PWM\u529f\u80fd\u63a7\u5236\u677f\u8f7dLED\u3002\u8fd9\u91cc\u4ecb\u7ecd\u57fa\u4e8e\u5b9a\u65f6\u56680\uff0c\u901a\u8fc7\u8f6f\u4ef6\u6a21\u62dfPWM\u63a7\u5236\u677f\u8f7dLED\u7684\u65b9\u6cd5\u3002","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e8c\uff09\uff1a\u547c\u5438\u706f"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BC%E5%90%B8%E7%81%AF/#0","text":"ATtiny88\u7684\u5b9a\u65f6\u56680\u662f\u4e00\u4e2a8bit\u7684\u5b9a\u65f6\u5668\uff0c\u62e5\u6709\u4e24\u4e2a\u72ec\u7acb\u7684\u8f93\u51fa\u6bd4\u8f83\u5355\u5143\uff0c\u652f\u6301CTC\u6a21\u5f0f\uff0c\u62e5\u6709\u4e09\u4e2a\u72ec\u7acb\u7684\u4e2d\u65ad\u6e90\uff08TOV0\uff0cOCF0A\uff0cOCF0B\uff09\u3002 \u5b9a\u65f6\u56680\u7684\u65f6\u949f\u6e90\u53ef\u4ee5\u662f\u7531\u5185\u90e8\u65f6\u949f\u6e90\u5206\u9891\u800c\u6765\uff0c\u4e5f\u53ef\u4ee5\u662f\u6765\u81eaT0\uff08PD4\uff09\u5f15\u811a\u7684\u5916\u90e8\u65f6\u949f\u6e90\u3002 \u6ce8\u610f\uff1a\u5728\u4f7f\u7528\u5b9a\u65f6\u56680\u65f6\uff0c\u52a1\u5fc5\u786e\u4fdd PRR \u5bc4\u5b58\u5668\u4e2d\u7684 PRTIM0 \u4f4d\u503c\u4e3a0\u3002","title":"\u5b9a\u65f6\u56680\u4ecb\u7ecd"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BC%E5%90%B8%E7%81%AF/#_1","text":"\u5728\u666e\u901a\u6a21\u5f0f\u4e0b\uff0c TCNT0 \u5bc4\u5b58\u5668\u7684\u503c\u4ece0x00\u4e00\u76f4\u589e\u52a0\u52300xFF\uff0c\u7136\u540e\u56de\u52300x00\uff0c\u5982\u6b64\u5f80\u590d\u3002\u5f53 TCNT0 \u5bc4\u5b58\u5668\u7684\u503c\u56de\u52300x00\u65f6\uff0c TOV0 \u6807\u5fd7\u4f4d\u7f6e\u4f4d\uff0c\u540c\u65f6\u89e6\u53d1 TIMER0_OVF \u4e2d\u65ad\u3002 \u5f53 TCNT0 \u5bc4\u5b58\u5668\u7684\u503c\u4e0e OCR0x \u5bc4\u5b58\u5668\u7684\u503c\u76f8\u7b49\u65f6\uff0c OCF0x \u6807\u5fd7\u4f4d\u5c06 \u5728\u4e0b\u4e00\u4e2a\u65f6\u949f \u7f6e\u4f4d\uff0c\u540c\u65f6\u89e6\u53d1 TIMER0_COMPx \u4e2d\u65ad\u3002","title":"\u666e\u901a\u6a21\u5f0f"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BC%E5%90%B8%E7%81%AF/#ctc","text":"\u5728CTC\uff08Clear Timer on Compare Match\uff09\u6a21\u5f0f\u4e0b\uff0c TCNT0 \u5bc4\u5b58\u5668\u7684\u503c\u4ece0x00\u4e00\u76f4\u589e\u52a0\u5230\u548c OCR0A \u5bc4\u5b58\u5668\u76f8\u7b49\uff0c\u7136\u540e\u56de\u5f52\u52300x00\u3002\u5f53 TCNT0 \u5bc4\u5b58\u5668\u7684\u503c\u56de\u52300x00\u65f6\uff0c OCF0A \u6807\u5fd7\u4f4d\u7f6e\u4f4d\uff0c\u540c\u65f6\u89e6\u53d1 TIMER0_COMPA \u4e2d\u65ad\u3002","title":"CTC\u6a21\u5f0f"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BC%E5%90%B8%E7%81%AF/#_2","text":"CTC0 \uff1aCTC\u6a21\u5f0f\uff0c 0 \u4e3a\u666e\u901a\u6a21\u5f0f\uff0c 1 \u4e3aCTC\u6a21\u5f0f\u3002 CS0[2:0] \uff1a\u65f6\u949f\u6e90\u9009\u62e9\u3002 OCIE0B \uff1a\u7f6e 1 \u65f6\u4f7f\u80fd TIMER0_COMPB \u4e2d\u65ad\u3002 OCIE0A \uff1a\u7f6e 1 \u65f6\u4f7f\u80fd TIEMR0_COMPA \u4e2d\u65ad\u3002 TOIE0 \uff1a\u7f6e 1 \u65f6\u4f7f\u80fd TIMER0_OVF \u4e2d\u65ad\u3002 OCF0B \uff1a\u5b9a\u65f6\u56680\u8f93\u51fa\u6bd4\u8f83B\u5339\u914d\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u9664\uff0c\u6216\u8005\u53ef\u4ee5\u5199 1 \u6e05\u9664\u3002 OCF0A \uff1a\u5b9a\u65f6\u56680\u8f93\u51fa\u6bd4\u8f83A\u5339\u914d\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u9664\uff0c\u6216\u8005\u53ef\u4ee5\u5199 1 \u6e05\u9664\u3002 TOV0 \uff1a\u5b9a\u65f6\u56680\u6ea2\u51fa\u6807\u5fd7\u4f4d\uff0c\u6267\u884c\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u65f6\u81ea\u52a8\u6e05\u9664\uff0c\u6216\u8005\u53ef\u4ee5\u5199 1 \u6e05\u9664\u3002","title":"\u5bc4\u5b58\u5668"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BC%E5%90%B8%E7%81%AF/#led","text":"\u5229\u7528ATtiny88\u5b9a\u65f6\u56680\u7684CTC\u6a21\u5f0f\u53ef\u4ee5\u7075\u6d3b\u63a7\u5236LED\u7684\u95ea\u70c1\u5468\u671f\uff0c OCR0A \u5bc4\u5b58\u5668\u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u5f0f\u8ba1\u7b97\u5f97\u5230\uff1a \\[OCR0A = time \\times f_{T0} - 1 = time \\times \\frac{f_{IO}}{prescaler} - 1\\] \u4ee3\u7801\u6587\u4ef6\u7684\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2514\u2500\u2500 src \u2514\u2500\u2500 main.c \u5176\u4e2d src/main.c \u6e90\u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <stdint.h> #include <avr/io.h> #include <avr/interrupt.h> int main ( void ) { cli (); // disable global interrupt DDRD |= _BV ( DDD0 ); // set PD0 as output PORTD |= _BV ( PORTD0 ); // PD0 outputs high level TCNT0 = 0 ; // clear counter OCR0A = 249 ; // reload value, 1ms TCCR0A = _BV ( CTC0 ) | _BV ( CS01 ) | _BV ( CS00 ); // CTC mode, prescaler = 64, clk_t0 = 250KHz TIFR0 = _BV ( OCF0A ); // clear OCF0A flag TIMSK0 = _BV ( OCIE0A ); // enable TIMER0_COMPA interrupt sei (); // enable global interrupt for (;;); // wait for interrupt } ISR ( TIMER0_COMPA_vect ) { static uint16_t count = 0 ; uint8_t sreg = SREG ; // store the status register if ( ++ count == 500 ) { count = 0 ; PIND = _BV ( PIND0 ); // toggle PD0 every 500ms } SREG = sreg ; // restore the status register } \u4e0a\u8ff0\u4ee3\u7801\u8bbe\u7f6e\u5b9a\u65f6\u56680\u7684\u65f6\u949f\u5206\u9891\u7cfb\u6570\u4e3a64\uff0c\u5373 \\(f_{T0} = \\frac{16MHz}{64} = 250KHz\\) \uff1b\u8bbe\u7f6e\u5b9a\u65f6\u5468\u671f\u4e3a1\u6beb\u79d2\uff0c\u5373 \\(OCR0A = 10^{-3}s \\times 250KHz - 1 = 249\\) \uff1b\u540c\u65f6\uff0c\u5f00\u542f TIMER0_COMPA \u4e2d\u65ad\u3002\u5728\u4e2d\u65ad\u51fd\u6570\u4e2d\uff0c\u6bcf500\u4e2a\u5468\u671f\u7ffb\u8f6c\u4e00\u6b21PD0\u7684\u7535\u5e73\u72b6\u6001\uff0c\u5b9e\u73b0\u4e86LED\u4ee51\u79d2\u4e3a\u5468\u671f\u7684\u95ea\u70c1\u529f\u80fd\u3002","title":"\u63a7\u5236LED\u95ea\u70c1\u5468\u671f"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BC%E5%90%B8%E7%81%AF/#led_1","text":"\u5229\u7528ATtiny88\u5b9a\u65f6\u56680\u7684\u666e\u901a\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u8f6f\u4ef6PWM\u529f\u80fd\uff0cPWM\u7684\u9891\u7387\u548c\u5360\u7a7a\u6bd4\u53ef\u4ee5\u901a\u8fc7\u4e0b\u5f0f\u8ba1\u7b97\u5f97\u5230\uff1a \\[f_{PWM} = \\frac{f_{T0}}{256} = \\frac{f_{IO}}{prescaler \\times 256}\\] \\[duty = \\frac{OCR0A + 1}{256}\\] \u4ee3\u7801\u6587\u4ef6\u7684\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2514\u2500\u2500 src \u2514\u2500\u2500 main.c \u5176\u4e2d src\\main.c \u6e90\u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <stdint.h> #include <avr/io.h> #include <avr/interrupt.h> int main ( void ) { cli (); // disable global interrupt DDRD |= _BV ( DDD0 ); // set PD0 as output PORTD &= ~ _BV ( PORTD0 ); // PD0 outputs low level TCNT0 = 0 ; // clear counter OCR0A = 0 ; // clear compare value TCCR0A = _BV ( CS01 ) | _BV ( CS00 ); // normal mode, prescaler = 64, clk_t0 = 250KHz, f_pwm = 977Hz TIFR0 = _BV ( OCF0A ) | _BV ( TOV0 ); // clear OCF0A & TOV0 flag TIMSK0 = _BV ( OCIE0A ) | _BV ( TOIE0 ); // enable TIMER0_COMPA & TIMER0_OVF interrupt sei (); // enable global interrupt for (;;); // wait for interrupt } ISR ( TIMER0_COMPA_vect ) { uint8_t sreg = SREG ; // store the status register PORTD &= ~ _BV ( PORTD0 ); // PD0 outputs low level SREG = sreg ; // restore the status register } ISR ( TIMER0_OVF_vect ) { static uint8_t count = 0 ; static int8_t inc = 1 ; uint8_t sreg = SREG ; // store the status register PORTD |= _BV ( PORTD0 ); // PD0 outputs high level if ( ++ count == 10 ) { OCR0A += inc ; // increase / decrease PWM duty every 10 cycles if ( OCR0A == 0xFF ) { inc = -1 ; } else if ( OCR0A == 0 ) { inc = 1 ; } count = 0 ; } SREG = sreg ; // restore the status register } \u4e0a\u8ff0\u4ee3\u7801\u8bbe\u7f6e\u5b9a\u65f6\u5668\u7684\u65f6\u949f\u5206\u9891\u7cfb\u6570\u4e3a64\uff0c\u5219PWM\u7684\u9891\u7387\u4e3a \\(f_{PWM} = \\frac{16MHz}{64 \\times 256} \\approx 977Hz\\) \uff0c\u5e76\u5f00\u542f\u4e86 TIMER0_COMPA \u548c TIMER0_OVF \u4e2d\u65ad\u3002\u5728 TIMER0_COMPA \u4e2d\u65ad\u91ccPD0\u8f93\u51fa\u4f4e\u7535\u5e73\uff0c\u5728 TIMER0_OVF \u4e2d\u65ad\u91ccPD0\u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u53e6\u5916\u6bcf10\u4e2a\u5468\u671f\u589e\u52a0/\u51cf\u5c11\u4e00\u6b21\u5360\u7a7a\u6bd4\u3002 \u5c06\u4ee3\u7801\u4e0b\u8f7d\u5230\u5355\u7247\u673a\u540e\uff0c\u677f\u8f7dLED\u5c06\u5448\u73b0\u547c\u5438\u706f\u7684\u6548\u679c\uff0c\u7531\u706d\u6162\u6162\u53d8\u4eae\uff0c\u518d\u7531\u4eae\u6162\u6162\u53d8\u706d\u3002\u540c\u65f6\uff0c\u5c06PD0\u5f15\u811a\u8fde\u63a5\u5230\u793a\u6ce2\u5668\uff0c\u53ef\u4ee5\u770b\u5230\u9891\u7387\u4e3a977Hz\u5de6\u53f3\u7684PWM\u6ce2\uff0c\u4e14\u5360\u7a7a\u6bd4\u5728\u89c4\u5f8b\u53d8\u5316\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u6cd5\u4ea7\u751f\u7684PWM\u6700\u4f4e\u5360\u7a7a\u6bd4\u4e3a \\(\\frac{1}{255}\\) \uff0c\u6700\u9ad8\u5360\u7a7a\u6bd4\u4ecb\u4e8e \\(\\frac{255}{256}\\) \u548c1\u4e4b\u95f4\uff0c\u8fd9\u662f\u56e0\u4e3a\u867d\u7136\u7406\u8bba\u4e0a OCR0A \u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a255\u65f6\u5360\u7a7a\u6bd4\u4e3a1\uff0c\u4f46\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b TIMER0_COMPA \u548c TIMER0_OVF \u8fd9\u4e24\u4e2a\u4e2d\u65ad\u4f1a\u540c\u65f6\u4ea7\u751f\uff0c\u800c TIMER0_COMPA \u4e2d\u65ad\u7684\u4f18\u5148\u7ea7\u6bd4 TIMER0_OVF \u9ad8\uff0c\u56e0\u6b64\u4f1a\u5148\u6267\u884c TIMER0_COMPA \u4e2d\u65ad\uff0c\u6267\u884c\u5b8c\u540e\u518d\u6267\u884c TIMER0_OVF \u4e2d\u65ad\uff0c\u6240\u4ee5PD0\u4f1a\u8f93\u51fa\u4e00\u4e2a\u65f6\u95f4\u5f88\u77ed\u7684\u4f4e\u7535\u5e73\u8109\u51b2\uff0c\u5bfc\u81f4\u5b9e\u9645\u5360\u7a7a\u6bd4\u8fbe\u4e0d\u52301\u3002","title":"\u63a7\u5236LED\u4eae\u5ea6"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BC%E5%90%B8%E7%81%AF/#_3","text":"ATtiny88 Datasheet Programming and Interfacing ATMEL's AVRs","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AADC/","text":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e94\uff09\uff1aADC \u00b6 ADC\u6a21\u5757\u4ecb\u7ecd \u00b6 ATtiny88\u5355\u7247\u673a\u5305\u542b\u4e00\u4e2a10bit\u5206\u8fa8\u7387\u7684ADC\u6a21\u5757\uff0c\u62e5\u67098\u4e2a\u901a\u9053\uff0c\u6700\u5927\u91c7\u6837\u738715kSPS\uff0c\u8f6c\u6362\u65f6\u95f414us\u3002ATtiny88\u7684ADC\u53c2\u8003\u7535\u538b\u53ef\u4ee5\u6765\u81ea\u5916\u90e8\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5185\u90e81.1V\u7684\u7535\u538b\u6e90\u3002\u652f\u6301\u81ea\u7531\u8fd0\u884c\u6a21\u5f0f\u548c\u5355\u6b21\u8f6c\u6362\u6a21\u5f0f\uff0c\u652f\u6301\u591a\u79cd\u81ea\u52a8\u89e6\u53d1\u6e90\uff0c\u5728\u7761\u7720\u6a21\u5f0f\u4e0b\u62e5\u6709\u566a\u58f0\u6d88\u9664\u5668\u3002 \u6ce8\u610f\uff1a\u4e3a\u4e86\u4f7f\u7528ADC\u6a21\u5757\uff0c PRR \u5bc4\u5b58\u5668\u7684 PRADC \u4f4d\u5fc5\u987b\u8bbe\u4e3a0\u3002 ADC\u8f6c\u6362\u7ed3\u679c\u4fdd\u5b58\u5728 ADCH \u548c ADCL \u5bc4\u5b58\u5668\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 ADLAR \u4f4d\u6765\u9009\u62e9\u5de6\u5bf9\u9f50\u8fd8\u662f\u53f3\u5bf9\u9f50\u3002\u4e3a\u4e86\u9632\u6b62\u5728\u8bfb\u53d6ADC\u7ed3\u679c\u65f6\uff0cADC\u7ed3\u679c\u53d1\u751f\u6539\u53d8\uff0c\u5fc5\u987b\u5148\u8bfb\u53d6 ADCL \u5bc4\u5b58\u5668\uff0c\u7136\u540e\u518d\u8bfb\u53d6 ADCH \u5bc4\u5b58\u5668\u3002\u56e0\u4e3a\u5728\u8bfb\u53d6 ADCL \u5bc4\u5b58\u5668\u65f6\uff0cADC\u8f6c\u6362\u7684\u7ed3\u679c\u4f1a\u88ab\u9501\u5b9a\uff0c\u76f4\u5230 ADCH \u5bc4\u5b58\u5668\u88ab\u8bfb\u53d6\u4e3a\u6b62\u3002 ADC\u6709\u4e24\u79cd\u6a21\u5f0f\uff1a\u5355\u6b21\u89e6\u53d1\u6a21\u5f0f\u548c\u81ea\u7531\u8fd0\u884c\u6a21\u5f0f\u3002\u5728\u5355\u6b21\u89e6\u53d1\u6a21\u5f0f\u4e0b\uff0c\u5411 ADSC \u4f4d\u51991\u542f\u52a8\u8f6c\u6362\uff0c\u8f6c\u6362\u5b8c\u6210\u540e\u8be5\u4f4d\u4f1a\u81ea\u52a8\u6e05\u96f6\uff1b\u5728\u81ea\u7531\u8fd0\u884c\u6a21\u5f0f\u4e0b\uff0c ADSC \u4f4d\u4f1a\u4e00\u76f4\u7ef4\u63011\u3002 \u5728\u7761\u7720\u6a21\u5f0f\u4e0b\uff0cADC\u6a21\u5757\u53ef\u4ee5\u542f\u7528\u566a\u58f0\u6d88\u9664\u5668\u51cf\u5c11\u6765\u81eaCPU\u5185\u6838\u548c\u5176\u4ed6I/O\u5916\u8bbe\u7684\u566a\u58f0\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a \u786e\u4fddADC\u4f7f\u80fd\u5e76\u5904\u4e8e\u975e\u5fd9\u72b6\u6001\uff0c\u9009\u62e9\u5355\u6b21\u8f6c\u6362\u6a21\u5f0f\uff0c\u4f7f\u80fdADC\u8f6c\u6362\u7ed3\u675f\u4e2d\u65ad\u3002 \u8fdb\u5165ADC\u566a\u58f0\u51cf\u5c11\u6a21\u5f0f\uff08\u6216\u7a7a\u95f2\u6a21\u5f0f\uff09\uff0c\u5f53CPU\u505c\u6b62\u5de5\u4f5c\u65f6\uff0cADC\u4f1a\u5f00\u59cb\u4e00\u6b21\u8f6c\u6362\u3002 \u5f53\u8f6c\u6362\u7ed3\u675f\u65f6\uff0cADC\u8f6c\u6362\u7ed3\u675f\u4e2d\u65ad\u4f1a\u5524\u9192CPU\uff0c\u9664\u975e\u518d\u6b21\u4f7f\u7528\u7761\u7720\u547d\u4ee4\uff0c\u5426\u5219CPU\u4f1a\u4e00\u76f4\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001\u3002 \u6ce8\u610f\uff1a\u8fdb\u5165\u9664\u7a7a\u95f2\u6a21\u5f0f\u53caADC\u566a\u58f0\u51cf\u5c11\u6a21\u5f0f\u5916\u7684\u5176\u4ed6\u7761\u7720\u6a21\u5f0f\u65f6\uff0c\u4e0d\u4f1a\u81ea\u52a8\u5173\u95edADC\uff0c\u5efa\u8bae\u5728\u8fdb\u5165\u8fd9\u4e9b\u7761\u7720\u6a21\u5f0f\u65f6\u5c06 ADEN \u4f4d\u6e05\u96f6\u3002 ADC\u8f6c\u6362\u7ed3\u679c\u4e0e\u7535\u538b\u7684\u5173\u7cfb\u5982\u4e0b\u5f0f\u6240\u793a\uff1a \\[ADC=\\frac{V_{IN} \\times 1024}{V_{REF}}\\] ATtiny88\u5185\u90e8\u6709\u4e00\u4e2a\u6e29\u5ea6\u4f20\u611f\u5668\uff0c\u5b83\u8fde\u63a5\u5230ADC8\u901a\u9053\uff0c\u5728\u6d4b\u91cf\u6e29\u5ea6\u65f6\uff0c\u5fc5\u987b\u9009\u62e9\u5185\u90e81.1V\u53c2\u8003\u7535\u538b\u3002 ADC\u7684\u6d4b\u91cf\u7535\u538b\u4e0e\u6e29\u5ea6\u7ea6\u4e3a\u7ebf\u6027\u5173\u7cfb\uff0c\u7075\u654f\u5ea6\u7ea6\u4e3a1LSB/\u2103\uff0c\u5178\u578b\u503c\u5982\u4e0b\uff1a \u4e3a\u4e86\u83b7\u5f97\u66f4\u9ad8\u7684\u7cbe\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u516c\u5f0f\u8fdb\u884c\u8f6f\u4ef6\u6821\u6b63\uff1a \\[T = k \\times [(ADCH << 8) | ADCL] + T_{OS}\\] \u5176\u4e2d\uff0c \\(k\\) \u662f\u659c\u7387\uff0c\u662f\u56fa\u5b9a\u7684\uff0c\u901a\u5e38\u6570\u503c\u975e\u5e38\u63a5\u8fd11\uff0c \\(T_{OS}\\) \u662f\u4f20\u611f\u5668\u504f\u79fb\u91cf\u3002 \u76f8\u5173\u5bc4\u5b58\u5668 \u00b6 REFS0 \uff1a\u53c2\u8003\u7535\u538b\u9009\u62e9\u3002 ADLAR \uff1aADC\u7ed3\u679c\u5de6\u5bf9\u9f50\uff0c\u8bbe\u4e3a0\u53f3\u5bf9\u9f50\uff0c\u8bbe\u4e3a1\u5de6\u5bf9\u9f50\u3002 MUX[3:0] \uff1a\u6a21\u62df\u901a\u9053\u9009\u62e9\u3002 ADEN \uff1a\u4f7f\u80fdADC\u3002 ADSC \uff1a\u542f\u52a8ADC\u8f6c\u6362\uff0c\u8f6c\u6362\u7ed3\u675f\u540e\u81ea\u52a8\u6e05\u96f6\u3002 ADATE \uff1a\u4f7f\u80fdADC\u81ea\u52a8\u89e6\u53d1\u3002 ADIF \uff1aADC\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u4e2d\u65ad\u7a0b\u5e8f\u6267\u884c\u7ed3\u675f\u540e\u6e05\u96f6\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 ADPS[2:0] \uff1aADC\u5206\u9891\u9009\u62e9\uff0c\u5206\u9891\u540e\u7684\u9891\u7387\u4e0d\u8981\u8d85\u8fc71MHz\u3002 ADTS[2:0] \uff1aADC\u81ea\u52a8\u89e6\u53d1\u6e90\u9009\u62e9\u3002 ADCnD \uff1a\u5173\u95ed\u5bf9\u5e94ADC\u5f15\u811a\u7684\u6570\u5b57\u8f93\u5165\u7f13\u51b2\u3002 \u4ee3\u7801 \u00b6 \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528ATtiny88\u7684ADC\u6a21\u5757\u8bfb\u53d6ADC0\u901a\u9053\uff08PC0\u5f15\u811a\uff09\u7684\u7535\u538b\u503c\uff0c\u4ee3\u7801\u6587\u4ef6\u7684\u6574\u4f53\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2502 \u251c\u2500\u2500 serial.h \u2502 \u2514\u2500\u2500 serial_stdio.h \u2514\u2500\u2500 src \u251c\u2500\u2500 main.c \u251c\u2500\u2500 serial.c \u2514\u2500\u2500 serial_stdio.c src/main.c \u6e90\u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <stdint.h> #include <stdio.h> #include <avr/io.h> #include <avr/interrupt.h> #include <serial_stdio.h> static void delay ( void ); int main ( void ) { cli (); stdio_setup (); // initialize stdio and redirect it to serial ADMUX = _BV ( REFS0 ); // external reference, align right, select channel ADC0(PC0) ADCSRA = _BV ( ADEN ) | _BV ( ADIF ) | _BV ( ADPS2 ) | _BV ( ADPS1 ) | _BV ( ADPS0 ); // enable ADC, clear ADC interrupt flag, disable ADC interrupt, division factor = 128 DIDR0 = _BV ( ADC0D ); // disable digital input buffer of ADC0 pin sei (); for (;;) { ADCSRA |= _BV ( ADSC ); // start conversion while ( ! ( ADCSRA & _BV ( ADIF ))); // wait for completion uint16_t value = ADCL ; // read low byte first value |= ADCH << 8 ; // then read the high uint16_t voltage = ( 5000UL * value ) >> 10 ; // convert digital value to voltage printf ( \"ADC0 value: 0x%04X, voltage: %dmV. \\r\\n \" , value , voltage ); ADCSRA |= _BV ( ADIF ); // clear flag delay (); } } static void delay ( void ) { for ( volatile uint32_t i = 0 ; i < 0x8000 ; i ++ ); } \u53c2\u8003\u8d44\u6599 \u00b6 ATtiny88 Datasheet","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e94\uff09\uff1aADC"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AADC/#attiny88adc","text":"","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u4e94\uff09\uff1aADC"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AADC/#adc","text":"ATtiny88\u5355\u7247\u673a\u5305\u542b\u4e00\u4e2a10bit\u5206\u8fa8\u7387\u7684ADC\u6a21\u5757\uff0c\u62e5\u67098\u4e2a\u901a\u9053\uff0c\u6700\u5927\u91c7\u6837\u738715kSPS\uff0c\u8f6c\u6362\u65f6\u95f414us\u3002ATtiny88\u7684ADC\u53c2\u8003\u7535\u538b\u53ef\u4ee5\u6765\u81ea\u5916\u90e8\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5185\u90e81.1V\u7684\u7535\u538b\u6e90\u3002\u652f\u6301\u81ea\u7531\u8fd0\u884c\u6a21\u5f0f\u548c\u5355\u6b21\u8f6c\u6362\u6a21\u5f0f\uff0c\u652f\u6301\u591a\u79cd\u81ea\u52a8\u89e6\u53d1\u6e90\uff0c\u5728\u7761\u7720\u6a21\u5f0f\u4e0b\u62e5\u6709\u566a\u58f0\u6d88\u9664\u5668\u3002 \u6ce8\u610f\uff1a\u4e3a\u4e86\u4f7f\u7528ADC\u6a21\u5757\uff0c PRR \u5bc4\u5b58\u5668\u7684 PRADC \u4f4d\u5fc5\u987b\u8bbe\u4e3a0\u3002 ADC\u8f6c\u6362\u7ed3\u679c\u4fdd\u5b58\u5728 ADCH \u548c ADCL \u5bc4\u5b58\u5668\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 ADLAR \u4f4d\u6765\u9009\u62e9\u5de6\u5bf9\u9f50\u8fd8\u662f\u53f3\u5bf9\u9f50\u3002\u4e3a\u4e86\u9632\u6b62\u5728\u8bfb\u53d6ADC\u7ed3\u679c\u65f6\uff0cADC\u7ed3\u679c\u53d1\u751f\u6539\u53d8\uff0c\u5fc5\u987b\u5148\u8bfb\u53d6 ADCL \u5bc4\u5b58\u5668\uff0c\u7136\u540e\u518d\u8bfb\u53d6 ADCH \u5bc4\u5b58\u5668\u3002\u56e0\u4e3a\u5728\u8bfb\u53d6 ADCL \u5bc4\u5b58\u5668\u65f6\uff0cADC\u8f6c\u6362\u7684\u7ed3\u679c\u4f1a\u88ab\u9501\u5b9a\uff0c\u76f4\u5230 ADCH \u5bc4\u5b58\u5668\u88ab\u8bfb\u53d6\u4e3a\u6b62\u3002 ADC\u6709\u4e24\u79cd\u6a21\u5f0f\uff1a\u5355\u6b21\u89e6\u53d1\u6a21\u5f0f\u548c\u81ea\u7531\u8fd0\u884c\u6a21\u5f0f\u3002\u5728\u5355\u6b21\u89e6\u53d1\u6a21\u5f0f\u4e0b\uff0c\u5411 ADSC \u4f4d\u51991\u542f\u52a8\u8f6c\u6362\uff0c\u8f6c\u6362\u5b8c\u6210\u540e\u8be5\u4f4d\u4f1a\u81ea\u52a8\u6e05\u96f6\uff1b\u5728\u81ea\u7531\u8fd0\u884c\u6a21\u5f0f\u4e0b\uff0c ADSC \u4f4d\u4f1a\u4e00\u76f4\u7ef4\u63011\u3002 \u5728\u7761\u7720\u6a21\u5f0f\u4e0b\uff0cADC\u6a21\u5757\u53ef\u4ee5\u542f\u7528\u566a\u58f0\u6d88\u9664\u5668\u51cf\u5c11\u6765\u81eaCPU\u5185\u6838\u548c\u5176\u4ed6I/O\u5916\u8bbe\u7684\u566a\u58f0\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a \u786e\u4fddADC\u4f7f\u80fd\u5e76\u5904\u4e8e\u975e\u5fd9\u72b6\u6001\uff0c\u9009\u62e9\u5355\u6b21\u8f6c\u6362\u6a21\u5f0f\uff0c\u4f7f\u80fdADC\u8f6c\u6362\u7ed3\u675f\u4e2d\u65ad\u3002 \u8fdb\u5165ADC\u566a\u58f0\u51cf\u5c11\u6a21\u5f0f\uff08\u6216\u7a7a\u95f2\u6a21\u5f0f\uff09\uff0c\u5f53CPU\u505c\u6b62\u5de5\u4f5c\u65f6\uff0cADC\u4f1a\u5f00\u59cb\u4e00\u6b21\u8f6c\u6362\u3002 \u5f53\u8f6c\u6362\u7ed3\u675f\u65f6\uff0cADC\u8f6c\u6362\u7ed3\u675f\u4e2d\u65ad\u4f1a\u5524\u9192CPU\uff0c\u9664\u975e\u518d\u6b21\u4f7f\u7528\u7761\u7720\u547d\u4ee4\uff0c\u5426\u5219CPU\u4f1a\u4e00\u76f4\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001\u3002 \u6ce8\u610f\uff1a\u8fdb\u5165\u9664\u7a7a\u95f2\u6a21\u5f0f\u53caADC\u566a\u58f0\u51cf\u5c11\u6a21\u5f0f\u5916\u7684\u5176\u4ed6\u7761\u7720\u6a21\u5f0f\u65f6\uff0c\u4e0d\u4f1a\u81ea\u52a8\u5173\u95edADC\uff0c\u5efa\u8bae\u5728\u8fdb\u5165\u8fd9\u4e9b\u7761\u7720\u6a21\u5f0f\u65f6\u5c06 ADEN \u4f4d\u6e05\u96f6\u3002 ADC\u8f6c\u6362\u7ed3\u679c\u4e0e\u7535\u538b\u7684\u5173\u7cfb\u5982\u4e0b\u5f0f\u6240\u793a\uff1a \\[ADC=\\frac{V_{IN} \\times 1024}{V_{REF}}\\] ATtiny88\u5185\u90e8\u6709\u4e00\u4e2a\u6e29\u5ea6\u4f20\u611f\u5668\uff0c\u5b83\u8fde\u63a5\u5230ADC8\u901a\u9053\uff0c\u5728\u6d4b\u91cf\u6e29\u5ea6\u65f6\uff0c\u5fc5\u987b\u9009\u62e9\u5185\u90e81.1V\u53c2\u8003\u7535\u538b\u3002 ADC\u7684\u6d4b\u91cf\u7535\u538b\u4e0e\u6e29\u5ea6\u7ea6\u4e3a\u7ebf\u6027\u5173\u7cfb\uff0c\u7075\u654f\u5ea6\u7ea6\u4e3a1LSB/\u2103\uff0c\u5178\u578b\u503c\u5982\u4e0b\uff1a \u4e3a\u4e86\u83b7\u5f97\u66f4\u9ad8\u7684\u7cbe\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u516c\u5f0f\u8fdb\u884c\u8f6f\u4ef6\u6821\u6b63\uff1a \\[T = k \\times [(ADCH << 8) | ADCL] + T_{OS}\\] \u5176\u4e2d\uff0c \\(k\\) \u662f\u659c\u7387\uff0c\u662f\u56fa\u5b9a\u7684\uff0c\u901a\u5e38\u6570\u503c\u975e\u5e38\u63a5\u8fd11\uff0c \\(T_{OS}\\) \u662f\u4f20\u611f\u5668\u504f\u79fb\u91cf\u3002","title":"ADC\u6a21\u5757\u4ecb\u7ecd"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AADC/#_1","text":"REFS0 \uff1a\u53c2\u8003\u7535\u538b\u9009\u62e9\u3002 ADLAR \uff1aADC\u7ed3\u679c\u5de6\u5bf9\u9f50\uff0c\u8bbe\u4e3a0\u53f3\u5bf9\u9f50\uff0c\u8bbe\u4e3a1\u5de6\u5bf9\u9f50\u3002 MUX[3:0] \uff1a\u6a21\u62df\u901a\u9053\u9009\u62e9\u3002 ADEN \uff1a\u4f7f\u80fdADC\u3002 ADSC \uff1a\u542f\u52a8ADC\u8f6c\u6362\uff0c\u8f6c\u6362\u7ed3\u675f\u540e\u81ea\u52a8\u6e05\u96f6\u3002 ADATE \uff1a\u4f7f\u80fdADC\u81ea\u52a8\u89e6\u53d1\u3002 ADIF \uff1aADC\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u4e2d\u65ad\u7a0b\u5e8f\u6267\u884c\u7ed3\u675f\u540e\u6e05\u96f6\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u51991\u6e05\u96f6\u3002 ADPS[2:0] \uff1aADC\u5206\u9891\u9009\u62e9\uff0c\u5206\u9891\u540e\u7684\u9891\u7387\u4e0d\u8981\u8d85\u8fc71MHz\u3002 ADTS[2:0] \uff1aADC\u81ea\u52a8\u89e6\u53d1\u6e90\u9009\u62e9\u3002 ADCnD \uff1a\u5173\u95ed\u5bf9\u5e94ADC\u5f15\u811a\u7684\u6570\u5b57\u8f93\u5165\u7f13\u51b2\u3002","title":"\u76f8\u5173\u5bc4\u5b58\u5668"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AADC/#_2","text":"\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528ATtiny88\u7684ADC\u6a21\u5757\u8bfb\u53d6ADC0\u901a\u9053\uff08PC0\u5f15\u811a\uff09\u7684\u7535\u538b\u503c\uff0c\u4ee3\u7801\u6587\u4ef6\u7684\u6574\u4f53\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2502 \u251c\u2500\u2500 serial.h \u2502 \u2514\u2500\u2500 serial_stdio.h \u2514\u2500\u2500 src \u251c\u2500\u2500 main.c \u251c\u2500\u2500 serial.c \u2514\u2500\u2500 serial_stdio.c src/main.c \u6e90\u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <stdint.h> #include <stdio.h> #include <avr/io.h> #include <avr/interrupt.h> #include <serial_stdio.h> static void delay ( void ); int main ( void ) { cli (); stdio_setup (); // initialize stdio and redirect it to serial ADMUX = _BV ( REFS0 ); // external reference, align right, select channel ADC0(PC0) ADCSRA = _BV ( ADEN ) | _BV ( ADIF ) | _BV ( ADPS2 ) | _BV ( ADPS1 ) | _BV ( ADPS0 ); // enable ADC, clear ADC interrupt flag, disable ADC interrupt, division factor = 128 DIDR0 = _BV ( ADC0D ); // disable digital input buffer of ADC0 pin sei (); for (;;) { ADCSRA |= _BV ( ADSC ); // start conversion while ( ! ( ADCSRA & _BV ( ADIF ))); // wait for completion uint16_t value = ADCL ; // read low byte first value |= ADCH << 8 ; // then read the high uint16_t voltage = ( 5000UL * value ) >> 10 ; // convert digital value to voltage printf ( \"ADC0 value: 0x%04X, voltage: %dmV. \\r\\n \" , value , voltage ); ADCSRA |= _BV ( ADIF ); // clear flag delay (); } } static void delay ( void ) { for ( volatile uint32_t i = 0 ; i < 0x8000 ; i ++ ); }","title":"\u4ee3\u7801"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AADC/#_3","text":"ATtiny88 Datasheet","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASPI/","text":"ATtiny88\u521d\u4f53\u9a8c\uff08\u516d\uff09\uff1aSPI \u00b6 SPI\u4ecb\u7ecd \u00b6 ATtiny88\u81ea\u5e26SPI\u6a21\u5757\uff0c\u53ef\u4ee5\u5b9e\u73b0\u6570\u636e\u7684\u5168\u53cc\u5de5\u4e09\u7ebf\u540c\u6b65\u4f20\u8f93\u3002\u5b83\u652f\u6301\u4e3b\u4ece\u4e24\u79cd\u6a21\u5f0f\uff0c\u53ef\u4ee5\u914d\u7f6e\u4e3aLSB\u6216\u8005MSB\u4f18\u5148\u4f20\u8f93\uff0c\u67097\u79cd\u53ef\u7f16\u7a0b\u901f\u7387\uff0c\u652f\u6301\u4ece\u7a7a\u95f2\u6a21\u5f0f\u5524\u9192\u3002 \u6ce8\u610f\uff1a\u4e3a\u4e86\u4f7f\u7528SPI\u6a21\u5757\uff0c\u5fc5\u987b\u5c06 PRR \u5bc4\u5b58\u5668\u4e2d\u7684 PRSPI \u4f4d\u8bbe\u7f6e\u4e3a0\u3002 ATtiny88\u7684SPI\u65f6\u949f\u9891\u7387\u4e0d\u80fd\u8d85\u8fc7 \\(f_{OSC}/4\\) \uff0c\u53cc\u500d\u901f\u7387\u6a21\u5f0f\u4e0b\u4e0d\u80fd\u8d85\u8fc7 \\(f_{OSC}/2\\) \u3002 \u5f53SPI\u4f7f\u80fd\u65f6\uff0cMOSI\u3001MISO\u3001SCK\u3001SS\u5f15\u811a\u7684\u65b9\u5411\u4f1a\u88ab\u8986\u76d6\uff0c\u5177\u4f53\u89c1\u4e0b\u8868\uff1a \u6839\u636eSCK\u7684\u6781\u6027\u548c\u76f8\u4f4d\u4e0d\u540c\uff0cSPI\u5206\u4e3a\u56db\u79cd\u6a21\u5f0f\uff1a \u5bc4\u5b58\u5668 \u00b6 SPIE \uff1a\u5199\u51651\u4f7f\u80fdSPI\u4e2d\u65ad\u3002 SPE \uff1a\u5199\u51651\u4f7f\u80fdSPI\u3002 DORD \uff1a\u6570\u636e\u65b9\u5411\uff0c\u5199\u51651\u4e3aLSB\u4f18\u5148\uff0c\u5199\u51650\u4e3aMSB\u4f18\u5148\u3002 MSTR \uff1a\u4e3b\u673a/\u4ece\u673a\u6a21\u5f0f\u9009\u62e9\uff0c\u5199\u51651\u4e3a\u4e3b\u673a\u6a21\u5f0f\uff0c\u5199\u51650\u4e3a\u4ece\u673a\u6a21\u5f0f\u3002 CPOL \uff1a\u65f6\u949f\u6781\u6027\u3002 CPHA \uff1a\u65f6\u949f\u76f8\u4f4d\u3002 SPR[1:0] \uff1aSPI\u65f6\u949f\u901f\u7387\u9009\u62e9\u3002 SPIF \uff1aSPI\u4e2d\u65ad\u6807\u5fd7\uff0c\u6267\u884c\u5b8c\u4e2d\u65ad\u540e\u81ea\u52a8\u6e05\u9664\uff0c\u6216\u8005\u901a\u8fc7\u5148\u8bfb SPSR \u5bc4\u5b58\u5668\uff0c\u518d\u8bbf\u95ee SPDR \u5bc4\u5b58\u5668\u6e05\u9664\u3002 WCOL \uff1a\u5199\u51b2\u7a81\u6807\u5fd7\uff0c\u5728\u6570\u636e\u4f20\u8f93\u671f\u95f4\u5bf9 SPDR \u5bc4\u5b58\u5668\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\u7f6e\u4f4d\uff0c\u901a\u8fc7\u5148\u8bfb SPSR \u5bc4\u5b58\u5668\uff0c\u518d\u8bbf\u95ee SPDR \u5bc4\u5b58\u5668\u6e05\u9664\u3002 SPI2X \uff1aSPI\u901f\u7387\u52a0\u500d\u3002\u5728\u4e3b\u673a\u6a21\u5f0f\u4e0b\uff0c\u5411\u6b64\u4f4d\u5199\u51651\u4f7fSPI\u65f6\u949f\u901f\u7387\u52a0\u500d\uff0c\u6700\u5927\u901f\u7387\u4e3a \\(f_{OSC}/2\\) \u3002\u5728\u4ece\u673a\u6a21\u5f0f\u4e0b\uff0c\u6700\u5927\u901f\u7387\u8fd8\u662f\u53ea\u6709 \\(f_{OSC}/4\\) \u3002 \u4ee3\u7801 \u00b6 \u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u4f7f\u7528ATtiny88\u7684SPI\u6a21\u5757\u4e0eW25Q32 Flash\u6a21\u5757\u8fdb\u884c\u901a\u4fe1\uff0c\u8bfb\u53d6Flash\u7684ID\u4fe1\u606f\u3002\u6e90\u6587\u4ef6\u7684\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2502 \u251c\u2500\u2500 serial.h \u2502 \u2514\u2500\u2500 serial_stdio.h \u2514\u2500\u2500 src \u251c\u2500\u2500 main.c \u251c\u2500\u2500 serial.c \u2514\u2500\u2500 serial_stdio.c src/main.c \u6e90\u6587\u4ef6\u7684\u4ee3\u7801\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <stdint.h> #include <stdio.h> #include <avr/io.h> #include <avr/interrupt.h> #include <serial_stdio.h> static void spi_setup ( void ); static uint8_t spi_read_and_write ( uint8_t data ); static void w25qxx_read_device_id ( void * id , uint8_t n ); static void w25qxx_read_manufacturer_device_id ( void * id , uint8_t n ); static void w25qxx_read_unique_id ( void * id , uint8_t n ); static void w25qxx_read_jedec_id ( void * id , uint8_t n ); int main ( void ) { cli (); stdio_setup (); // initialize stdio and redirect it to serial spi_setup (); // initialize spi module sei (); printf ( \"================================= \\r\\n \" ); // read device id of spi flash uint8_t buf [ 8 ]; w25qxx_read_device_id ( buf , 1 ); printf ( \"device id: 0x%02X. \\r\\n \" , buf [ 0 ]); // read manufacturer and device id of spi flash w25qxx_read_manufacturer_device_id ( buf , 2 ); printf ( \"manufacturer & device id: 0x%02X%02X. \\r\\n \" , buf [ 0 ], buf [ 1 ]); // read unique id of spi flash w25qxx_read_unique_id ( buf , 8 ); printf ( \"unique id: 0x\" ); for ( uint8_t i = 0 ; i < 8 ; i ++ ) { printf ( \"%02X\" , buf [ i ]); } printf ( \". \\r\\n \" ); // read jedec id of spi flash w25qxx_read_jedec_id ( buf , 3 ); printf ( \"jedec id: 0x%02X%02X%02X. \\r\\n \" , buf [ 0 ], buf [ 1 ], buf [ 2 ]); for (;;); } static void spi_setup ( void ) { // initialize gpios // PB2 -> SS // PB3 -> MOSI // PB4 -> MISO // PB5 -> SCK DDRB |= _BV ( DDB2 ) | _BV ( DDB3 ) | _BV ( DDB5 ); PORTB |= _BV ( PORTB2 ) | _BV ( PORTB3 ) | _BV ( PORTB5 ); // enable spi, msb first, master mode, mode 3, prescaler = 64 SPCR = _BV ( SPE ) | _BV ( MSTR ) | _BV ( CPOL ) | _BV ( CPHA ) | _BV ( SPR1 ) | _BV ( SPR0 ); SPSR = _BV ( SPI2X ); } static uint8_t spi_read_and_write ( uint8_t data ) { SPDR = data ; while ( ! ( SPSR & _BV ( SPIF ))); return SPDR ; } static void w25qxx_read_device_id ( void * id , uint8_t n ) { if ( n > 1 ) { n = 1 ; } PORTB &= ~ _BV ( PORTB2 ); spi_read_and_write ( 0xAB ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); while ( n -- ) { * ( uint8_t * ) id ++ = spi_read_and_write ( 0xFF ); } PORTB |= _BV ( PORTB2 ); } static void w25qxx_read_manufacturer_device_id ( void * id , uint8_t n ) { if ( n > 2 ) { n = 2 ; } PORTB &= ~ _BV ( PORTB2 ); spi_read_and_write ( 0x90 ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0x00 ); while ( n -- ) { * ( uint8_t * ) id ++ = spi_read_and_write ( 0xFF ); } PORTB |= _BV ( PORTB2 ); } static void w25qxx_read_unique_id ( void * id , uint8_t n ) { if ( n > 8 ) { n = 8 ; } PORTB &= ~ _BV ( PORTB2 ); spi_read_and_write ( 0x4B ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); while ( n -- ) { * ( uint8_t * ) id ++ = spi_read_and_write ( 0xFF ); } PORTB |= _BV ( PORTB2 ); } static void w25qxx_read_jedec_id ( void * id , uint8_t n ) { if ( n > 3 ) { n = 3 ; } PORTB &= ~ _BV ( PORTB2 ); spi_read_and_write ( 0x9F ); while ( n -- ) { * ( uint8_t * ) id ++ = spi_read_and_write ( 0xFF ); } PORTB |= _BV ( PORTB2 ); } \u7f16\u8bd1\u5e76\u4e0b\u8f7d\u7a0b\u5e8f\u5230ATtiny88\uff0c\u8fde\u63a5\u597d\u4e32\u53e3\uff0c\u53ef\u4ee5\u89c2\u5bdf\u4e32\u53e3\u7684\u8f93\u51fa\u5982\u4e0b\uff1a \u53c2\u8003\u8d44\u6599 \u00b6 ATtiny88 Datasheet Programming and Interfacing ATMEL's AVRs","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u516d\uff09\uff1aSPI"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASPI/#attiny88spi","text":"","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u516d\uff09\uff1aSPI"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASPI/#spi","text":"ATtiny88\u81ea\u5e26SPI\u6a21\u5757\uff0c\u53ef\u4ee5\u5b9e\u73b0\u6570\u636e\u7684\u5168\u53cc\u5de5\u4e09\u7ebf\u540c\u6b65\u4f20\u8f93\u3002\u5b83\u652f\u6301\u4e3b\u4ece\u4e24\u79cd\u6a21\u5f0f\uff0c\u53ef\u4ee5\u914d\u7f6e\u4e3aLSB\u6216\u8005MSB\u4f18\u5148\u4f20\u8f93\uff0c\u67097\u79cd\u53ef\u7f16\u7a0b\u901f\u7387\uff0c\u652f\u6301\u4ece\u7a7a\u95f2\u6a21\u5f0f\u5524\u9192\u3002 \u6ce8\u610f\uff1a\u4e3a\u4e86\u4f7f\u7528SPI\u6a21\u5757\uff0c\u5fc5\u987b\u5c06 PRR \u5bc4\u5b58\u5668\u4e2d\u7684 PRSPI \u4f4d\u8bbe\u7f6e\u4e3a0\u3002 ATtiny88\u7684SPI\u65f6\u949f\u9891\u7387\u4e0d\u80fd\u8d85\u8fc7 \\(f_{OSC}/4\\) \uff0c\u53cc\u500d\u901f\u7387\u6a21\u5f0f\u4e0b\u4e0d\u80fd\u8d85\u8fc7 \\(f_{OSC}/2\\) \u3002 \u5f53SPI\u4f7f\u80fd\u65f6\uff0cMOSI\u3001MISO\u3001SCK\u3001SS\u5f15\u811a\u7684\u65b9\u5411\u4f1a\u88ab\u8986\u76d6\uff0c\u5177\u4f53\u89c1\u4e0b\u8868\uff1a \u6839\u636eSCK\u7684\u6781\u6027\u548c\u76f8\u4f4d\u4e0d\u540c\uff0cSPI\u5206\u4e3a\u56db\u79cd\u6a21\u5f0f\uff1a","title":"SPI\u4ecb\u7ecd"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASPI/#_1","text":"SPIE \uff1a\u5199\u51651\u4f7f\u80fdSPI\u4e2d\u65ad\u3002 SPE \uff1a\u5199\u51651\u4f7f\u80fdSPI\u3002 DORD \uff1a\u6570\u636e\u65b9\u5411\uff0c\u5199\u51651\u4e3aLSB\u4f18\u5148\uff0c\u5199\u51650\u4e3aMSB\u4f18\u5148\u3002 MSTR \uff1a\u4e3b\u673a/\u4ece\u673a\u6a21\u5f0f\u9009\u62e9\uff0c\u5199\u51651\u4e3a\u4e3b\u673a\u6a21\u5f0f\uff0c\u5199\u51650\u4e3a\u4ece\u673a\u6a21\u5f0f\u3002 CPOL \uff1a\u65f6\u949f\u6781\u6027\u3002 CPHA \uff1a\u65f6\u949f\u76f8\u4f4d\u3002 SPR[1:0] \uff1aSPI\u65f6\u949f\u901f\u7387\u9009\u62e9\u3002 SPIF \uff1aSPI\u4e2d\u65ad\u6807\u5fd7\uff0c\u6267\u884c\u5b8c\u4e2d\u65ad\u540e\u81ea\u52a8\u6e05\u9664\uff0c\u6216\u8005\u901a\u8fc7\u5148\u8bfb SPSR \u5bc4\u5b58\u5668\uff0c\u518d\u8bbf\u95ee SPDR \u5bc4\u5b58\u5668\u6e05\u9664\u3002 WCOL \uff1a\u5199\u51b2\u7a81\u6807\u5fd7\uff0c\u5728\u6570\u636e\u4f20\u8f93\u671f\u95f4\u5bf9 SPDR \u5bc4\u5b58\u5668\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\u7f6e\u4f4d\uff0c\u901a\u8fc7\u5148\u8bfb SPSR \u5bc4\u5b58\u5668\uff0c\u518d\u8bbf\u95ee SPDR \u5bc4\u5b58\u5668\u6e05\u9664\u3002 SPI2X \uff1aSPI\u901f\u7387\u52a0\u500d\u3002\u5728\u4e3b\u673a\u6a21\u5f0f\u4e0b\uff0c\u5411\u6b64\u4f4d\u5199\u51651\u4f7fSPI\u65f6\u949f\u901f\u7387\u52a0\u500d\uff0c\u6700\u5927\u901f\u7387\u4e3a \\(f_{OSC}/2\\) \u3002\u5728\u4ece\u673a\u6a21\u5f0f\u4e0b\uff0c\u6700\u5927\u901f\u7387\u8fd8\u662f\u53ea\u6709 \\(f_{OSC}/4\\) \u3002","title":"\u5bc4\u5b58\u5668"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASPI/#_2","text":"\u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u4f7f\u7528ATtiny88\u7684SPI\u6a21\u5757\u4e0eW25Q32 Flash\u6a21\u5757\u8fdb\u884c\u901a\u4fe1\uff0c\u8bfb\u53d6Flash\u7684ID\u4fe1\u606f\u3002\u6e90\u6587\u4ef6\u7684\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2502 \u251c\u2500\u2500 serial.h \u2502 \u2514\u2500\u2500 serial_stdio.h \u2514\u2500\u2500 src \u251c\u2500\u2500 main.c \u251c\u2500\u2500 serial.c \u2514\u2500\u2500 serial_stdio.c src/main.c \u6e90\u6587\u4ef6\u7684\u4ee3\u7801\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <stdint.h> #include <stdio.h> #include <avr/io.h> #include <avr/interrupt.h> #include <serial_stdio.h> static void spi_setup ( void ); static uint8_t spi_read_and_write ( uint8_t data ); static void w25qxx_read_device_id ( void * id , uint8_t n ); static void w25qxx_read_manufacturer_device_id ( void * id , uint8_t n ); static void w25qxx_read_unique_id ( void * id , uint8_t n ); static void w25qxx_read_jedec_id ( void * id , uint8_t n ); int main ( void ) { cli (); stdio_setup (); // initialize stdio and redirect it to serial spi_setup (); // initialize spi module sei (); printf ( \"================================= \\r\\n \" ); // read device id of spi flash uint8_t buf [ 8 ]; w25qxx_read_device_id ( buf , 1 ); printf ( \"device id: 0x%02X. \\r\\n \" , buf [ 0 ]); // read manufacturer and device id of spi flash w25qxx_read_manufacturer_device_id ( buf , 2 ); printf ( \"manufacturer & device id: 0x%02X%02X. \\r\\n \" , buf [ 0 ], buf [ 1 ]); // read unique id of spi flash w25qxx_read_unique_id ( buf , 8 ); printf ( \"unique id: 0x\" ); for ( uint8_t i = 0 ; i < 8 ; i ++ ) { printf ( \"%02X\" , buf [ i ]); } printf ( \". \\r\\n \" ); // read jedec id of spi flash w25qxx_read_jedec_id ( buf , 3 ); printf ( \"jedec id: 0x%02X%02X%02X. \\r\\n \" , buf [ 0 ], buf [ 1 ], buf [ 2 ]); for (;;); } static void spi_setup ( void ) { // initialize gpios // PB2 -> SS // PB3 -> MOSI // PB4 -> MISO // PB5 -> SCK DDRB |= _BV ( DDB2 ) | _BV ( DDB3 ) | _BV ( DDB5 ); PORTB |= _BV ( PORTB2 ) | _BV ( PORTB3 ) | _BV ( PORTB5 ); // enable spi, msb first, master mode, mode 3, prescaler = 64 SPCR = _BV ( SPE ) | _BV ( MSTR ) | _BV ( CPOL ) | _BV ( CPHA ) | _BV ( SPR1 ) | _BV ( SPR0 ); SPSR = _BV ( SPI2X ); } static uint8_t spi_read_and_write ( uint8_t data ) { SPDR = data ; while ( ! ( SPSR & _BV ( SPIF ))); return SPDR ; } static void w25qxx_read_device_id ( void * id , uint8_t n ) { if ( n > 1 ) { n = 1 ; } PORTB &= ~ _BV ( PORTB2 ); spi_read_and_write ( 0xAB ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); while ( n -- ) { * ( uint8_t * ) id ++ = spi_read_and_write ( 0xFF ); } PORTB |= _BV ( PORTB2 ); } static void w25qxx_read_manufacturer_device_id ( void * id , uint8_t n ) { if ( n > 2 ) { n = 2 ; } PORTB &= ~ _BV ( PORTB2 ); spi_read_and_write ( 0x90 ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0x00 ); while ( n -- ) { * ( uint8_t * ) id ++ = spi_read_and_write ( 0xFF ); } PORTB |= _BV ( PORTB2 ); } static void w25qxx_read_unique_id ( void * id , uint8_t n ) { if ( n > 8 ) { n = 8 ; } PORTB &= ~ _BV ( PORTB2 ); spi_read_and_write ( 0x4B ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); spi_read_and_write ( 0xFF ); while ( n -- ) { * ( uint8_t * ) id ++ = spi_read_and_write ( 0xFF ); } PORTB |= _BV ( PORTB2 ); } static void w25qxx_read_jedec_id ( void * id , uint8_t n ) { if ( n > 3 ) { n = 3 ; } PORTB &= ~ _BV ( PORTB2 ); spi_read_and_write ( 0x9F ); while ( n -- ) { * ( uint8_t * ) id ++ = spi_read_and_write ( 0xFF ); } PORTB |= _BV ( PORTB2 ); } \u7f16\u8bd1\u5e76\u4e0b\u8f7d\u7a0b\u5e8f\u5230ATtiny88\uff0c\u8fde\u63a5\u597d\u4e32\u53e3\uff0c\u53ef\u4ee5\u89c2\u5bdf\u4e32\u53e3\u7684\u8f93\u51fa\u5982\u4e0b\uff1a","title":"\u4ee3\u7801"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASPI/#_3","text":"ATtiny88 Datasheet Programming and Interfacing ATMEL's AVRs","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%9C%8B%E9%97%A8%E7%8B%97/","text":"ATtiny88\u521d\u4f53\u9a8c\uff08\u56db\uff09\uff1a\u770b\u95e8\u72d7 \u00b6 ATtiny88\u5355\u7247\u673a\u7684\u770b\u95e8\u72d7\u4f7f\u7528\u5185\u90e8\u72ec\u7acb\u7684128KHz\u65f6\u949f\u6e90\uff0c\u62e5\u67093\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff1a Interrupt\u6a21\u5f0f\uff1a\u8d85\u65f6\u4ea7\u751f\u4e2d\u65ad\uff1b System Reset\u6a21\u5f0f\uff1a\u8d85\u65f6\u4ea7\u751f\u7cfb\u7edf\u590d\u4f4d\uff1b Interrupt & System Reset\u6a21\u5f0f\uff1a\u8d85\u65f6\u4ea7\u751f\u4e2d\u65ad\uff0c\u4e2d\u65ad\u5904\u7406\u5b8c\u6210\u540e\u4ea7\u751f\u7cfb\u7edf\u590d\u4f4d\u3002 \u5f53\u7194\u4e1d\u4f4d WDTON \u88ab\u7f16\u7a0b\u65f6\uff08\u503c\u4e3a0\uff09\uff0c\u5c06\u5f3a\u5236\u5c06\u770b\u95e8\u72d7\u8bbe\u4e3aSystem Reset\u6a21\u5f0f\uff0c\u6b64\u65f6 WDE \u548c WDIE \u4f4d\u5c06\u88ab\u9501\u5b9a\u4e3a 1 \u548c 0 \u3002 \u6e05\u9664 WDE \u4f4d\u548c\u4fee\u6539 WDP \u9700\u8981\u6309\u7167\u4e0b\u9762\u7684\u987a\u5e8f\u8fdb\u884c\u64cd\u4f5c\uff1a \u5411 WDCE \u548c WDE \u4f4d\u51991\uff0c\u4e0d\u7ba1 WDE \u4f4d\u5148\u524d\u662f\u4ec0\u4e48\u503c\uff0c\u90fd\u5fc5\u987b\u51991\u3002 \u5728\u63a5\u4e0b\u6765\u76844\u4e2a\u65f6\u949f\u91cc\uff0c\u4fee\u6539 WDE \u548c WDP \u4f4d\uff0c\u6e05\u9664 WDCE \u4f4d\uff0c\u8fd9\u4e9b\u5fc5\u987b\u5728\u4e00\u6b21\u64cd\u4f5c\u5185\u5b8c\u6210\u3002 \u6ce8\u610f\uff1a \u4e3a\u4e86\u9632\u6b62\u7a0b\u5e8f\u9677\u5165\u590d\u4f4d\u5faa\u73af\uff0c\u4e0d\u7ba1\u6709\u6ca1\u6709\u7528\u5230\u770b\u95e8\u72d7\uff0c\u5728\u521d\u59cb\u5316\u65f6\uff0c\u90fd\u5efa\u8bae\u6e05\u9664 WDRF \u6807\u5fd7\u4f4d\u548c WDE \u4f4d\u3002 \u5728\u4efb\u4f55\u5bf9 WDP \u4f4d\u7684\u4fee\u6539\u4e4b\u524d\uff0c\u5efa\u8bae\u90fd\u590d\u4f4d\u770b\u95e8\u72d7\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u5916\u7684\u590d\u4f4d\u3002 \u5bc4\u5b58\u5668 \u00b6 WDRF \uff1a\u770b\u95e8\u72d7\u7cfb\u7edf\u590d\u4f4d\u6807\u5fd7\u4f4d\u3002 BORF \uff1a\u6b20\u538b\u590d\u4f4d\u6807\u5fd7\u4f4d\u3002 EXTRF \uff1a\u5916\u90e8\u590d\u4f4d\u6807\u5fd7\u4f4d\u3002 PORF \uff1a\u4e0a\u7535\u590d\u4f4d\u6807\u5fd7\u4f4d\u3002 WDIF \uff1a\u770b\u95e8\u72d7\u4e2d\u65ad\u6807\u5fd7\u4f4d\u3002 WDIE \uff1a\u770b\u95e8\u72d7\u4e2d\u65ad\u4f7f\u80fd\u3002 WDCE \uff1a\u770b\u95e8\u72d7\u4fee\u6539\u4f7f\u80fd\uff0c\u53ea\u6709\u8bbe\u7f6e\u6b64\u4f4d\uff0c\u624d\u80fd\u4fee\u6539 WDE \u548c WDP \u4f4d\u3002 WDE \uff1a\u770b\u95e8\u72d7\u7cfb\u7edf\u590d\u4f4d\u4f7f\u80fd\u3002 WDP[3:0] \uff1a\u770b\u95e8\u72d7\u5b9a\u65f6\u5668\u5206\u9891\u3002 \u4ee3\u7801 \u00b6 \u4ee3\u7801\u7684\u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2502 \u251c\u2500\u2500 serial.h \u2502 \u2514\u2500\u2500 serial_stdio.h \u2514\u2500\u2500 src \u251c\u2500\u2500 main.c \u251c\u2500\u2500 serial.c \u2514\u2500\u2500 serial_stdio.c \u5176\u4e2d\uff0c src/main.c \u7684\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include <stdint.h> #include <stdio.h> #include <avr/io.h> #include <avr/interrupt.h> #include <avr/wdt.h> #include <serial_stdio.h> static void watchdog_setup ( void ); int main ( void ) { cli (); DDRD = _BV ( DDD0 ); // set PD0 as output stdio_setup (); // initialize stdio sei (); if ( MCUSR & _BV ( WDRF )) { // check if watchdog reset printf ( \"Watchdog Reset. \\r\\n \" ); } if ( MCUSR & _BV ( BORF )) { // check if brown-out reset printf ( \"Brown-out Reset. \\r\\n \" ); } if ( MCUSR & _BV ( EXTRF )) { // check if external reset printf ( \"External Reset. \\r\\n \" ); } if ( MCUSR & _BV ( PORF )) { // check if power-on reset printf ( \"Power-on Reset. \\r\\n \" ); } MCUSR = 0 ; // clear reset flags watchdog_setup (); // initialize watchdog as timer for (;;); } static void watchdog_setup ( void ) { cli (); wdt_reset (); // reset watchdog counter MCUSR &= ~ _BV ( WDRF ); // clear watchdog reset flag WDTCSR = _BV ( WDCE ) | _BV ( WDE ); // enable watchdog change WDTCSR = _BV ( WDIE ) | _BV ( WDP2 ) | _BV ( WDP0 ); // interrupt mode, 0.5s sei (); } ISR ( WDT_vect ) { uint8_t sreg = SREG ; PIND = _BV ( PIND0 ); // toggle PD0 SREG = sreg ; } \u4e0a\u8ff0\u4ee3\u7801\u5c06\u770b\u95e8\u72d7\u8bbe\u7f6e\u4e3a\u5b9a\u65f6\u5668\u4e2d\u65ad\u6a21\u5f0f\uff0c\u5b9a\u65f6\u5468\u671f\u4e3a0.5s\uff0c\u5728\u4e2d\u65ad\u7a0b\u5e8f\u91cc\uff0c\u7ffb\u8f6cPD0\u7684\u8f93\u51fa\u72b6\u6001\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 ATtiny88 Datasheet","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u56db\uff09\uff1a\u770b\u95e8\u72d7"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%9C%8B%E9%97%A8%E7%8B%97/#attiny88","text":"ATtiny88\u5355\u7247\u673a\u7684\u770b\u95e8\u72d7\u4f7f\u7528\u5185\u90e8\u72ec\u7acb\u7684128KHz\u65f6\u949f\u6e90\uff0c\u62e5\u67093\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff1a Interrupt\u6a21\u5f0f\uff1a\u8d85\u65f6\u4ea7\u751f\u4e2d\u65ad\uff1b System Reset\u6a21\u5f0f\uff1a\u8d85\u65f6\u4ea7\u751f\u7cfb\u7edf\u590d\u4f4d\uff1b Interrupt & System Reset\u6a21\u5f0f\uff1a\u8d85\u65f6\u4ea7\u751f\u4e2d\u65ad\uff0c\u4e2d\u65ad\u5904\u7406\u5b8c\u6210\u540e\u4ea7\u751f\u7cfb\u7edf\u590d\u4f4d\u3002 \u5f53\u7194\u4e1d\u4f4d WDTON \u88ab\u7f16\u7a0b\u65f6\uff08\u503c\u4e3a0\uff09\uff0c\u5c06\u5f3a\u5236\u5c06\u770b\u95e8\u72d7\u8bbe\u4e3aSystem Reset\u6a21\u5f0f\uff0c\u6b64\u65f6 WDE \u548c WDIE \u4f4d\u5c06\u88ab\u9501\u5b9a\u4e3a 1 \u548c 0 \u3002 \u6e05\u9664 WDE \u4f4d\u548c\u4fee\u6539 WDP \u9700\u8981\u6309\u7167\u4e0b\u9762\u7684\u987a\u5e8f\u8fdb\u884c\u64cd\u4f5c\uff1a \u5411 WDCE \u548c WDE \u4f4d\u51991\uff0c\u4e0d\u7ba1 WDE \u4f4d\u5148\u524d\u662f\u4ec0\u4e48\u503c\uff0c\u90fd\u5fc5\u987b\u51991\u3002 \u5728\u63a5\u4e0b\u6765\u76844\u4e2a\u65f6\u949f\u91cc\uff0c\u4fee\u6539 WDE \u548c WDP \u4f4d\uff0c\u6e05\u9664 WDCE \u4f4d\uff0c\u8fd9\u4e9b\u5fc5\u987b\u5728\u4e00\u6b21\u64cd\u4f5c\u5185\u5b8c\u6210\u3002 \u6ce8\u610f\uff1a \u4e3a\u4e86\u9632\u6b62\u7a0b\u5e8f\u9677\u5165\u590d\u4f4d\u5faa\u73af\uff0c\u4e0d\u7ba1\u6709\u6ca1\u6709\u7528\u5230\u770b\u95e8\u72d7\uff0c\u5728\u521d\u59cb\u5316\u65f6\uff0c\u90fd\u5efa\u8bae\u6e05\u9664 WDRF \u6807\u5fd7\u4f4d\u548c WDE \u4f4d\u3002 \u5728\u4efb\u4f55\u5bf9 WDP \u4f4d\u7684\u4fee\u6539\u4e4b\u524d\uff0c\u5efa\u8bae\u90fd\u590d\u4f4d\u770b\u95e8\u72d7\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u5916\u7684\u590d\u4f4d\u3002","title":"ATtiny88\u521d\u4f53\u9a8c\uff08\u56db\uff09\uff1a\u770b\u95e8\u72d7"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%9C%8B%E9%97%A8%E7%8B%97/#_1","text":"WDRF \uff1a\u770b\u95e8\u72d7\u7cfb\u7edf\u590d\u4f4d\u6807\u5fd7\u4f4d\u3002 BORF \uff1a\u6b20\u538b\u590d\u4f4d\u6807\u5fd7\u4f4d\u3002 EXTRF \uff1a\u5916\u90e8\u590d\u4f4d\u6807\u5fd7\u4f4d\u3002 PORF \uff1a\u4e0a\u7535\u590d\u4f4d\u6807\u5fd7\u4f4d\u3002 WDIF \uff1a\u770b\u95e8\u72d7\u4e2d\u65ad\u6807\u5fd7\u4f4d\u3002 WDIE \uff1a\u770b\u95e8\u72d7\u4e2d\u65ad\u4f7f\u80fd\u3002 WDCE \uff1a\u770b\u95e8\u72d7\u4fee\u6539\u4f7f\u80fd\uff0c\u53ea\u6709\u8bbe\u7f6e\u6b64\u4f4d\uff0c\u624d\u80fd\u4fee\u6539 WDE \u548c WDP \u4f4d\u3002 WDE \uff1a\u770b\u95e8\u72d7\u7cfb\u7edf\u590d\u4f4d\u4f7f\u80fd\u3002 WDP[3:0] \uff1a\u770b\u95e8\u72d7\u5b9a\u65f6\u5668\u5206\u9891\u3002","title":"\u5bc4\u5b58\u5668"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%9C%8B%E9%97%A8%E7%8B%97/#_2","text":"\u4ee3\u7801\u7684\u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 inc \u2502 \u251c\u2500\u2500 serial.h \u2502 \u2514\u2500\u2500 serial_stdio.h \u2514\u2500\u2500 src \u251c\u2500\u2500 main.c \u251c\u2500\u2500 serial.c \u2514\u2500\u2500 serial_stdio.c \u5176\u4e2d\uff0c src/main.c \u7684\u5185\u5bb9\u5982\u4e0b\uff1a src/main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include <stdint.h> #include <stdio.h> #include <avr/io.h> #include <avr/interrupt.h> #include <avr/wdt.h> #include <serial_stdio.h> static void watchdog_setup ( void ); int main ( void ) { cli (); DDRD = _BV ( DDD0 ); // set PD0 as output stdio_setup (); // initialize stdio sei (); if ( MCUSR & _BV ( WDRF )) { // check if watchdog reset printf ( \"Watchdog Reset. \\r\\n \" ); } if ( MCUSR & _BV ( BORF )) { // check if brown-out reset printf ( \"Brown-out Reset. \\r\\n \" ); } if ( MCUSR & _BV ( EXTRF )) { // check if external reset printf ( \"External Reset. \\r\\n \" ); } if ( MCUSR & _BV ( PORF )) { // check if power-on reset printf ( \"Power-on Reset. \\r\\n \" ); } MCUSR = 0 ; // clear reset flags watchdog_setup (); // initialize watchdog as timer for (;;); } static void watchdog_setup ( void ) { cli (); wdt_reset (); // reset watchdog counter MCUSR &= ~ _BV ( WDRF ); // clear watchdog reset flag WDTCSR = _BV ( WDCE ) | _BV ( WDE ); // enable watchdog change WDTCSR = _BV ( WDIE ) | _BV ( WDP2 ) | _BV ( WDP0 ); // interrupt mode, 0.5s sei (); } ISR ( WDT_vect ) { uint8_t sreg = SREG ; PIND = _BV ( PIND0 ); // toggle PD0 SREG = sreg ; } \u4e0a\u8ff0\u4ee3\u7801\u5c06\u770b\u95e8\u72d7\u8bbe\u7f6e\u4e3a\u5b9a\u65f6\u5668\u4e2d\u65ad\u6a21\u5f0f\uff0c\u5b9a\u65f6\u5468\u671f\u4e3a0.5s\uff0c\u5728\u4e2d\u65ad\u7a0b\u5e8f\u91cc\uff0c\u7ffb\u8f6cPD0\u7684\u8f93\u51fa\u72b6\u6001\u3002","title":"\u4ee3\u7801"},{"location":"Embed/ATtiny88%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%9C%8B%E9%97%A8%E7%8B%97/#_3","text":"ATtiny88 Datasheet","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%90%AD%E5%BB%BA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/","text":"AVR\u6c47\u7f16\uff08\u4e00\uff09\uff1a\u642d\u5efa\u4ea4\u53c9\u7f16\u8bd1\u73af\u5883 \u00b6 \u51e0\u5e74\u95f4\uff0c\u9646\u9646\u7eed\u7eed\u63a5\u89e6\u4e86\u5f88\u591a\u70ed\u95e8\u7684\u5355\u7247\u673a\uff0c\u5982STC\u3001STM8S\u3001STM32\u3001ESP32\u7b49\u3002\u4f46\u4e00\u76f4\u90fd\u662f\u62b1\u7740\u6025\u529f\u8fd1\u5229\u7684\u5fc3\u6001\u53bb\u5b66\u4e60\u4ed6\u4eec\uff0c\u57fa\u672c\u4e0a\u90fd\u662f\u57fa\u4e8e\u5e93\u51fd\u6570\u548c\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u8fdb\u884c\u5f00\u53d1\uff0c\u5f88\u5c11\u9759\u4e0b\u5fc3\u6765\u53bb\u7814\u7a76\u8fd9\u4e9b\u4e0d\u540c\u5185\u6838\u5355\u7247\u673a\u7684\u5e95\u5c42\u5de5\u4f5c\u539f\u7406\u3002\u56e0\u6b64\u6211\u6253\u7b97\u63a5\u4e0b\u6765\u4e00\u6bb5\u65f6\u95f4\u597d\u597d\u7814\u7a76\u4e00\u756a\uff0c\u5148\u4ece\u76f8\u5bf9\u5bb9\u6613\u7684AVR\u5185\u6838\u5f00\u59cb\u3002 AVR\u662fAtmel\u63a8\u51fa\u7684\u4e00\u4e2a8\u4f4d\u7684RISC\u5fae\u63a7\u5236\u5668\u5185\u6838\uff0c\u54c8\u4f5b\u67b6\u6784\uff0c\u5177\u59071MIPS/MHz\u7684\u9ad8\u901f\u8fd0\u884c\u5904\u7406\u80fd\u529b\u3002\u672c\u6587\u5c06\u4ecb\u7ecd\u5728Linux\u7cfb\u7edf\u4e0b\u642d\u5efaAVR\u4ea4\u53c9\u7f16\u8bd1\u73af\u5883\uff0c\u4ee5\u53ca\u4eff\u771fAVR\u7a0b\u5e8f\u7684\u65b9\u6cd5\uff0c\u8fd8\u4f1a\u63d0\u5230\u4e00\u4e9b\u5e38\u7528\u7684GDB\u8c03\u8bd5\u547d\u4ee4\u3002 \u642d\u5efaAVR\u4ea4\u53c9\u7f16\u8bd1\u73af\u5883 \u00b6 \u4e3b\u8981\u5b89\u88c5 avr-gcc \u3001 make \u3001 simavr \u8f6f\u4ef6\uff0c\u524d\u4e24\u8005\u7528\u4e8e\u7f16\u8bd1\uff0c\u540e\u8005\u7528\u4e8e\u4eff\u771f\u3002 \u4eceMicrochip\u5b98\u7f51\u4e0b\u8f7d GCC Compilers for AVR \uff0c\u9009\u62e9\u201cAVR 8-Bit Toolchain (Linux)\u201d\u3002 \u4e0b\u8f7d\u540e\u5f97\u5230 avr8-gnu-toolchain-3.7.0.1796-linux.any.x86_64.tar.gz \u6587\u4ef6\uff0c\u5c06\u4e4b\u89e3\u538b\u5230\u5408\u9002\u4f4d\u7f6e\uff1a 1 tar -zxvf avr8-gnu-toolchain-3.7.0.1796-linux.any.x86_64.tar.gz -C /path/to/avr-gcc \u5176\u4e2d\uff0c -C \u6307\u5b9a\u89e3\u538b\u76ee\u5f55\u3002 \u89e3\u538b\u5b8c\u6210\u540e\uff0c\u5f97\u5230 avr8-gnu-toolchain-linux_x86_64 \u6587\u4ef6\u5939\uff0c avr-gcc \u6240\u6709\u7684\u7f16\u8bd1\u5de5\u5177\u3001\u5e93\u3001\u5934\u6587\u4ef6\u7b49\u90fd\u5b58\u653e\u5728\u5b83\u4e0b\u9762\uff0c\u5176\u4e2d bin \u6587\u4ef6\u5939\u662f avr-gcc \u7b49\u4e3b\u8981\u53ef\u6267\u884c\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 \u5c06 avg-gcc \u6240\u5728\u7684\u76ee\u5f55\u6dfb\u52a0\u5230 PATH \u73af\u5883\u53d8\u91cf\uff0c\u7136\u540e\u91cd\u65b0\u52a0\u8f7d\u7ec8\u7aef\uff1a 1 2 echo -e \"\\nexport PATH=\\$PATH:/path/to/avr-gcc/avr8-gnu-toolchain-linux_x86_64/bin\" >> ~/.zshrc source ~/.zshrc \u68c0\u67e5 avr-gcc \u662f\u5426\u5b89\u88c5\u6210\u529f\uff0c\u5982\u679c\u6210\u529f\uff0c\u5219\u4f1a\u6b63\u5e38\u8f93\u51fa\u7248\u672c\u4fe1\u606f\uff1a 1 avr-gcc --version \u5b89\u88c5 make \u548c simavr \uff1a 1 2 sudo apt update sudo apt install make simavr \u7f16\u8bd1\u53ca\u4eff\u771f \u00b6 \u9996\u5148\u51c6\u5907\u4e00\u4e2a\u7528\u4e8e\u4eff\u771f\u7684\u6e90\u4ee3\u7801 hello.c \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a hello.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <avr/io.h> #include <stdint.h> static void delay ( void ) { for ( volatile uint16_t i = 0 ; i < 0x8000 ; i ++ ); } int main ( void ) { uint8_t mask = 1 << 5 ; DDRB |= mask ; // set PB5 to output mode PORTB &= ~ mask ; // PB5 = 0 for (;;) { PINB = mask ; // toggle PB5 delay (); } } \u8fd9\u6bb5\u4ee3\u7801\u5e72\u7684\u4e8b\u60c5\u5f88\u7b80\u5355\uff0c\u8bbe\u7f6e PB5 \u4e3a\u8f93\u51fa\u6a21\u5f0f\uff0c\u7136\u540e\u4e0d\u65ad\u7ffb\u8f6c PB5 \u7684\u8f93\u51fa\u7535\u5e73\u3002 \u7136\u540e\u7f16\u5199 Makefile \u6587\u4ef6\uff1a Makefile 1 2 3 4 5 6 7 8 9 10 11 .PHONY : all clean all : hello . elf hello.o : hello . c avr-gcc -mmcu = atmega328p -c -g -Wall -Og -std = gnu99 -o $@ $^ hello.elf : hello . o avr-gcc -mmcu = atmega328p -o $@ $^ clean : rm -rf *.o *.elf \u6587\u4ef6\u5b9a\u4e49\u7684\u6700\u7ec8\u7f16\u8bd1\u76ee\u6807\u662f hello.elf \uff0c\u5176\u4e2d\u4e0d\u8981\u5fd8\u4e86\u6307\u5b9a avr-gcc \u7684 -mmcu \u9009\u9879\uff0c\u8fd9\u91cc -mmcu=atmega328p \u8868\u793a\u7f16\u8bd1ATmega328P\u5355\u7247\u673a\u7684\u4ee3\u7801\u3002 \u4e4b\u540e\u6267\u884c make \u8fdb\u884c\u7f16\u8bd1\uff0c\u751f\u6210 hello.elf \u6587\u4ef6\u3002 \u63a5\u4e0b\u6765\u5bf9 hello.elf \u8fdb\u884c\u4eff\u771f\uff0c\u8fd9\u4e3b\u8981\u501f\u52a9 simavr \u548c avr-gdb \u6765\u5b9e\u73b0\u3002 1 simavr -f 16000000 -m atmega328p --gdb hello.elf \u8fd9\u6761\u547d\u4ee4\u4e2d -f \u8bbe\u7f6e\u4eff\u771f\u9891\u7387\uff0c -m \u6307\u5b9a\u4eff\u771f\u7684\u5355\u7247\u673a\u578b\u53f7\uff0c\u53ef\u4ee5\u901a\u8fc7 simavr --list-cores \u67e5\u770b\u6240\u6709\u652f\u6301\u7684\u5355\u7247\u673a\u578b\u53f7\uff0c --gdb \u5f00\u542fGDB\u670d\u52a1\uff0c\u76d1\u542c\u7aef\u53e3\u4e3a 1234 \u3002 \u518d\u6253\u5f00\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0c\u7528\u4e8e\u6267\u884c avr-gdb \u3002 1 avr-gdb -ex \"target remote localhost:1234\" -q --tui hello.elf \u6267\u884c\u8fd9\u6761\u547d\u4ee4\u540e\uff0c\u5c06\u8fdb\u5165 avr-gdb \u8c03\u8bd5\u754c\u9762\u3002 \u5e38\u7528GDB\u547d\u4ee4 \u00b6 \u547d\u4ee4 \u529f\u80fd \u793a\u4f8b help \u67e5\u770b\u5e2e\u52a9 help all \u67e5\u770b\u6240\u6709\u547d\u4ee4 help print \u67e5\u770b print \u547d\u4ee4\u7684\u5e2e\u52a9\u4fe1\u606f target remote \u8fde\u63a5\u5230\u8fdc\u7a0bGDB\u670d\u52a1\u5668 target remote localhost:1234 \u8fde\u63a5\u5230\u672c\u5730\u7aef\u53e3\u53f7\u4e3a 1234 \u7684GDB\u670d\u52a1\u5668 layout \u8bbe\u7f6e\u7a97\u53e3\u5e03\u5c40 layout regs \u663e\u793a\u5bc4\u5b58\u5668\u7a97\u53e3 layout src \u663e\u793a\u6e90\u7801\u7a97\u53e3 layout split \u663e\u793a\u6e90\u7801\u548c\u53cd\u6c47\u7f16\u7a97\u53e3 break \u8bbe\u7f6e\u65ad\u70b9 break n \u5728\u7b2c n \u884c\u8bbe\u7f6e\u65ad\u70b9 break func \u5728 func \u51fd\u6570\u5165\u53e3\u5904\u8bbe\u7f6e\u65ad\u70b9 print \u6253\u5370\u8868\u8fbe\u5f0f\u7684\u503c print/x var \u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u6253\u5370\u53d8\u91cf var \u7684\u503c display \u5728\u7a0b\u5e8f\u6bcf\u6b21\u6682\u505c\u65f6\u6253\u5370\u8868\u8fbe\u5f0f\u7684\u503c display/x $r24 \u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u5728\u6bcf\u6b21\u7a0b\u5e8f\u6682\u505c\u65f6\u6253\u5370 r24 \u5bc4\u5b58\u5668\u7684\u503c info registers \u663e\u793a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9 info registers r24 \u663e\u793a r24 \u5bc4\u5b58\u5668\u7684\u5185\u5bb9 continue \u7ee7\u7eed\u8fd0\u884c next \u5355\u6b65\u8c03\u8bd5\uff08\u4e0d\u8fdb\u5165\u51fd\u6570\uff09 next n \u6267\u884c n \u6b65 step \u5355\u6b65\u8c03\u8bd5\uff08\u8fdb\u5165\u51fd\u6570\uff09 step n \u6267\u884c n \u6b65 backtrace \u663e\u793a\u5f53\u524d\u5806\u6808 list \u67e5\u770b\u6e90\u7801 list n \u663e\u793a\u7b2c n \u884c\u524d\u540e10\u884c\u4ee3\u7801 list func \u663e\u793a func \u51fd\u6570\u7684\u6e90\u4ee3\u7801 quit \u9000\u51faGDB \u53c2\u8003\u8d44\u6599 \u00b6 GCC Compilers for AVR buserror/simavr GDB\u5e38\u7528\u547d\u4ee4 GDB User Manual","title":"AVR\u6c47\u7f16\uff08\u4e00\uff09\uff1a\u642d\u5efa\u4ea4\u53c9\u7f16\u8bd1\u73af\u5883"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%90%AD%E5%BB%BA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#avr","text":"\u51e0\u5e74\u95f4\uff0c\u9646\u9646\u7eed\u7eed\u63a5\u89e6\u4e86\u5f88\u591a\u70ed\u95e8\u7684\u5355\u7247\u673a\uff0c\u5982STC\u3001STM8S\u3001STM32\u3001ESP32\u7b49\u3002\u4f46\u4e00\u76f4\u90fd\u662f\u62b1\u7740\u6025\u529f\u8fd1\u5229\u7684\u5fc3\u6001\u53bb\u5b66\u4e60\u4ed6\u4eec\uff0c\u57fa\u672c\u4e0a\u90fd\u662f\u57fa\u4e8e\u5e93\u51fd\u6570\u548c\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u8fdb\u884c\u5f00\u53d1\uff0c\u5f88\u5c11\u9759\u4e0b\u5fc3\u6765\u53bb\u7814\u7a76\u8fd9\u4e9b\u4e0d\u540c\u5185\u6838\u5355\u7247\u673a\u7684\u5e95\u5c42\u5de5\u4f5c\u539f\u7406\u3002\u56e0\u6b64\u6211\u6253\u7b97\u63a5\u4e0b\u6765\u4e00\u6bb5\u65f6\u95f4\u597d\u597d\u7814\u7a76\u4e00\u756a\uff0c\u5148\u4ece\u76f8\u5bf9\u5bb9\u6613\u7684AVR\u5185\u6838\u5f00\u59cb\u3002 AVR\u662fAtmel\u63a8\u51fa\u7684\u4e00\u4e2a8\u4f4d\u7684RISC\u5fae\u63a7\u5236\u5668\u5185\u6838\uff0c\u54c8\u4f5b\u67b6\u6784\uff0c\u5177\u59071MIPS/MHz\u7684\u9ad8\u901f\u8fd0\u884c\u5904\u7406\u80fd\u529b\u3002\u672c\u6587\u5c06\u4ecb\u7ecd\u5728Linux\u7cfb\u7edf\u4e0b\u642d\u5efaAVR\u4ea4\u53c9\u7f16\u8bd1\u73af\u5883\uff0c\u4ee5\u53ca\u4eff\u771fAVR\u7a0b\u5e8f\u7684\u65b9\u6cd5\uff0c\u8fd8\u4f1a\u63d0\u5230\u4e00\u4e9b\u5e38\u7528\u7684GDB\u8c03\u8bd5\u547d\u4ee4\u3002","title":"AVR\u6c47\u7f16\uff08\u4e00\uff09\uff1a\u642d\u5efa\u4ea4\u53c9\u7f16\u8bd1\u73af\u5883"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%90%AD%E5%BB%BA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#avr_1","text":"\u4e3b\u8981\u5b89\u88c5 avr-gcc \u3001 make \u3001 simavr \u8f6f\u4ef6\uff0c\u524d\u4e24\u8005\u7528\u4e8e\u7f16\u8bd1\uff0c\u540e\u8005\u7528\u4e8e\u4eff\u771f\u3002 \u4eceMicrochip\u5b98\u7f51\u4e0b\u8f7d GCC Compilers for AVR \uff0c\u9009\u62e9\u201cAVR 8-Bit Toolchain (Linux)\u201d\u3002 \u4e0b\u8f7d\u540e\u5f97\u5230 avr8-gnu-toolchain-3.7.0.1796-linux.any.x86_64.tar.gz \u6587\u4ef6\uff0c\u5c06\u4e4b\u89e3\u538b\u5230\u5408\u9002\u4f4d\u7f6e\uff1a 1 tar -zxvf avr8-gnu-toolchain-3.7.0.1796-linux.any.x86_64.tar.gz -C /path/to/avr-gcc \u5176\u4e2d\uff0c -C \u6307\u5b9a\u89e3\u538b\u76ee\u5f55\u3002 \u89e3\u538b\u5b8c\u6210\u540e\uff0c\u5f97\u5230 avr8-gnu-toolchain-linux_x86_64 \u6587\u4ef6\u5939\uff0c avr-gcc \u6240\u6709\u7684\u7f16\u8bd1\u5de5\u5177\u3001\u5e93\u3001\u5934\u6587\u4ef6\u7b49\u90fd\u5b58\u653e\u5728\u5b83\u4e0b\u9762\uff0c\u5176\u4e2d bin \u6587\u4ef6\u5939\u662f avr-gcc \u7b49\u4e3b\u8981\u53ef\u6267\u884c\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 \u5c06 avg-gcc \u6240\u5728\u7684\u76ee\u5f55\u6dfb\u52a0\u5230 PATH \u73af\u5883\u53d8\u91cf\uff0c\u7136\u540e\u91cd\u65b0\u52a0\u8f7d\u7ec8\u7aef\uff1a 1 2 echo -e \"\\nexport PATH=\\$PATH:/path/to/avr-gcc/avr8-gnu-toolchain-linux_x86_64/bin\" >> ~/.zshrc source ~/.zshrc \u68c0\u67e5 avr-gcc \u662f\u5426\u5b89\u88c5\u6210\u529f\uff0c\u5982\u679c\u6210\u529f\uff0c\u5219\u4f1a\u6b63\u5e38\u8f93\u51fa\u7248\u672c\u4fe1\u606f\uff1a 1 avr-gcc --version \u5b89\u88c5 make \u548c simavr \uff1a 1 2 sudo apt update sudo apt install make simavr","title":"\u642d\u5efaAVR\u4ea4\u53c9\u7f16\u8bd1\u73af\u5883"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%90%AD%E5%BB%BA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#_1","text":"\u9996\u5148\u51c6\u5907\u4e00\u4e2a\u7528\u4e8e\u4eff\u771f\u7684\u6e90\u4ee3\u7801 hello.c \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a hello.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <avr/io.h> #include <stdint.h> static void delay ( void ) { for ( volatile uint16_t i = 0 ; i < 0x8000 ; i ++ ); } int main ( void ) { uint8_t mask = 1 << 5 ; DDRB |= mask ; // set PB5 to output mode PORTB &= ~ mask ; // PB5 = 0 for (;;) { PINB = mask ; // toggle PB5 delay (); } } \u8fd9\u6bb5\u4ee3\u7801\u5e72\u7684\u4e8b\u60c5\u5f88\u7b80\u5355\uff0c\u8bbe\u7f6e PB5 \u4e3a\u8f93\u51fa\u6a21\u5f0f\uff0c\u7136\u540e\u4e0d\u65ad\u7ffb\u8f6c PB5 \u7684\u8f93\u51fa\u7535\u5e73\u3002 \u7136\u540e\u7f16\u5199 Makefile \u6587\u4ef6\uff1a Makefile 1 2 3 4 5 6 7 8 9 10 11 .PHONY : all clean all : hello . elf hello.o : hello . c avr-gcc -mmcu = atmega328p -c -g -Wall -Og -std = gnu99 -o $@ $^ hello.elf : hello . o avr-gcc -mmcu = atmega328p -o $@ $^ clean : rm -rf *.o *.elf \u6587\u4ef6\u5b9a\u4e49\u7684\u6700\u7ec8\u7f16\u8bd1\u76ee\u6807\u662f hello.elf \uff0c\u5176\u4e2d\u4e0d\u8981\u5fd8\u4e86\u6307\u5b9a avr-gcc \u7684 -mmcu \u9009\u9879\uff0c\u8fd9\u91cc -mmcu=atmega328p \u8868\u793a\u7f16\u8bd1ATmega328P\u5355\u7247\u673a\u7684\u4ee3\u7801\u3002 \u4e4b\u540e\u6267\u884c make \u8fdb\u884c\u7f16\u8bd1\uff0c\u751f\u6210 hello.elf \u6587\u4ef6\u3002 \u63a5\u4e0b\u6765\u5bf9 hello.elf \u8fdb\u884c\u4eff\u771f\uff0c\u8fd9\u4e3b\u8981\u501f\u52a9 simavr \u548c avr-gdb \u6765\u5b9e\u73b0\u3002 1 simavr -f 16000000 -m atmega328p --gdb hello.elf \u8fd9\u6761\u547d\u4ee4\u4e2d -f \u8bbe\u7f6e\u4eff\u771f\u9891\u7387\uff0c -m \u6307\u5b9a\u4eff\u771f\u7684\u5355\u7247\u673a\u578b\u53f7\uff0c\u53ef\u4ee5\u901a\u8fc7 simavr --list-cores \u67e5\u770b\u6240\u6709\u652f\u6301\u7684\u5355\u7247\u673a\u578b\u53f7\uff0c --gdb \u5f00\u542fGDB\u670d\u52a1\uff0c\u76d1\u542c\u7aef\u53e3\u4e3a 1234 \u3002 \u518d\u6253\u5f00\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0c\u7528\u4e8e\u6267\u884c avr-gdb \u3002 1 avr-gdb -ex \"target remote localhost:1234\" -q --tui hello.elf \u6267\u884c\u8fd9\u6761\u547d\u4ee4\u540e\uff0c\u5c06\u8fdb\u5165 avr-gdb \u8c03\u8bd5\u754c\u9762\u3002","title":"\u7f16\u8bd1\u53ca\u4eff\u771f"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%90%AD%E5%BB%BA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#gdb","text":"\u547d\u4ee4 \u529f\u80fd \u793a\u4f8b help \u67e5\u770b\u5e2e\u52a9 help all \u67e5\u770b\u6240\u6709\u547d\u4ee4 help print \u67e5\u770b print \u547d\u4ee4\u7684\u5e2e\u52a9\u4fe1\u606f target remote \u8fde\u63a5\u5230\u8fdc\u7a0bGDB\u670d\u52a1\u5668 target remote localhost:1234 \u8fde\u63a5\u5230\u672c\u5730\u7aef\u53e3\u53f7\u4e3a 1234 \u7684GDB\u670d\u52a1\u5668 layout \u8bbe\u7f6e\u7a97\u53e3\u5e03\u5c40 layout regs \u663e\u793a\u5bc4\u5b58\u5668\u7a97\u53e3 layout src \u663e\u793a\u6e90\u7801\u7a97\u53e3 layout split \u663e\u793a\u6e90\u7801\u548c\u53cd\u6c47\u7f16\u7a97\u53e3 break \u8bbe\u7f6e\u65ad\u70b9 break n \u5728\u7b2c n \u884c\u8bbe\u7f6e\u65ad\u70b9 break func \u5728 func \u51fd\u6570\u5165\u53e3\u5904\u8bbe\u7f6e\u65ad\u70b9 print \u6253\u5370\u8868\u8fbe\u5f0f\u7684\u503c print/x var \u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u6253\u5370\u53d8\u91cf var \u7684\u503c display \u5728\u7a0b\u5e8f\u6bcf\u6b21\u6682\u505c\u65f6\u6253\u5370\u8868\u8fbe\u5f0f\u7684\u503c display/x $r24 \u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u5728\u6bcf\u6b21\u7a0b\u5e8f\u6682\u505c\u65f6\u6253\u5370 r24 \u5bc4\u5b58\u5668\u7684\u503c info registers \u663e\u793a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9 info registers r24 \u663e\u793a r24 \u5bc4\u5b58\u5668\u7684\u5185\u5bb9 continue \u7ee7\u7eed\u8fd0\u884c next \u5355\u6b65\u8c03\u8bd5\uff08\u4e0d\u8fdb\u5165\u51fd\u6570\uff09 next n \u6267\u884c n \u6b65 step \u5355\u6b65\u8c03\u8bd5\uff08\u8fdb\u5165\u51fd\u6570\uff09 step n \u6267\u884c n \u6b65 backtrace \u663e\u793a\u5f53\u524d\u5806\u6808 list \u67e5\u770b\u6e90\u7801 list n \u663e\u793a\u7b2c n \u884c\u524d\u540e10\u884c\u4ee3\u7801 list func \u663e\u793a func \u51fd\u6570\u7684\u6e90\u4ee3\u7801 quit \u9000\u51faGDB","title":"\u5e38\u7528GDB\u547d\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%90%AD%E5%BB%BA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#_2","text":"GCC Compilers for AVR buserror/simavr GDB\u5e38\u7528\u547d\u4ee4 GDB User Manual","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/","text":"AVR\u6c47\u7f16\uff08\u4e03\uff09\uff1a\u4f4d\u64cd\u4f5c\u548cMCU\u63a7\u5236\u6307\u4ee4 \u00b6 \u4f4d\u64cd\u4f5c\u6307\u4ee4 \u00b6 SBI / CBI \u00b6 SBI \u6307\u4ee4\u7528\u4e8e\u8bbe\u7f6eI/O\u5bc4\u5b58\u5668\u4e2d\u7684\u7b2c b \u4f4d\uff0c CBI \u6307\u4ee4\u7528\u4e8e\u6e05\u9664I/O\u5bc4\u5b58\u5668\u4e2d\u7684\u7b2c b \u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 SBI DDRB , 5 ; PB5\u8bbe\u4e3a\u8f93\u51fa\u6a21\u5f0f CBI PORTB , 5 ; PB5\u8f93\u51fa\u4f4e\u7535\u5e73 \u79fb\u4f4d \u00b6 LSL \u6307\u4ee4\u7528\u4e8e\u903b\u8f91\u5de6\u79fb\uff0c\u4f4e\u4f4d\u88650\u3002 LSR \u6307\u4ee4\u7528\u4e8e\u903b\u8f91\u53f3\u79fb\uff0c\u9ad8\u4f4d\u88650\u3002 ASR \u6307\u4ee4\u7528\u4e8e\u7b97\u672f\u53f3\u79fb\uff0c\u9ad8\u4f4d\u8865\u7b26\u53f7\u4f4d\u3002 ROL \u6307\u4ee4\u7528\u4e8e\u5faa\u73af\u5de6\u79fb\uff0c\u4f4e\u4f4d\u8865 C \u6807\u5fd7\u4f4d\uff0c\u9ad8\u4f4d\u8fdb\u5165 C \u6807\u5fd7\u4f4d\u3002 ROR \u6307\u4ee4\u7528\u4e8e\u5faa\u73af\u53f3\u79fb\uff0c\u9ad8\u4f4d\u8865 C \u6807\u5fd7\u4f4d\uff0c\u4f4e\u4f4d\u8fdb\u5165 C \u6807\u5fd7\u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 LDI R16 , 0x88 ; R16 = 0x88 LSR R16 ; R16 = 0x44 LSL R16 ; R16 = 0x88 ASR R16 ; R16 = 0xC4 SEC ; C = 1 ROR R16 ; R16 = 0xE2, C = 0 ROL R16 ; R16 = 0xC4, C = 1 SWAP \u00b6 SWAP \u6307\u4ee4\u7528\u4e8e\u4ea4\u6362\u5bc4\u5b58\u5668\u7684\u9ad8\u4f4e4\u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 LDI R16 , 0xA5 ; R16 = 0xA5 SWAP R16 ; R16 = 0x5A BSET / BCLR \u00b6 BSET \u7528\u4e8e\u8bbe\u7f6e SREG \u5bc4\u5b58\u5668\u4e2d\u7684\u7b2c s \u4f4d\uff0c BCLR \u7528\u4e8e\u6e05\u9664 SREG \u5bc4\u5b58\u5668\u4e2d\u7684\u7b2c s \u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 BSET 0 ; C = 1 BCLR 0 ; C = 0 BST / BLD \u00b6 BST \u7528\u4e8e\u5c06\u5bc4\u5b58\u5668\u4e2d\u7684\u7b2c b \u4f4d\u4fdd\u5b58\u5230 T \u6807\u5fd7\u4f4d\uff0c BLD \u7528\u4e8e\u5c06 T \u6807\u5fd7\u4f4d\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u7684\u7b2c b \u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 3 LDI R16 , 0xAA BST R16 , 1 ; T = 1 BLD R16 , 0 ; R16 = 0xAB SEx / CLx \u00b6 \u5f62\u5982 SEx \u7684\u6307\u4ee4\u7528\u4e8e\u8bbe\u7f6e SREG \u5bc4\u5b58\u5668\u4e2d\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\uff0c\u5f62\u5982 CLx \u7684\u6307\u4ee4\u7528\u4e8e\u6e05\u9664 SREG \u5bc4\u5b58\u5668\u4e2d\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\uff0c\u8fd9\u4e24\u6761\u6307\u4ee4\u4f5c\u7528\u548c BSET / BCLR \u6307\u4ee4\u76f8\u540c\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 SEC ; SREG = 0x01 SEZ ; SREG = 0x03 SEN ; SREG = 0x07 SEV ; SREG = 0x0F SES ; SREG = 0x1F SEH ; SREG = 0x3F SET ; SREG = 0x7F SEI ; SREG = 0xFF CLI ; SREG = 0x7F CLT ; SREG = 0x3F CLH ; SREG = 0x1F CLS ; SREG = 0x0F CLV ; SREG = 0x07 CLN ; SREG = 0x03 CLZ ; SREG = 0x01 CLC ; SREG = 0x00 MCU\u63a7\u5236\u6307\u4ee4 \u00b6 NOP \u6307\u4ee4\u5360\u7528\u4e00\u4e2a\u5468\u671f\u800c\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 SLEEP \u6307\u4ee4\u7528\u4e8e\u8fdb\u5165\u7761\u7720\u6a21\u5f0f\u3002 WDR \u6307\u4ee4\u7528\u4e8e\u590d\u4f4d\u770b\u95e8\u72d7\u3002 BREAK \u6307\u4ee4\u4f9b\u8c03\u8bd5\u7cfb\u7edf\u4f7f\u7528\uff0c\u5e94\u7528\u7a0b\u5e8f\u7528\u4e0d\u5230\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 ATmega328P Datasheet AVR Instruction Set Manual","title":"AVR\u6c47\u7f16\uff08\u4e03\uff09\uff1a\u4f4d\u64cd\u4f5c\u548cMCU\u63a7\u5236\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/#avrmcu","text":"","title":"AVR\u6c47\u7f16\uff08\u4e03\uff09\uff1a\u4f4d\u64cd\u4f5c\u548cMCU\u63a7\u5236\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/#_1","text":"","title":"\u4f4d\u64cd\u4f5c\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/#sbi-cbi","text":"SBI \u6307\u4ee4\u7528\u4e8e\u8bbe\u7f6eI/O\u5bc4\u5b58\u5668\u4e2d\u7684\u7b2c b \u4f4d\uff0c CBI \u6307\u4ee4\u7528\u4e8e\u6e05\u9664I/O\u5bc4\u5b58\u5668\u4e2d\u7684\u7b2c b \u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 SBI DDRB , 5 ; PB5\u8bbe\u4e3a\u8f93\u51fa\u6a21\u5f0f CBI PORTB , 5 ; PB5\u8f93\u51fa\u4f4e\u7535\u5e73","title":"SBI / CBI"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/#_2","text":"LSL \u6307\u4ee4\u7528\u4e8e\u903b\u8f91\u5de6\u79fb\uff0c\u4f4e\u4f4d\u88650\u3002 LSR \u6307\u4ee4\u7528\u4e8e\u903b\u8f91\u53f3\u79fb\uff0c\u9ad8\u4f4d\u88650\u3002 ASR \u6307\u4ee4\u7528\u4e8e\u7b97\u672f\u53f3\u79fb\uff0c\u9ad8\u4f4d\u8865\u7b26\u53f7\u4f4d\u3002 ROL \u6307\u4ee4\u7528\u4e8e\u5faa\u73af\u5de6\u79fb\uff0c\u4f4e\u4f4d\u8865 C \u6807\u5fd7\u4f4d\uff0c\u9ad8\u4f4d\u8fdb\u5165 C \u6807\u5fd7\u4f4d\u3002 ROR \u6307\u4ee4\u7528\u4e8e\u5faa\u73af\u53f3\u79fb\uff0c\u9ad8\u4f4d\u8865 C \u6807\u5fd7\u4f4d\uff0c\u4f4e\u4f4d\u8fdb\u5165 C \u6807\u5fd7\u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 LDI R16 , 0x88 ; R16 = 0x88 LSR R16 ; R16 = 0x44 LSL R16 ; R16 = 0x88 ASR R16 ; R16 = 0xC4 SEC ; C = 1 ROR R16 ; R16 = 0xE2, C = 0 ROL R16 ; R16 = 0xC4, C = 1","title":"\u79fb\u4f4d"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/#swap","text":"SWAP \u6307\u4ee4\u7528\u4e8e\u4ea4\u6362\u5bc4\u5b58\u5668\u7684\u9ad8\u4f4e4\u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 LDI R16 , 0xA5 ; R16 = 0xA5 SWAP R16 ; R16 = 0x5A","title":"SWAP"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/#bset-bclr","text":"BSET \u7528\u4e8e\u8bbe\u7f6e SREG \u5bc4\u5b58\u5668\u4e2d\u7684\u7b2c s \u4f4d\uff0c BCLR \u7528\u4e8e\u6e05\u9664 SREG \u5bc4\u5b58\u5668\u4e2d\u7684\u7b2c s \u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 BSET 0 ; C = 1 BCLR 0 ; C = 0","title":"BSET / BCLR"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/#bst-bld","text":"BST \u7528\u4e8e\u5c06\u5bc4\u5b58\u5668\u4e2d\u7684\u7b2c b \u4f4d\u4fdd\u5b58\u5230 T \u6807\u5fd7\u4f4d\uff0c BLD \u7528\u4e8e\u5c06 T \u6807\u5fd7\u4f4d\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u7684\u7b2c b \u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 3 LDI R16 , 0xAA BST R16 , 1 ; T = 1 BLD R16 , 0 ; R16 = 0xAB","title":"BST / BLD"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/#sex-clx","text":"\u5f62\u5982 SEx \u7684\u6307\u4ee4\u7528\u4e8e\u8bbe\u7f6e SREG \u5bc4\u5b58\u5668\u4e2d\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\uff0c\u5f62\u5982 CLx \u7684\u6307\u4ee4\u7528\u4e8e\u6e05\u9664 SREG \u5bc4\u5b58\u5668\u4e2d\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\uff0c\u8fd9\u4e24\u6761\u6307\u4ee4\u4f5c\u7528\u548c BSET / BCLR \u6307\u4ee4\u76f8\u540c\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 SEC ; SREG = 0x01 SEZ ; SREG = 0x03 SEN ; SREG = 0x07 SEV ; SREG = 0x0F SES ; SREG = 0x1F SEH ; SREG = 0x3F SET ; SREG = 0x7F SEI ; SREG = 0xFF CLI ; SREG = 0x7F CLT ; SREG = 0x3F CLH ; SREG = 0x1F CLS ; SREG = 0x0F CLV ; SREG = 0x07 CLN ; SREG = 0x03 CLZ ; SREG = 0x01 CLC ; SREG = 0x00","title":"SEx / CLx"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/#mcu","text":"NOP \u6307\u4ee4\u5360\u7528\u4e00\u4e2a\u5468\u671f\u800c\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 SLEEP \u6307\u4ee4\u7528\u4e8e\u8fdb\u5165\u7761\u7720\u6a21\u5f0f\u3002 WDR \u6307\u4ee4\u7528\u4e8e\u590d\u4f4d\u770b\u95e8\u72d7\u3002 BREAK \u6307\u4ee4\u4f9b\u8c03\u8bd5\u7cfb\u7edf\u4f7f\u7528\uff0c\u5e94\u7528\u7a0b\u5e8f\u7528\u4e0d\u5230\u3002","title":"MCU\u63a7\u5236\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%92%8CMCU%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/#_3","text":"ATmega328P Datasheet AVR Instruction Set Manual","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/","text":"AVR\u6c47\u7f16\uff08\u4e09\uff09\uff1a\u5bfb\u5740\u65b9\u5f0f \u00b6 AVR\u5177\u6709\u591a\u79cd\u5bfb\u5740\u65b9\u5f0f\uff0c\u5728\u4ecb\u7ecd\u5177\u4f53\u7684\u6c47\u7f16\u6307\u4ee4\u4e4b\u524d\uff0c\u6709\u5fc5\u8981\u5bf9\u5b83\u4eec\u505a\u4e00\u5b9a\u4e86\u89e3\u3002 \u524d\u9762\u4ecb\u7ecd\u8fc7\uff0cAVR\u5c06\u5185\u5b58\u7a7a\u95f4\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\uff1a\u5bc4\u5b58\u5668\u5806\u3001I/O\u7a7a\u95f4\u3001\u6570\u636e\u7a7a\u95f4\u3001\u7a0b\u5e8f\u7a7a\u95f4\u3002\u8fd9\u4e9b\u7a7a\u95f4\u652f\u6301\u7684\u6307\u4ee4\u548c\u5bfb\u5740\u65b9\u5f0f\u90fd\u5404\u4e0d\u76f8\u540c\u3002 \u5bc4\u5b58\u5668\u5806\u7684\u5bfb\u5740\u65b9\u5f0f \u00b6 AVR\u4e2d\u5bc4\u5b58\u5668\u5806\u7684\u5bfb\u5740\u65b9\u5f0f\u5206\u4e3a3\u79cd\uff1a\u7acb\u5373\u5bfb\u5740\u3001\u5355\u5bc4\u5b58\u5668\u5bfb\u5740\u3001\u53cc\u5bc4\u5b58\u5668\u5bfb\u5740\u3002 \u7acb\u5373\u5bfb\u5740 \u00b6 \u6240\u8c13\u7acb\u5373\u5bfb\u5740\uff0c\u5c31\u662f\u6307\u64cd\u4f5c\u6570\u76f4\u63a5\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53ea\u6709 R16 ~ R31 \u5bc4\u5b58\u5668\u652f\u6301\u7acb\u5373\u5bfb\u5740\u3002 \u4f8b\u5982\uff1a 1 ANDI R16 , 0x01 ; R16 <- R16 & 0x01 \u5355\u5bc4\u5b58\u5668\u5bfb\u5740 \u00b6 \u5728\u5355\u5bc4\u5b58\u5668\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5b58\u653e\u5728\u76ee\u7684\u5bc4\u5b58\u5668 Rd \u4e2d\u3002 \u4f8b\u5982: 1 INC R16 ; R16 <- R16 + 1 \u53cc\u5bc4\u5b58\u5668\u5bfb\u5740 \u00b6 \u5728\u53cc\u5bc4\u5b58\u5668\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5206\u522b\u5b58\u653e\u5728\u6e90\u5bc4\u5b58\u5668 Rr \u548c\u76ee\u7684\u5bc4\u5b58\u5668 Rd \u4e2d\u3002 \u4f8b\u5982\uff1a 1 ADD R16 , R17 ; R16 <- R16 + R17 I/O\u7a7a\u95f4\u7684\u5bfb\u5740\u65b9\u5f0f \u00b6 AVR\u4e2dI/O\u7a7a\u95f4\u5177\u6709\u72ec\u7acb\u7684\u5730\u5740\uff0c\u8303\u56f4\u4e3a0x00~0x3F\uff0c\u652f\u6301\u76f4\u63a5\u5bfb\u5740\u548c\u4f4d\u5bfb\u5740\u3002 \u76f4\u63a5\u5bfb\u5740 \u00b6 \u5728\u76f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740 A \u76f4\u63a5\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\u3002 \u4f8b\u5982\uff1a 1 OUT PORTB , R16 ; PORTB <- R16 \u4f4d\u5bfb\u5740 \u00b6 I/O\u7a7a\u95f4\u4e2d\u5730\u5740\u4e3a0x00~0x1F\u7684\u533a\u57df\u652f\u6301\u6309\u4f4d\u8bbf\u95ee\u3002 \u4f8b\u5982\uff1a 1 SBI PORTB , 2 ; PORTB.2 <- 1 \u6570\u636e\u7a7a\u95f4\u7684\u5bfb\u5740\u65b9\u5f0f \u00b6 AVR\u4e2d\u6570\u636e\u7a7a\u95f4\u5177\u67095\u79cd\u5bfb\u5740\u65b9\u5f0f\uff1a\u76f4\u63a5\u5bfb\u5740\u3001\u95f4\u63a5\u5bfb\u5740\u3001\u5e26\u524d\u7f00\u81ea\u51cf\u7684\u95f4\u63a5\u5bfb\u5740\u3001\u5e26\u540e\u7f00\u81ea\u589e\u7684\u95f4\u63a5\u5bfb\u5740\u3001\u5e26\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5bfb\u5740\u3002 \u76f4\u63a5\u5bfb\u5740 \u00b6 \u5728\u76f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\u76f4\u63a5\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\uff0c Rd / Rr \u6307\u5b9a\u76ee\u7684\u5bc4\u5b58\u5668/\u6e90\u5bc4\u5b58\u5668\u3002 \u4f8b\u5982\uff1a 1 LDS R16 , 0X0100 ; R16 <- (0X0100) \u95f4\u63a5\u5bfb\u5740 \u00b6 \u5728\u95f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\u5b58\u653e\u5728 X / Y / Z \u5bc4\u5b58\u5668\u4e2d\u3002 \u4f8b\u5982\uff1a 1 LD R16 , X ; R16 <- (X) \u5e26\u524d\u7f00\u81ea\u51cf\u7684\u95f4\u63a5\u5bfb\u5740 \u00b6 \u5728\u5e26\u524d\u7f00\u81ea\u51cf\u7684\u95f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\u5b58\u653e\u5728 X / Y / Z \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5728\u64cd\u4f5c\u4e4b\u524d X / Y / Z \u5148\u81ea\u51cf\u4e00\u3002 \u4f8b\u5982\uff1a 1 LD R16 , - X ; X <- X - 1, R16 <- (X) \u5e26\u540e\u7f00\u81ea\u589e\u7684\u95f4\u63a5\u5bfb\u5740 \u00b6 \u5728\u5e26\u540e\u7f00\u81ea\u589e\u7684\u95f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\u5b58\u653e\u5728 X / Y / Z \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5728\u64cd\u4f5c\u4e4b\u540e X / Y / Z \u518d\u81ea\u589e\u4e00\u3002 \u4f8b\u5982\uff1a 1 LD R16 , X + ; R16 <- (X), X <- X + 1 \u5e26\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5bfb\u5740 \u00b6 \u5728\u5e26\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\u7531 Y / Z \u5bc4\u5b58\u5668\u548c\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\u7684\u504f\u79fb\u91cf q \u76f8\u52a0\u5f97\u51fa\u3002 \u4f8b\u5982\uff1a 1 LDD R16 , Y + 2 ; R16 <- (Y + 2) \u7a0b\u5e8f\u7a7a\u95f4\u7684\u5bfb\u5740\u65b9\u5f0f \u00b6 AVR\u4e2d\u7a0b\u5e8f\u7a7a\u95f4\u5177\u67095\u79cd\u5bfb\u5740\u65b9\u5f0f\uff1a\u5e38\u91cf\u5bfb\u5740\u3001\u5e26\u540e\u7f00\u81ea\u589e\u7684\u5e38\u91cf\u5bfb\u5740\u3001\u76f4\u63a5\u5bfb\u5740\u3001\u95f4\u63a5\u5bfb\u5740\u3001\u76f8\u5bf9\u5bfb\u5740\uff0c\u524d\u4e24\u79cd\u5bfb\u5740\u65b9\u5f0f\u7528\u4e8e\u8bbf\u95ee\u4f4d\u4e8e\u7a0b\u5e8f\u7a7a\u95f4\u7684\u5e38\u91cf\uff0c\u540e\u4e09\u79cd\u7528\u4e8e\u7a0b\u5e8f\u8df3\u8f6c\u3002 \u5e38\u91cf\u5bfb\u5740 \u00b6 \u5728\u5e38\u91cf\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\uff08\u5b57\u8282\u5730\u5740\uff09\u5b58\u653e\u5728 Z \u5bc4\u5b58\u5668\u4e2d\uff0c Z \u5bc4\u5b58\u5668\u4e2d\u9ad815\u4f4d\u6307\u5b9a\u5b57\u5730\u5740\uff0c\u6700\u4f4e\u4f4d\u4e3a0\u8868\u793a\u8bbf\u95ee\u7684\u662f\u5b57\u7684\u4f4e\u4f4d\u5b57\u8282\uff0c1\u8868\u793a\u8bbf\u95ee\u7684\u662f\u5b57\u7684\u9ad8\u4f4d\u5b57\u8282\u3002 \u4f8b\u5982\uff1a 1 LPM R16 , Z ; R16 <- (Z) \u5e26\u540e\u7f00\u81ea\u589e\u7684\u5e38\u91cf\u5bfb\u5740 \u00b6 \u5728\u5e26\u540e\u7f00\u81ea\u589e\u7684\u5e38\u91cf\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\uff08\u5b57\u8282\u5730\u5740\uff09\u5b58\u653e\u5728 Z \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5728\u64cd\u4f5c\u4e4b\u540e Z \u5bc4\u5b58\u5668\u81ea\u589e\u4e00\u3002 \u4f8b\u5982\uff1a 1 LPM R16 , Z + ; R16 <- (Z), Z <- Z + 1 \u76f4\u63a5\u5bfb\u5740 \u00b6 \u5728\u76f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u7a0b\u5e8f\u63a5\u4e0b\u6765\u7684\u6267\u884c\u5730\u5740\uff08\u5b57\u5730\u5740\uff09 k \u76f4\u63a5\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\u3002 \u4f8b\u5982\uff1a 1 2 3 4 JMP FUNC ; PC <- FUNC ... FUNC: ... \u95f4\u63a5\u5bfb\u5740 \u00b6 \u5728\u95f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u7a0b\u5e8f\u63a5\u4e0b\u6765\u7684\u6267\u884c\u5730\u5740\uff08\u5b57\u5730\u5740\uff09\u5b58\u653e\u5728 Z \u5bc4\u5b58\u5668\u4e2d\u3002 \u4f8b\u5982\uff1a 1 IJMP ; PC <- Z \u76f8\u5bf9\u5bfb\u5740 \u00b6 \u5728\u76f8\u5bf9\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u7a0b\u5e8f\u63a5\u4e0b\u6765\u7684\u6267\u884c\u5730\u5740\uff08\u5b57\u5730\u5740\uff09\u4e3a PC + k + 1\uff0c k \u7684\u8303\u56f4\u4e3a-2048~2047\u3002 \u4f8b\u5982\uff1a 1 2 3 4 RJMP FUNC ; PC <- FUNC \u6c47\u7f16\u5668\u4f1a\u81ea\u52a8\u8ba1\u7b97k\u7684\u503c ... FUNC: ; FUNC\u4e0eRJMP\u6307\u4ee4\u7684\u8ddd\u79bb\u4e0d\u80fd\u8d85\u8fc7-2048~2047 ... \u53c2\u8003\u8d44\u6599 \u00b6 AVR Instruction Set Manual","title":"AVR\u6c47\u7f16\uff08\u4e09\uff09\uff1a\u5bfb\u5740\u65b9\u5f0f"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#avr","text":"AVR\u5177\u6709\u591a\u79cd\u5bfb\u5740\u65b9\u5f0f\uff0c\u5728\u4ecb\u7ecd\u5177\u4f53\u7684\u6c47\u7f16\u6307\u4ee4\u4e4b\u524d\uff0c\u6709\u5fc5\u8981\u5bf9\u5b83\u4eec\u505a\u4e00\u5b9a\u4e86\u89e3\u3002 \u524d\u9762\u4ecb\u7ecd\u8fc7\uff0cAVR\u5c06\u5185\u5b58\u7a7a\u95f4\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\uff1a\u5bc4\u5b58\u5668\u5806\u3001I/O\u7a7a\u95f4\u3001\u6570\u636e\u7a7a\u95f4\u3001\u7a0b\u5e8f\u7a7a\u95f4\u3002\u8fd9\u4e9b\u7a7a\u95f4\u652f\u6301\u7684\u6307\u4ee4\u548c\u5bfb\u5740\u65b9\u5f0f\u90fd\u5404\u4e0d\u76f8\u540c\u3002","title":"AVR\u6c47\u7f16\uff08\u4e09\uff09\uff1a\u5bfb\u5740\u65b9\u5f0f"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_1","text":"AVR\u4e2d\u5bc4\u5b58\u5668\u5806\u7684\u5bfb\u5740\u65b9\u5f0f\u5206\u4e3a3\u79cd\uff1a\u7acb\u5373\u5bfb\u5740\u3001\u5355\u5bc4\u5b58\u5668\u5bfb\u5740\u3001\u53cc\u5bc4\u5b58\u5668\u5bfb\u5740\u3002","title":"\u5bc4\u5b58\u5668\u5806\u7684\u5bfb\u5740\u65b9\u5f0f"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_2","text":"\u6240\u8c13\u7acb\u5373\u5bfb\u5740\uff0c\u5c31\u662f\u6307\u64cd\u4f5c\u6570\u76f4\u63a5\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53ea\u6709 R16 ~ R31 \u5bc4\u5b58\u5668\u652f\u6301\u7acb\u5373\u5bfb\u5740\u3002 \u4f8b\u5982\uff1a 1 ANDI R16 , 0x01 ; R16 <- R16 & 0x01","title":"\u7acb\u5373\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_3","text":"\u5728\u5355\u5bc4\u5b58\u5668\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5b58\u653e\u5728\u76ee\u7684\u5bc4\u5b58\u5668 Rd \u4e2d\u3002 \u4f8b\u5982: 1 INC R16 ; R16 <- R16 + 1","title":"\u5355\u5bc4\u5b58\u5668\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_4","text":"\u5728\u53cc\u5bc4\u5b58\u5668\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5206\u522b\u5b58\u653e\u5728\u6e90\u5bc4\u5b58\u5668 Rr \u548c\u76ee\u7684\u5bc4\u5b58\u5668 Rd \u4e2d\u3002 \u4f8b\u5982\uff1a 1 ADD R16 , R17 ; R16 <- R16 + R17","title":"\u53cc\u5bc4\u5b58\u5668\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#io","text":"AVR\u4e2dI/O\u7a7a\u95f4\u5177\u6709\u72ec\u7acb\u7684\u5730\u5740\uff0c\u8303\u56f4\u4e3a0x00~0x3F\uff0c\u652f\u6301\u76f4\u63a5\u5bfb\u5740\u548c\u4f4d\u5bfb\u5740\u3002","title":"I/O\u7a7a\u95f4\u7684\u5bfb\u5740\u65b9\u5f0f"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_5","text":"\u5728\u76f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740 A \u76f4\u63a5\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\u3002 \u4f8b\u5982\uff1a 1 OUT PORTB , R16 ; PORTB <- R16","title":"\u76f4\u63a5\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_6","text":"I/O\u7a7a\u95f4\u4e2d\u5730\u5740\u4e3a0x00~0x1F\u7684\u533a\u57df\u652f\u6301\u6309\u4f4d\u8bbf\u95ee\u3002 \u4f8b\u5982\uff1a 1 SBI PORTB , 2 ; PORTB.2 <- 1","title":"\u4f4d\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_7","text":"AVR\u4e2d\u6570\u636e\u7a7a\u95f4\u5177\u67095\u79cd\u5bfb\u5740\u65b9\u5f0f\uff1a\u76f4\u63a5\u5bfb\u5740\u3001\u95f4\u63a5\u5bfb\u5740\u3001\u5e26\u524d\u7f00\u81ea\u51cf\u7684\u95f4\u63a5\u5bfb\u5740\u3001\u5e26\u540e\u7f00\u81ea\u589e\u7684\u95f4\u63a5\u5bfb\u5740\u3001\u5e26\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5bfb\u5740\u3002","title":"\u6570\u636e\u7a7a\u95f4\u7684\u5bfb\u5740\u65b9\u5f0f"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_8","text":"\u5728\u76f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\u76f4\u63a5\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\uff0c Rd / Rr \u6307\u5b9a\u76ee\u7684\u5bc4\u5b58\u5668/\u6e90\u5bc4\u5b58\u5668\u3002 \u4f8b\u5982\uff1a 1 LDS R16 , 0X0100 ; R16 <- (0X0100)","title":"\u76f4\u63a5\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_9","text":"\u5728\u95f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\u5b58\u653e\u5728 X / Y / Z \u5bc4\u5b58\u5668\u4e2d\u3002 \u4f8b\u5982\uff1a 1 LD R16 , X ; R16 <- (X)","title":"\u95f4\u63a5\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_10","text":"\u5728\u5e26\u524d\u7f00\u81ea\u51cf\u7684\u95f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\u5b58\u653e\u5728 X / Y / Z \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5728\u64cd\u4f5c\u4e4b\u524d X / Y / Z \u5148\u81ea\u51cf\u4e00\u3002 \u4f8b\u5982\uff1a 1 LD R16 , - X ; X <- X - 1, R16 <- (X)","title":"\u5e26\u524d\u7f00\u81ea\u51cf\u7684\u95f4\u63a5\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_11","text":"\u5728\u5e26\u540e\u7f00\u81ea\u589e\u7684\u95f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\u5b58\u653e\u5728 X / Y / Z \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5728\u64cd\u4f5c\u4e4b\u540e X / Y / Z \u518d\u81ea\u589e\u4e00\u3002 \u4f8b\u5982\uff1a 1 LD R16 , X + ; R16 <- (X), X <- X + 1","title":"\u5e26\u540e\u7f00\u81ea\u589e\u7684\u95f4\u63a5\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_12","text":"\u5728\u5e26\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\u7531 Y / Z \u5bc4\u5b58\u5668\u548c\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\u7684\u504f\u79fb\u91cf q \u76f8\u52a0\u5f97\u51fa\u3002 \u4f8b\u5982\uff1a 1 LDD R16 , Y + 2 ; R16 <- (Y + 2)","title":"\u5e26\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_13","text":"AVR\u4e2d\u7a0b\u5e8f\u7a7a\u95f4\u5177\u67095\u79cd\u5bfb\u5740\u65b9\u5f0f\uff1a\u5e38\u91cf\u5bfb\u5740\u3001\u5e26\u540e\u7f00\u81ea\u589e\u7684\u5e38\u91cf\u5bfb\u5740\u3001\u76f4\u63a5\u5bfb\u5740\u3001\u95f4\u63a5\u5bfb\u5740\u3001\u76f8\u5bf9\u5bfb\u5740\uff0c\u524d\u4e24\u79cd\u5bfb\u5740\u65b9\u5f0f\u7528\u4e8e\u8bbf\u95ee\u4f4d\u4e8e\u7a0b\u5e8f\u7a7a\u95f4\u7684\u5e38\u91cf\uff0c\u540e\u4e09\u79cd\u7528\u4e8e\u7a0b\u5e8f\u8df3\u8f6c\u3002","title":"\u7a0b\u5e8f\u7a7a\u95f4\u7684\u5bfb\u5740\u65b9\u5f0f"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_14","text":"\u5728\u5e38\u91cf\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\uff08\u5b57\u8282\u5730\u5740\uff09\u5b58\u653e\u5728 Z \u5bc4\u5b58\u5668\u4e2d\uff0c Z \u5bc4\u5b58\u5668\u4e2d\u9ad815\u4f4d\u6307\u5b9a\u5b57\u5730\u5740\uff0c\u6700\u4f4e\u4f4d\u4e3a0\u8868\u793a\u8bbf\u95ee\u7684\u662f\u5b57\u7684\u4f4e\u4f4d\u5b57\u8282\uff0c1\u8868\u793a\u8bbf\u95ee\u7684\u662f\u5b57\u7684\u9ad8\u4f4d\u5b57\u8282\u3002 \u4f8b\u5982\uff1a 1 LPM R16 , Z ; R16 <- (Z)","title":"\u5e38\u91cf\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_15","text":"\u5728\u5e26\u540e\u7f00\u81ea\u589e\u7684\u5e38\u91cf\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u64cd\u4f5c\u6570\u5730\u5740\uff08\u5b57\u8282\u5730\u5740\uff09\u5b58\u653e\u5728 Z \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5728\u64cd\u4f5c\u4e4b\u540e Z \u5bc4\u5b58\u5668\u81ea\u589e\u4e00\u3002 \u4f8b\u5982\uff1a 1 LPM R16 , Z + ; R16 <- (Z), Z <- Z + 1","title":"\u5e26\u540e\u7f00\u81ea\u589e\u7684\u5e38\u91cf\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_16","text":"\u5728\u76f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u7a0b\u5e8f\u63a5\u4e0b\u6765\u7684\u6267\u884c\u5730\u5740\uff08\u5b57\u5730\u5740\uff09 k \u76f4\u63a5\u7f16\u7801\u5728\u6307\u4ee4\u4e2d\u3002 \u4f8b\u5982\uff1a 1 2 3 4 JMP FUNC ; PC <- FUNC ... FUNC: ...","title":"\u76f4\u63a5\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_17","text":"\u5728\u95f4\u63a5\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u7a0b\u5e8f\u63a5\u4e0b\u6765\u7684\u6267\u884c\u5730\u5740\uff08\u5b57\u5730\u5740\uff09\u5b58\u653e\u5728 Z \u5bc4\u5b58\u5668\u4e2d\u3002 \u4f8b\u5982\uff1a 1 IJMP ; PC <- Z","title":"\u95f4\u63a5\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_18","text":"\u5728\u76f8\u5bf9\u5bfb\u5740\u65b9\u5f0f\u4e0b\uff0c\u7a0b\u5e8f\u63a5\u4e0b\u6765\u7684\u6267\u884c\u5730\u5740\uff08\u5b57\u5730\u5740\uff09\u4e3a PC + k + 1\uff0c k \u7684\u8303\u56f4\u4e3a-2048~2047\u3002 \u4f8b\u5982\uff1a 1 2 3 4 RJMP FUNC ; PC <- FUNC \u6c47\u7f16\u5668\u4f1a\u81ea\u52a8\u8ba1\u7b97k\u7684\u503c ... FUNC: ; FUNC\u4e0eRJMP\u6307\u4ee4\u7684\u8ddd\u79bb\u4e0d\u80fd\u8d85\u8fc7-2048~2047 ...","title":"\u76f8\u5bf9\u5bfb\u5740"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/#_19","text":"AVR Instruction Set Manual","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAVR%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/","text":"AVR\u6c47\u7f16\uff08\u4e8c\uff09\uff1aAVR\u67b6\u6784\u4ecb\u7ecd \u00b6 ATmega328P\u4ecb\u7ecd \u00b6 ATmega328P\u662fAtmel\u516c\u53f8\uff08\u73b0Microchip\u516c\u53f8\uff09\u63a8\u51fa\u7684\u4e00\u4e2a\u57fa\u4e8eAVR\u67b6\u6784\u7684\u9ad8\u6027\u80fd\u4f4e\u529f\u8017\u5355\u7247\u673a\uff0c\u62e5\u670932KB\u7684Flash\u30011KB\u7684EEPROM\u4ee5\u53ca2KB\u7684SRAM\u7b49\u8d44\u6e90\uff0c\u5177\u4f53\u5982\u4e0b\u8868\uff1a \u8d44\u6e90 \u4e3b\u8981\u7279\u5f81 Flash 32KB SRAM 2048B \u9891\u7387 16MHz EEPROM 1024B \u5b9a\u65f6\u5668 2\u4e2a8bit\uff0c1\u4e2a16bit PWM 6\u901a\u9053 ADC 8\u901a\u905310bit \u6bd4\u8f83\u5668 1 GPIO 23 USART 1 SPI 1 TWI 1 \u770b\u95e8\u72d7 1 RTC 1 \u7535\u538b 0~8MHz @ 2.7~5.5V 0~16MHz @ 4.5~5.5V \u5982\u4e0b\u56fe\u6240\u793a\uff0cATmega328P\u7684AVR\u6838\u5fc3\u901a\u8fc7\u6570\u636e\u603b\u7ebf\u4e0e\u5404\u4e2a\u5916\u8bbe\u76f8\u8fde\uff0c\u53e6\u5916\u4e5f\u53ef\u4ee5\u53d1\u73b0AVR\u91c7\u7528\u7684\u662f\u54c8\u4f5b\u67b6\u6784\uff0cFlash\u548cSRAM\u76f8\u4e92\u72ec\u7acb\uff0c\u901a\u8fc7\u4e0d\u540c\u7684\u603b\u7ebf\u4e0eAVR\u6838\u5fc3\u76f8\u8fde\u3002 AVR\u5185\u5b58\u7a7a\u95f4 \u00b6 AVR\u5185\u6838\u5305\u542b\u4e24\u5757\u5185\u5b58\u7a7a\u95f4\uff1a\u6570\u636e\u7a7a\u95f4\uff08data memory\uff09\u548c\u7a0b\u5e8f\u7a7a\u95f4\uff08program memory\uff09\uff0c\u53e6\u5916\uff0cATmega328P\u8fd8\u5305\u542b\u989d\u5916\u7528\u4e8e\u6570\u636e\u5b58\u50a8\u7684EEPROM\u7a7a\u95f4\uff08EEPROM memory\uff09\u3002 Program Memory \u00b6 ATmega328P\u7684\u7a0b\u5e8f\u6307\u4ee4\u5b58\u50a8\u5728\u7247\u4e0a\u768432KB Flash\u4e2d\uff0c\u7531\u4e8eAVR\u6307\u4ee4\u90fd\u662f16\u4f4d\u621632\u4f4d\u7684\uff0c\u56e0\u6b64Flash\u662f\u4ee516\u4f4d\uff081\u4e2a\u5b57\uff09\u4e3a\u5355\u5143\u7ec4\u7ec7\u7684\uff0c\u537316Kx16bit\uff0c\u5730\u5740\u7a7a\u95f4\u4e3a0x0000~0x3FFF\u3002 ATmega328P\u7684\u7a0b\u5e8f\u7a7a\u95f4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1aApplication\u548cBootloader\u3002Bootloader\u5b58\u653e\u5728\u9ad8\u5730\u5740\u5904\uff0c\u5927\u5c0f\u53ef\u4ee5\u901a\u8fc7fuse\u76f8\u5173\u4f4d\u8fdb\u884c\u914d\u7f6e\uff0c\u6709256/512/1024/2048\u5b574\u79cd\u9009\u62e9\u3002 \u53ef\u4ee5\u901a\u8fc7 LPM \u6307\u4ee4\u8bbf\u95ee\u6574\u4e2a\u7a0b\u5e8f\u7a7a\u95f4\u3002 Data Memory \u00b6 ATmega328P\u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a2303\u5b57\u8282\uff0c\u75314\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a \u5bc4\u5b58\u5668\u5806\uff1a\u5305\u542b32\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u3002 \u901a\u8fc7 MOV / MOVW \u6307\u4ee4\u8bbf\u95ee\uff0c\u5730\u5740\u4e3a0x00~0x1F\u3002 I/O\u7a7a\u95f4\uff1a\u5305\u542b64\u4e2aI/O\u5bc4\u5b58\u5668\u3002 \u901a\u8fc7 IN / OUT \u6307\u4ee4\u8bbf\u95ee\u65f6\uff0cI/O\u7a7a\u95f4\u72ec\u7acb\u7f16\u5740\u52300x00~0x3F\uff1b \u901a\u8fc7 LD / LDS / LDD / ST / STS / STD \u8bbf\u95ee\u65f6\uff0c\u5730\u5740\u4e3aI/O\u5730\u5740+0x20\uff1b I/O\u5730\u5740\u4e3a0x00~0x1F\u7684\u5bc4\u5b58\u5668\u652f\u6301\u6309\u4f4d\u8bbf\u95ee\uff0c\u53ef\u4ee5\u901a\u8fc7 SBI / CBI / SBIS / SBIC \u6307\u4ee4\u8bbf\u95ee\u3002 \u6269\u5c55I/O\u7a7a\u95f4\uff1a\u5305\u542b160\u4e2a\u6269\u5c55I/O\u5bc4\u5b58\u5668\u3002 \u53ea\u80fd\u901a\u8fc7 LD / LDS / LDD / ST / STS / STD \u6307\u4ee4\u8bbf\u95ee\u3002 SRAM\u7a7a\u95f4\uff1a2KB\uff0c\u5730\u5740\u4ece0x0100\u5f00\u59cb\u3002 \u6570\u636e\u7a7a\u95f4\u652f\u63015\u79cd\u5bfb\u5740\u65b9\u5f0f\uff1a \u76f4\u63a5\u5bfb\u5740\uff08direct\uff09\uff1b \u95f4\u63a5\u5bfb\u5740\uff08indirect\uff09\uff1b \u5e26\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5bfb\u5740\uff08indirect with displacement\uff09\uff1b \u5e26\u524d\u7f00\u81ea\u51cf\u7684\u95f4\u63a5\u5bfb\u5740\uff08indirect with pre-decrement\uff09\uff1b \u5e26\u540e\u7f00\u81ea\u589e\u7684\u95f4\u63a5\u5bfb\u5740\uff08indirect with post-increment\uff09\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u53ef\u4ee5\u770b\u51fa\u5bf9SRAM\u7684\u8bbf\u95ee\u9700\u8981\u8017\u8d392\u4e2aCPU\u5468\u671f\u3002 EEPROM Memory \u00b6 ATmega328P\u62e5\u67091KB\u7684EEPROM\u7a7a\u95f4\uff0c\u80fd\u591f\u5bf9\u5176\u8fdb\u884c\u5355\u5b57\u8282\u7684\u8bfb\u5199\u64cd\u4f5c\uff0c\u9700\u8981\u901a\u8fc7 EEARH \u3001 EEARL \u3001 EEDR \u3001 EECR \u5bc4\u5b58\u5668\u8fdb\u884c\u8bbf\u95ee\u3002 AVR\u5185\u6838 \u00b6 \u5982\u4e0b\u56fe\u6240\u793a\uff0cAVR\u5185\u6838\u91c7\u7528\u54c8\u4f5b\u67b6\u6784\uff0c\u7a0b\u5e8f\u7a7a\u95f4\u548c\u6570\u636e\u7a7a\u95f4\u76f8\u4e92\u72ec\u7acb\u3002\u6307\u4ee4\u4ee5\u5355\u7ea7\u6d41\u6c34\u7ebf\u65b9\u5f0f\u6267\u884c\uff0c\u6267\u884c\u4e00\u6761\u6307\u4ee4\u7684\u540c\u65f6\u9884\u53d6\u51fa\u4e0b\u4e00\u6761\u6307\u4ee4\u3002 AVR\u5185\u6838\u7531ALU\uff08\u7b97\u672f\u903b\u8f91\u5355\u5143\uff09\u3001 SREG \uff08\u72b6\u6001\u5bc4\u5b58\u5668\uff09\u3001\u901a\u7528\u5bc4\u5b58\u5668\u5806\u3001 SP \uff08\u6700\u6808\u6307\u9488\uff09\u3001 PC \uff08\u7a0b\u5e8f\u8ba1\u6570\u5668\uff09\u6784\u6210\u3002 ALU\u80fd\u591f\u4ee5\u5355\u5468\u671f\u7684\u65f6\u95f4\u5bf932\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u8fdb\u884c\u7b97\u672f\u3001\u903b\u8f91\u3001\u4f4d\u64cd\u4f5c\uff0c\u4e00\u4e9b\u5b9e\u73b0\u4e2d\u8fd8\u652f\u6301\u4e58\u6cd5\u8fd0\u7b97\u3002 \u901a\u7528\u5bc4\u5b58\u5668\u5806\u652f\u6301\u4ee5\u4e0b4\u79cd\u64cd\u4f5c\uff1a 1\u4e2a8\u4f4d\u64cd\u4f5c\u6570\uff0c1\u4e2a8\u4f4d\u7ed3\u679c\uff1b 2\u4e2a8\u4f4d\u64cd\u4f5c\u6570\uff0c1\u4e2a8\u4f4d\u7ed3\u679c\uff1b 2\u4e2a8\u4f4d\u64cd\u4f5c\u6570\uff0c1\u4e2a16\u4f4d\u7ed3\u679c\uff1b 1\u4e2a16\u4f4d\u64cd\u4f5c\u6570\uff0c1\u4e2a16\u4f4d\u7ed3\u679c\u3002 \u5176\u4e2d\uff0c\u53ea\u6709 R16 \u81f3 R31 \u652f\u6301\u7acb\u5373\u5bfb\u5740\uff0c R26 \u81f3 R31 \u53ef\u4ee5\u4e24\u4e24\u7ec4\u5408\u4e3a\u7d22\u5f15\u5bc4\u5b58\u5668 X \u3001 Y \u3001 Z \uff0c\u4f9b\u95f4\u63a5\u5bfb\u5740\u65f6\u4f7f\u7528\u3002 SREG \uff08\u72b6\u6001\u5bc4\u5b58\u5668\uff09\u5305\u542b8\u4e2a\u6807\u5fd7\u4f4d\uff1a \u6807\u5fd7\u4f4d \u540d\u79f0 \u63cf\u8ff0 I \u4e2d\u65ad\u4f7f\u80fd\u4f4d \u7f6e\u4f4d\u4f7f\u80fd\u4e2d\u65ad\uff0c\u4f7f\u7528 SEL / CLI \u6307\u4ee4\u8bbf\u95ee T \u4f20\u8f93\u4f4d \u4f7f\u7528 BLD / BST \u6307\u4ee4\u8bbf\u95ee H \u534a\u8fdb\u4f4d\u6807\u5fd7 \u5f53bit 3\u5411bit 4\u8fdb\u4f4d\u65f6\u7f6e\u4f4d S \u7b26\u53f7\u4f4d S = N xor V V \u6ea2\u51fa\u6807\u5fd7 \u7ed3\u679c\u8d85\u8fc7\u7b26\u53f7\u6570\u8303\u56f4\u65f6\u7f6e\u4f4d N \u8d1f\u6570\u6807\u5fd7 \u7ed3\u679c\u662f\u8d1f\u6570\u65f6\u7f6e\u4f4d Z \u96f6\u6807\u5fd7 \u7ed3\u679c\u4e3a0\u65f6\u7f6e\u4f4d C \u8fdb\u4f4d\u6807\u5fd7 \u7ed3\u679c\u8d85\u8fc7\u65e0\u7b26\u53f7\u6570\u8303\u56f4\u65f6\u7f6e\u4f4d SP \uff08\u5806\u6808\u6307\u9488\uff09\u4f4d\u4e8eI/O\u7a7a\u95f4\uff0c\u7528\u4e8e\u5b58\u50a8\u5c40\u90e8\u53d8\u91cf\u3001\u4e2d\u65ad\u548c\u5b50\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u3002\u5806\u6808\u4ece\u5730\u5740\u9ad8\u5904\u5f80\u4f4e\u5904\u589e\u957f\uff0c SP \u6307\u5411\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u4f4d\u7f6e\uff08\u5373\u7a7a\u51cf\u6808\uff09\u3002 PC \uff08\u7a0b\u5e8f\u8ba1\u6570\u5668\uff09\u6307\u5411\u4e0b\u4e00\u6761\u6267\u884c\u6307\u4ee4\u7684\u5730\u5740\u3002ATmega328P\u7684 PC \u4e3a14\u4f4d\u5bbd\u5ea6\uff0c\u7531\u4e8eFlash\u5b58\u50a8\u5355\u5143\u662f16\u4f4d\u5bbd\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bfb\u57402^14=16K\u4e2a\u5b57\uff08\u537332KB\uff09\u3002\u4e0a\u7535\u65f6\uff0c PC \u7684\u503c\u4e3a0x0000\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 ATmega328P Datasheet Programming and Interfacing ATMEL's AVRs","title":"AVR\u6c47\u7f16\uff08\u4e8c\uff09\uff1aAVR\u67b6\u6784\u4ecb\u7ecd"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAVR%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#avravr","text":"","title":"AVR\u6c47\u7f16\uff08\u4e8c\uff09\uff1aAVR\u67b6\u6784\u4ecb\u7ecd"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAVR%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#atmega328p","text":"ATmega328P\u662fAtmel\u516c\u53f8\uff08\u73b0Microchip\u516c\u53f8\uff09\u63a8\u51fa\u7684\u4e00\u4e2a\u57fa\u4e8eAVR\u67b6\u6784\u7684\u9ad8\u6027\u80fd\u4f4e\u529f\u8017\u5355\u7247\u673a\uff0c\u62e5\u670932KB\u7684Flash\u30011KB\u7684EEPROM\u4ee5\u53ca2KB\u7684SRAM\u7b49\u8d44\u6e90\uff0c\u5177\u4f53\u5982\u4e0b\u8868\uff1a \u8d44\u6e90 \u4e3b\u8981\u7279\u5f81 Flash 32KB SRAM 2048B \u9891\u7387 16MHz EEPROM 1024B \u5b9a\u65f6\u5668 2\u4e2a8bit\uff0c1\u4e2a16bit PWM 6\u901a\u9053 ADC 8\u901a\u905310bit \u6bd4\u8f83\u5668 1 GPIO 23 USART 1 SPI 1 TWI 1 \u770b\u95e8\u72d7 1 RTC 1 \u7535\u538b 0~8MHz @ 2.7~5.5V 0~16MHz @ 4.5~5.5V \u5982\u4e0b\u56fe\u6240\u793a\uff0cATmega328P\u7684AVR\u6838\u5fc3\u901a\u8fc7\u6570\u636e\u603b\u7ebf\u4e0e\u5404\u4e2a\u5916\u8bbe\u76f8\u8fde\uff0c\u53e6\u5916\u4e5f\u53ef\u4ee5\u53d1\u73b0AVR\u91c7\u7528\u7684\u662f\u54c8\u4f5b\u67b6\u6784\uff0cFlash\u548cSRAM\u76f8\u4e92\u72ec\u7acb\uff0c\u901a\u8fc7\u4e0d\u540c\u7684\u603b\u7ebf\u4e0eAVR\u6838\u5fc3\u76f8\u8fde\u3002","title":"ATmega328P\u4ecb\u7ecd"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAVR%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#avr","text":"AVR\u5185\u6838\u5305\u542b\u4e24\u5757\u5185\u5b58\u7a7a\u95f4\uff1a\u6570\u636e\u7a7a\u95f4\uff08data memory\uff09\u548c\u7a0b\u5e8f\u7a7a\u95f4\uff08program memory\uff09\uff0c\u53e6\u5916\uff0cATmega328P\u8fd8\u5305\u542b\u989d\u5916\u7528\u4e8e\u6570\u636e\u5b58\u50a8\u7684EEPROM\u7a7a\u95f4\uff08EEPROM memory\uff09\u3002","title":"AVR\u5185\u5b58\u7a7a\u95f4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAVR%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#program-memory","text":"ATmega328P\u7684\u7a0b\u5e8f\u6307\u4ee4\u5b58\u50a8\u5728\u7247\u4e0a\u768432KB Flash\u4e2d\uff0c\u7531\u4e8eAVR\u6307\u4ee4\u90fd\u662f16\u4f4d\u621632\u4f4d\u7684\uff0c\u56e0\u6b64Flash\u662f\u4ee516\u4f4d\uff081\u4e2a\u5b57\uff09\u4e3a\u5355\u5143\u7ec4\u7ec7\u7684\uff0c\u537316Kx16bit\uff0c\u5730\u5740\u7a7a\u95f4\u4e3a0x0000~0x3FFF\u3002 ATmega328P\u7684\u7a0b\u5e8f\u7a7a\u95f4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1aApplication\u548cBootloader\u3002Bootloader\u5b58\u653e\u5728\u9ad8\u5730\u5740\u5904\uff0c\u5927\u5c0f\u53ef\u4ee5\u901a\u8fc7fuse\u76f8\u5173\u4f4d\u8fdb\u884c\u914d\u7f6e\uff0c\u6709256/512/1024/2048\u5b574\u79cd\u9009\u62e9\u3002 \u53ef\u4ee5\u901a\u8fc7 LPM \u6307\u4ee4\u8bbf\u95ee\u6574\u4e2a\u7a0b\u5e8f\u7a7a\u95f4\u3002","title":"Program Memory"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAVR%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#data-memory","text":"ATmega328P\u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a2303\u5b57\u8282\uff0c\u75314\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a \u5bc4\u5b58\u5668\u5806\uff1a\u5305\u542b32\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u3002 \u901a\u8fc7 MOV / MOVW \u6307\u4ee4\u8bbf\u95ee\uff0c\u5730\u5740\u4e3a0x00~0x1F\u3002 I/O\u7a7a\u95f4\uff1a\u5305\u542b64\u4e2aI/O\u5bc4\u5b58\u5668\u3002 \u901a\u8fc7 IN / OUT \u6307\u4ee4\u8bbf\u95ee\u65f6\uff0cI/O\u7a7a\u95f4\u72ec\u7acb\u7f16\u5740\u52300x00~0x3F\uff1b \u901a\u8fc7 LD / LDS / LDD / ST / STS / STD \u8bbf\u95ee\u65f6\uff0c\u5730\u5740\u4e3aI/O\u5730\u5740+0x20\uff1b I/O\u5730\u5740\u4e3a0x00~0x1F\u7684\u5bc4\u5b58\u5668\u652f\u6301\u6309\u4f4d\u8bbf\u95ee\uff0c\u53ef\u4ee5\u901a\u8fc7 SBI / CBI / SBIS / SBIC \u6307\u4ee4\u8bbf\u95ee\u3002 \u6269\u5c55I/O\u7a7a\u95f4\uff1a\u5305\u542b160\u4e2a\u6269\u5c55I/O\u5bc4\u5b58\u5668\u3002 \u53ea\u80fd\u901a\u8fc7 LD / LDS / LDD / ST / STS / STD \u6307\u4ee4\u8bbf\u95ee\u3002 SRAM\u7a7a\u95f4\uff1a2KB\uff0c\u5730\u5740\u4ece0x0100\u5f00\u59cb\u3002 \u6570\u636e\u7a7a\u95f4\u652f\u63015\u79cd\u5bfb\u5740\u65b9\u5f0f\uff1a \u76f4\u63a5\u5bfb\u5740\uff08direct\uff09\uff1b \u95f4\u63a5\u5bfb\u5740\uff08indirect\uff09\uff1b \u5e26\u504f\u79fb\u91cf\u7684\u95f4\u63a5\u5bfb\u5740\uff08indirect with displacement\uff09\uff1b \u5e26\u524d\u7f00\u81ea\u51cf\u7684\u95f4\u63a5\u5bfb\u5740\uff08indirect with pre-decrement\uff09\uff1b \u5e26\u540e\u7f00\u81ea\u589e\u7684\u95f4\u63a5\u5bfb\u5740\uff08indirect with post-increment\uff09\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u53ef\u4ee5\u770b\u51fa\u5bf9SRAM\u7684\u8bbf\u95ee\u9700\u8981\u8017\u8d392\u4e2aCPU\u5468\u671f\u3002","title":"Data Memory"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAVR%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#eeprom-memory","text":"ATmega328P\u62e5\u67091KB\u7684EEPROM\u7a7a\u95f4\uff0c\u80fd\u591f\u5bf9\u5176\u8fdb\u884c\u5355\u5b57\u8282\u7684\u8bfb\u5199\u64cd\u4f5c\uff0c\u9700\u8981\u901a\u8fc7 EEARH \u3001 EEARL \u3001 EEDR \u3001 EECR \u5bc4\u5b58\u5668\u8fdb\u884c\u8bbf\u95ee\u3002","title":"EEPROM Memory"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAVR%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#avr_1","text":"\u5982\u4e0b\u56fe\u6240\u793a\uff0cAVR\u5185\u6838\u91c7\u7528\u54c8\u4f5b\u67b6\u6784\uff0c\u7a0b\u5e8f\u7a7a\u95f4\u548c\u6570\u636e\u7a7a\u95f4\u76f8\u4e92\u72ec\u7acb\u3002\u6307\u4ee4\u4ee5\u5355\u7ea7\u6d41\u6c34\u7ebf\u65b9\u5f0f\u6267\u884c\uff0c\u6267\u884c\u4e00\u6761\u6307\u4ee4\u7684\u540c\u65f6\u9884\u53d6\u51fa\u4e0b\u4e00\u6761\u6307\u4ee4\u3002 AVR\u5185\u6838\u7531ALU\uff08\u7b97\u672f\u903b\u8f91\u5355\u5143\uff09\u3001 SREG \uff08\u72b6\u6001\u5bc4\u5b58\u5668\uff09\u3001\u901a\u7528\u5bc4\u5b58\u5668\u5806\u3001 SP \uff08\u6700\u6808\u6307\u9488\uff09\u3001 PC \uff08\u7a0b\u5e8f\u8ba1\u6570\u5668\uff09\u6784\u6210\u3002 ALU\u80fd\u591f\u4ee5\u5355\u5468\u671f\u7684\u65f6\u95f4\u5bf932\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u8fdb\u884c\u7b97\u672f\u3001\u903b\u8f91\u3001\u4f4d\u64cd\u4f5c\uff0c\u4e00\u4e9b\u5b9e\u73b0\u4e2d\u8fd8\u652f\u6301\u4e58\u6cd5\u8fd0\u7b97\u3002 \u901a\u7528\u5bc4\u5b58\u5668\u5806\u652f\u6301\u4ee5\u4e0b4\u79cd\u64cd\u4f5c\uff1a 1\u4e2a8\u4f4d\u64cd\u4f5c\u6570\uff0c1\u4e2a8\u4f4d\u7ed3\u679c\uff1b 2\u4e2a8\u4f4d\u64cd\u4f5c\u6570\uff0c1\u4e2a8\u4f4d\u7ed3\u679c\uff1b 2\u4e2a8\u4f4d\u64cd\u4f5c\u6570\uff0c1\u4e2a16\u4f4d\u7ed3\u679c\uff1b 1\u4e2a16\u4f4d\u64cd\u4f5c\u6570\uff0c1\u4e2a16\u4f4d\u7ed3\u679c\u3002 \u5176\u4e2d\uff0c\u53ea\u6709 R16 \u81f3 R31 \u652f\u6301\u7acb\u5373\u5bfb\u5740\uff0c R26 \u81f3 R31 \u53ef\u4ee5\u4e24\u4e24\u7ec4\u5408\u4e3a\u7d22\u5f15\u5bc4\u5b58\u5668 X \u3001 Y \u3001 Z \uff0c\u4f9b\u95f4\u63a5\u5bfb\u5740\u65f6\u4f7f\u7528\u3002 SREG \uff08\u72b6\u6001\u5bc4\u5b58\u5668\uff09\u5305\u542b8\u4e2a\u6807\u5fd7\u4f4d\uff1a \u6807\u5fd7\u4f4d \u540d\u79f0 \u63cf\u8ff0 I \u4e2d\u65ad\u4f7f\u80fd\u4f4d \u7f6e\u4f4d\u4f7f\u80fd\u4e2d\u65ad\uff0c\u4f7f\u7528 SEL / CLI \u6307\u4ee4\u8bbf\u95ee T \u4f20\u8f93\u4f4d \u4f7f\u7528 BLD / BST \u6307\u4ee4\u8bbf\u95ee H \u534a\u8fdb\u4f4d\u6807\u5fd7 \u5f53bit 3\u5411bit 4\u8fdb\u4f4d\u65f6\u7f6e\u4f4d S \u7b26\u53f7\u4f4d S = N xor V V \u6ea2\u51fa\u6807\u5fd7 \u7ed3\u679c\u8d85\u8fc7\u7b26\u53f7\u6570\u8303\u56f4\u65f6\u7f6e\u4f4d N \u8d1f\u6570\u6807\u5fd7 \u7ed3\u679c\u662f\u8d1f\u6570\u65f6\u7f6e\u4f4d Z \u96f6\u6807\u5fd7 \u7ed3\u679c\u4e3a0\u65f6\u7f6e\u4f4d C \u8fdb\u4f4d\u6807\u5fd7 \u7ed3\u679c\u8d85\u8fc7\u65e0\u7b26\u53f7\u6570\u8303\u56f4\u65f6\u7f6e\u4f4d SP \uff08\u5806\u6808\u6307\u9488\uff09\u4f4d\u4e8eI/O\u7a7a\u95f4\uff0c\u7528\u4e8e\u5b58\u50a8\u5c40\u90e8\u53d8\u91cf\u3001\u4e2d\u65ad\u548c\u5b50\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u3002\u5806\u6808\u4ece\u5730\u5740\u9ad8\u5904\u5f80\u4f4e\u5904\u589e\u957f\uff0c SP \u6307\u5411\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u4f4d\u7f6e\uff08\u5373\u7a7a\u51cf\u6808\uff09\u3002 PC \uff08\u7a0b\u5e8f\u8ba1\u6570\u5668\uff09\u6307\u5411\u4e0b\u4e00\u6761\u6267\u884c\u6307\u4ee4\u7684\u5730\u5740\u3002ATmega328P\u7684 PC \u4e3a14\u4f4d\u5bbd\u5ea6\uff0c\u7531\u4e8eFlash\u5b58\u50a8\u5355\u5143\u662f16\u4f4d\u5bbd\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bfb\u57402^14=16K\u4e2a\u5b57\uff08\u537332KB\uff09\u3002\u4e0a\u7535\u65f6\uff0c PC \u7684\u503c\u4e3a0x0000\u3002","title":"AVR\u5185\u6838"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAVR%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#_1","text":"ATmega328P Datasheet Programming and Interfacing ATMEL's AVRs","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/","text":"AVR\u6c47\u7f16\uff08\u4e94\uff09\uff1a\u7b97\u672f\u548c\u903b\u8f91\u6307\u4ee4 \u00b6 \u7b97\u672f\u8fd0\u7b97\u6307\u4ee4 \u00b6 AVR\u4e2d\u5bf9\u4e8e\u7b97\u672f\u8fd0\u7b97\u63d0\u4f9b\u4e86\u52a0\u6cd5\u3001\u51cf\u6cd5\u548c\u4e58\u6cd5\u6307\u4ee4\uff0c\u6ca1\u6709\u9664\u6cd5\u6307\u4ee4\u3002 ADD \u00b6 ADD \u6307\u4ee4\u7528\u4e8e\u6267\u884c\u52a0\u6cd5\u64cd\u4f5c\uff0c\u76f8\u5173\u7684\u53d8\u4f53\u6307\u4ee4\u6709\uff1a\u4e00\u822c\u52a0\u6cd5 ADD \u3001\u5e26\u8fdb\u4f4d\u52a0\u6cd5 ADC \u300116\u4f4d\u7acb\u5373\u6570\u52a0\u6cd5 ADIW \u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 LDI R16 , 0x01 ; R16 = 0x01 LDI R17 , 0x02 ; R17 = 0x02 ADD R16 , R17 ; R16 = 0x03 SEC ; C = 1 ADC R16 , R17 ; R16 = 0x06, C = 0 LDI R25 , 0x0F ; R25 = 0x0F LDI R24 , 0xF0 ; R24 = 0xF0 ADIW R24 , 0x10 ; R25:R24 = 0x1000 \u6ce8\u610f\uff1aAVR\u4e0d\u652f\u63018\u4f4d\u6570\u7684\u7acb\u5373\u6570\u52a0\u6cd5\uff0c\u5373\u6ca1\u6709 ADDI / ADCI \u8fd9\u6837\u7684\u6307\u4ee4\uff01 SUB \u00b6 SUB \u6307\u4ee4\u7528\u4e8e\u6267\u884c\u51cf\u6cd5\u64cd\u4f5c\uff0c\u76f8\u5173\u7684\u53d8\u4f53\u6307\u4ee4\u6709\uff1a\u4e00\u822c\u51cf\u6cd5 SUB \u3001\u7acb\u5373\u6570\u51cf\u6cd5 SUBI \u3001\u5e26\u8fdb\u4f4d\u7684\u51cf\u6cd5 SUBC \u3001\u5e26\u8fdb\u4f4d\u7684\u7acb\u5373\u6570\u51cf\u6cd5 SBCI \u300116\u4f4d\u7acb\u5373\u6570\u51cf\u6cd5 SBIW \u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 LDI R16 , 0x81 ; R16 = 0x81 LDI R17 , 0x80 ; R17 = 0x80 SUB R16 , R17 ; R16 = 0x01 SUBI R17 , 0x10 ; R17 = 0x70 SEC ; C = 1 LDI R16 , 0x80 ; R16 = 0x80 SBC R16 , R17 ; R16 = 0x0F, C = 0 SEC ; C = 1 SBCI R16 , 0x02 ; R16 = 0x0C, C = 0 LDI R25 , 0x02 ; R25 = 0x02 LDI R24 , 0x03 ; R24 = 0x03 SBIW R24 , 0x04 ; R25:R24 = 0x01FF INC / DEC \u00b6 INC \u6307\u4ee4\u7528\u4e8e\u6267\u884c\u52a0\u4e00\u64cd\u4f5c\uff0c DEC \u6307\u4ee4\u7528\u4e8e\u6267\u884c\u51cf\u4e00\u64cd\u4f5c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e24\u6761\u6307\u4ee4\u90fd\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d C \u3002 \u4f8b\u5982\uff1a 1 2 3 LDI R16 , 0x7F ; R16 = 0x7F INC R16 ; R16 = 0x80 DEC R16 ; R16 = 0x7F MUL \u00b6 MUL \u6307\u4ee4\u7528\u4e8e\u6267\u884c\u4e58\u6cd5\u64cd\u4f5c\uff0c\u8ba1\u7b97\u7ed3\u679c\u5b58\u653e\u5728 R0 \u548c R1 \u5bc4\u5b58\u5668\u4e2d\u3002\u9ed8\u8ba4\u6267\u884c\u7684\u662f\u65e0\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u540e\u7f00\u5e26 S \u8868\u793a\u6267\u884c\u7684\u662f\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u540e\u7f00\u5e26 SU \u8868\u793a\u6267\u884c\u7684\u662f\u7b26\u53f7\u6570\u4e0e\u65e0\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u524d\u7f00\u5e26 F \u8868\u793a\u6267\u884c\u5206\u6570\u4e58\u6cd5\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 LDI R16 , 0xFE ; R16 = 0xFE (-2/254) LDI R17 , 0x03 ; R17 = 0x03 (3) MUL R16 , R17 ; R1:R0 = 0x02FA (762) MULS R16 , R17 ; R1:R0 = 0xFFFA (-6) MULSU R16 , R17 ; R1:R0 = 0xFFFA (-6) FMUL R16 , R17 ; R1:R0 = 0x05F4 (1524) FMULS R16 , R17 ; R1:R0 = 0xFFF4 (-12) FMULSU R16 , R17 ; R1:R0 = 0xFFF4 (-12) \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4 \u00b6 AND / OR / EOR \u00b6 AND \u7528\u4e8e\u6267\u884c\u201c\u4e0e\u201d\u64cd\u4f5c\uff0c OR \u7528\u4e8e\u6267\u884c\u201c\u6216\u201d\u64cd\u4f5c\uff0c EOR \u7528\u4e8e\u6267\u884c\u201c\u5f02\u6216\u201d\u64cd\u4f5c\uff0c\u540e\u7f00\u5e26 I \u8868\u793a\u64cd\u4f5c\u6570\u662f\u7acb\u5373\u6570\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 LDI R16 , 0xAA ; R16 = 0xAA LDI R17 , 0x0F ; R17 = 0x0F AND R16 , R17 ; R16 = 0x0A ANDI R16 , 0x03 ; R16 = 0x02 OR R16 , R17 ; R16 = 0x0F ORI R16 , 0xAA ; R16 = 0xAF EOR R16 , R17 ; R16 = 0xA0 \u6ce8\u610f\uff1aAVR\u4e2d\u201c\u5f02\u6216\u201d\u64cd\u4f5c\u4e0d\u652f\u6301\u7acb\u5373\u6570\uff0c\u5373\u6ca1\u6709 EORI \u8fd9\u6837\u7684\u6307\u4ee4\uff01 COM / NEG \u00b6 COM \u6307\u4ee4\u7528\u4e8e\u8ba1\u7b97\u53cd\u7801\uff08\u5bf9\u539f\u7801\u53d6\u53cd\uff09\uff0c NEG \u6307\u4ee4\u7528\u4e8e\u8ba1\u7b97\u8865\u7801\uff08\u5bf9\u539f\u7801\u53d6\u53cd\u52a0\u4e00\uff09\u3002 \u4f8b\u5982\uff1a 1 2 3 LDI R16 , 0xA5 ; R16 = 0xA5 COM R16 ; R16 = 0x5A NEG R16 ; R16 = 0xA6 SBR / CBR \u00b6 SER \u6307\u4ee4\u7528\u4e8e\u6839\u636e\u63a9\u7801 K \u8bbe\u7f6e\u5bc4\u5b58\u5668\u4e2d\u7684\u67d0\u4e9b\u4f4d\uff0c\u4e0e ORI \u6307\u4ee4\u4f5c\u7528\u76f8\u540c\u3002 CBR \u6307\u4ee4\u7528\u4e8e\u6839\u636e\u63a9\u7801 K \u6e05\u9664\u5bc4\u5b58\u5668\u4e2d\u7684\u67d0\u4e9b\u4f4d\uff0c\u5373\u6267\u884c\u201c\u4e0e\u975e\u201d\u64cd\u4f5c\u3002 1 2 3 LDI R16 , 0x0F ; R16 = 0x0F SBR R16 , 0x55 ; R16 = 0x5F CBR R16 , 0x55 ; R16 = 0x0A TST / CLR / SER \u00b6 TST \u6307\u4ee4\u7528\u4e8e\u6d4b\u8bd5\u5bc4\u5b58\u5668\u7684\u503c\u662f\u5426\u662f\u96f6\u6216\u8005\u8d1f\u6570\uff0c CLR \u6307\u4ee4\u5c06\u5bc4\u5b58\u5668\u503c\u8bbe\u4e3a0\uff0c SER \u6307\u4ee4\u5c06\u5bc4\u5b58\u5668\u503c\u8bbe\u4e3a0xFF\u3002 \u4f8b\u5982\uff1a 1 2 3 4 LDI R16 , 0xAA ; R16 = 0xAA TST R16 ; S = 1, V = 0, N = 1, Z = 0 CLR R16 ; R16 = 0, S = 0, V = 0, N = 0, Z = 1 SER R16 ; R16 = 0xFF \u72b6\u6001\u6807\u5fd7\u4f4d \u00b6 \u548c\u4e0a\u4e00\u7bc7\u4ecb\u7ecd\u7684\u6570\u636e\u4f20\u9001\u6307\u4ee4\u4e0d\u540c\uff0c\u7b97\u672f\u548c\u903b\u8f91\u6307\u4ee4\u4f1a\u6539\u53d8 SREG \u5bc4\u5b58\u5668\u4e2d\u7684\u6807\u5fd7\u4f4d\uff0c\u4e0b\u9762\u4ecb\u7ecd\u5176\u4e2d\u6700\u5e38\u7528\u76844\u4e2a\uff1a Z \u3001 N \u3001 V \u3001 C \u3002 Z \u6807\u5fd7\u4f4d \u00b6 Z \u6807\u5fd7\u4f4d\u6307\u793a\u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u4e3a0\uff0c\u5f53\u7ed3\u679c\u4e3a0\u65f6\u7f6e\u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 3 LDI R16 , 5 ; Z = ? SUBI R16 , 2 ; result = 3, Z = 0 SUBI R16 , 3 ; result = 2, Z = 1 N \u6807\u5fd7\u4f4d \u00b6 N \u6807\u5fd7\u4f4d\u6307\u793a\u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u4e3a\u8d1f\u6570\uff0c\u5f53\u7ed3\u679c\u5c0f\u4e8e0\u65f6\u7f6e\u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 LDI R16 , 1 ; N = ?, Z = ? LDI R17 , 2 ; N = ?, Z = ? ADD R16 , R17 ; result = 3, N = 0, Z = 0 SUBI R16 , 3 ; result = 0, N = 0, Z = 1 SUBI R16 , 1 ; result = -1, N = 1, Z = 0 C / V \u6807\u5fd7\u4f4d \u00b6 C \u6807\u5fd7\u4f4d\u6307\u793a\u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u8d85\u8fc7\u65e0\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u5f53\u7ed3\u679c\u8d85\u8fc7[0, 255]\u65f6\u7f6e\u4f4d\u3002 V \u6807\u5fd7\u4f4d\u6307\u793a\u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u8d85\u8fc7\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u5f53\u7ed3\u679c\u8d85\u8fc7[-128, 127]\u65f6\u7f6e\u4f4d\u3002 \u6bd4\u5982\uff0c\u5bf9\u4e8e0x7F+0x01=0x80\uff0c\u4ece\u65e0\u7b26\u53f7\u6570\u89d2\u5ea6\u770b\uff0c\u5c31\u662f127+1=128\uff0c\u6ca1\u6709\u8d85\u8fc7\u65e0\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u6545 C \u4e3a0\u3002\u4ece\u7b26\u53f7\u6570\u89d2\u5ea6\u770b\uff0c127+1=128(-128)\uff0c\u8d85\u8fc7\u4e86\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u6545 V \u4e3a1\u3002 \u518d\u6bd4\u5982\uff0c\u5bf9\u4e8e0xFE+0x02=0x00\uff0c\u4ece\u65e0\u7b26\u53f7\u6570\u89d2\u5ea6\u770b\uff0c\u4e3a254+2=256(0)\uff0c\u8d85\u8fc7\u4e86\u65e0\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u6545 C \u4e3a1\u3002\u4ece\u7b26\u53f7\u6570\u89d2\u5ea6\u770b\uff0c-2+2=0\uff0c\u6ca1\u6709\u8d85\u8fc7\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u6545 V \u4e3a0\u3002 \u66f4\u591a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 LDI R17 , 4 ; N = ?, Z = ?, V = ?, C = ? LDI R18 , 2 ; N = ?, Z = ?, V = ?, C = ? LDI R19 , 1 ; N = ?, Z = ?, V = ?, C = ? LDI R16 , 250 ; N = ?, Z = ?, V = ?, C = ? ADD R16 , R17 ; result = 0xFE/-2/254, N = 1, Z = 0, V = 0, C = 0 ADD R16 , R18 ; result = 0x00/0/256(0), N = 0, Z = 1, V = 0, C = 1 ADD R16 , R19 ; result = 0x01/1/1, N = 0, Z = 0, V = 0, C = 0 SUBI R16 , 2 ; result = 0xFF/-1/-1(255), N = 1, Z = 0, V = 0, C = 1 \u53c2\u8003\u8d44\u6599 \u00b6 ATmega328P Datasheet AVR Instruction Set Manual Programming and Interfacing ATMEL's AVRs","title":"AVR\u6c47\u7f16\uff08\u4e94\uff09\uff1a\u7b97\u672f\u548c\u903b\u8f91\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#avr","text":"","title":"AVR\u6c47\u7f16\uff08\u4e94\uff09\uff1a\u7b97\u672f\u548c\u903b\u8f91\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#_1","text":"AVR\u4e2d\u5bf9\u4e8e\u7b97\u672f\u8fd0\u7b97\u63d0\u4f9b\u4e86\u52a0\u6cd5\u3001\u51cf\u6cd5\u548c\u4e58\u6cd5\u6307\u4ee4\uff0c\u6ca1\u6709\u9664\u6cd5\u6307\u4ee4\u3002","title":"\u7b97\u672f\u8fd0\u7b97\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#add","text":"ADD \u6307\u4ee4\u7528\u4e8e\u6267\u884c\u52a0\u6cd5\u64cd\u4f5c\uff0c\u76f8\u5173\u7684\u53d8\u4f53\u6307\u4ee4\u6709\uff1a\u4e00\u822c\u52a0\u6cd5 ADD \u3001\u5e26\u8fdb\u4f4d\u52a0\u6cd5 ADC \u300116\u4f4d\u7acb\u5373\u6570\u52a0\u6cd5 ADIW \u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 LDI R16 , 0x01 ; R16 = 0x01 LDI R17 , 0x02 ; R17 = 0x02 ADD R16 , R17 ; R16 = 0x03 SEC ; C = 1 ADC R16 , R17 ; R16 = 0x06, C = 0 LDI R25 , 0x0F ; R25 = 0x0F LDI R24 , 0xF0 ; R24 = 0xF0 ADIW R24 , 0x10 ; R25:R24 = 0x1000 \u6ce8\u610f\uff1aAVR\u4e0d\u652f\u63018\u4f4d\u6570\u7684\u7acb\u5373\u6570\u52a0\u6cd5\uff0c\u5373\u6ca1\u6709 ADDI / ADCI \u8fd9\u6837\u7684\u6307\u4ee4\uff01","title":"ADD"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#sub","text":"SUB \u6307\u4ee4\u7528\u4e8e\u6267\u884c\u51cf\u6cd5\u64cd\u4f5c\uff0c\u76f8\u5173\u7684\u53d8\u4f53\u6307\u4ee4\u6709\uff1a\u4e00\u822c\u51cf\u6cd5 SUB \u3001\u7acb\u5373\u6570\u51cf\u6cd5 SUBI \u3001\u5e26\u8fdb\u4f4d\u7684\u51cf\u6cd5 SUBC \u3001\u5e26\u8fdb\u4f4d\u7684\u7acb\u5373\u6570\u51cf\u6cd5 SBCI \u300116\u4f4d\u7acb\u5373\u6570\u51cf\u6cd5 SBIW \u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 LDI R16 , 0x81 ; R16 = 0x81 LDI R17 , 0x80 ; R17 = 0x80 SUB R16 , R17 ; R16 = 0x01 SUBI R17 , 0x10 ; R17 = 0x70 SEC ; C = 1 LDI R16 , 0x80 ; R16 = 0x80 SBC R16 , R17 ; R16 = 0x0F, C = 0 SEC ; C = 1 SBCI R16 , 0x02 ; R16 = 0x0C, C = 0 LDI R25 , 0x02 ; R25 = 0x02 LDI R24 , 0x03 ; R24 = 0x03 SBIW R24 , 0x04 ; R25:R24 = 0x01FF","title":"SUB"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#inc-dec","text":"INC \u6307\u4ee4\u7528\u4e8e\u6267\u884c\u52a0\u4e00\u64cd\u4f5c\uff0c DEC \u6307\u4ee4\u7528\u4e8e\u6267\u884c\u51cf\u4e00\u64cd\u4f5c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e24\u6761\u6307\u4ee4\u90fd\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d C \u3002 \u4f8b\u5982\uff1a 1 2 3 LDI R16 , 0x7F ; R16 = 0x7F INC R16 ; R16 = 0x80 DEC R16 ; R16 = 0x7F","title":"INC / DEC"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#mul","text":"MUL \u6307\u4ee4\u7528\u4e8e\u6267\u884c\u4e58\u6cd5\u64cd\u4f5c\uff0c\u8ba1\u7b97\u7ed3\u679c\u5b58\u653e\u5728 R0 \u548c R1 \u5bc4\u5b58\u5668\u4e2d\u3002\u9ed8\u8ba4\u6267\u884c\u7684\u662f\u65e0\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u540e\u7f00\u5e26 S \u8868\u793a\u6267\u884c\u7684\u662f\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u540e\u7f00\u5e26 SU \u8868\u793a\u6267\u884c\u7684\u662f\u7b26\u53f7\u6570\u4e0e\u65e0\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u524d\u7f00\u5e26 F \u8868\u793a\u6267\u884c\u5206\u6570\u4e58\u6cd5\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 LDI R16 , 0xFE ; R16 = 0xFE (-2/254) LDI R17 , 0x03 ; R17 = 0x03 (3) MUL R16 , R17 ; R1:R0 = 0x02FA (762) MULS R16 , R17 ; R1:R0 = 0xFFFA (-6) MULSU R16 , R17 ; R1:R0 = 0xFFFA (-6) FMUL R16 , R17 ; R1:R0 = 0x05F4 (1524) FMULS R16 , R17 ; R1:R0 = 0xFFF4 (-12) FMULSU R16 , R17 ; R1:R0 = 0xFFF4 (-12)","title":"MUL"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#_2","text":"","title":"\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#and-or-eor","text":"AND \u7528\u4e8e\u6267\u884c\u201c\u4e0e\u201d\u64cd\u4f5c\uff0c OR \u7528\u4e8e\u6267\u884c\u201c\u6216\u201d\u64cd\u4f5c\uff0c EOR \u7528\u4e8e\u6267\u884c\u201c\u5f02\u6216\u201d\u64cd\u4f5c\uff0c\u540e\u7f00\u5e26 I \u8868\u793a\u64cd\u4f5c\u6570\u662f\u7acb\u5373\u6570\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 LDI R16 , 0xAA ; R16 = 0xAA LDI R17 , 0x0F ; R17 = 0x0F AND R16 , R17 ; R16 = 0x0A ANDI R16 , 0x03 ; R16 = 0x02 OR R16 , R17 ; R16 = 0x0F ORI R16 , 0xAA ; R16 = 0xAF EOR R16 , R17 ; R16 = 0xA0 \u6ce8\u610f\uff1aAVR\u4e2d\u201c\u5f02\u6216\u201d\u64cd\u4f5c\u4e0d\u652f\u6301\u7acb\u5373\u6570\uff0c\u5373\u6ca1\u6709 EORI \u8fd9\u6837\u7684\u6307\u4ee4\uff01","title":"AND / OR / EOR"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#com-neg","text":"COM \u6307\u4ee4\u7528\u4e8e\u8ba1\u7b97\u53cd\u7801\uff08\u5bf9\u539f\u7801\u53d6\u53cd\uff09\uff0c NEG \u6307\u4ee4\u7528\u4e8e\u8ba1\u7b97\u8865\u7801\uff08\u5bf9\u539f\u7801\u53d6\u53cd\u52a0\u4e00\uff09\u3002 \u4f8b\u5982\uff1a 1 2 3 LDI R16 , 0xA5 ; R16 = 0xA5 COM R16 ; R16 = 0x5A NEG R16 ; R16 = 0xA6","title":"COM / NEG"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#sbr-cbr","text":"SER \u6307\u4ee4\u7528\u4e8e\u6839\u636e\u63a9\u7801 K \u8bbe\u7f6e\u5bc4\u5b58\u5668\u4e2d\u7684\u67d0\u4e9b\u4f4d\uff0c\u4e0e ORI \u6307\u4ee4\u4f5c\u7528\u76f8\u540c\u3002 CBR \u6307\u4ee4\u7528\u4e8e\u6839\u636e\u63a9\u7801 K \u6e05\u9664\u5bc4\u5b58\u5668\u4e2d\u7684\u67d0\u4e9b\u4f4d\uff0c\u5373\u6267\u884c\u201c\u4e0e\u975e\u201d\u64cd\u4f5c\u3002 1 2 3 LDI R16 , 0x0F ; R16 = 0x0F SBR R16 , 0x55 ; R16 = 0x5F CBR R16 , 0x55 ; R16 = 0x0A","title":"SBR / CBR"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#tst-clr-ser","text":"TST \u6307\u4ee4\u7528\u4e8e\u6d4b\u8bd5\u5bc4\u5b58\u5668\u7684\u503c\u662f\u5426\u662f\u96f6\u6216\u8005\u8d1f\u6570\uff0c CLR \u6307\u4ee4\u5c06\u5bc4\u5b58\u5668\u503c\u8bbe\u4e3a0\uff0c SER \u6307\u4ee4\u5c06\u5bc4\u5b58\u5668\u503c\u8bbe\u4e3a0xFF\u3002 \u4f8b\u5982\uff1a 1 2 3 4 LDI R16 , 0xAA ; R16 = 0xAA TST R16 ; S = 1, V = 0, N = 1, Z = 0 CLR R16 ; R16 = 0, S = 0, V = 0, N = 0, Z = 1 SER R16 ; R16 = 0xFF","title":"TST / CLR / SER"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#_3","text":"\u548c\u4e0a\u4e00\u7bc7\u4ecb\u7ecd\u7684\u6570\u636e\u4f20\u9001\u6307\u4ee4\u4e0d\u540c\uff0c\u7b97\u672f\u548c\u903b\u8f91\u6307\u4ee4\u4f1a\u6539\u53d8 SREG \u5bc4\u5b58\u5668\u4e2d\u7684\u6807\u5fd7\u4f4d\uff0c\u4e0b\u9762\u4ecb\u7ecd\u5176\u4e2d\u6700\u5e38\u7528\u76844\u4e2a\uff1a Z \u3001 N \u3001 V \u3001 C \u3002","title":"\u72b6\u6001\u6807\u5fd7\u4f4d"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#z","text":"Z \u6807\u5fd7\u4f4d\u6307\u793a\u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u4e3a0\uff0c\u5f53\u7ed3\u679c\u4e3a0\u65f6\u7f6e\u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 3 LDI R16 , 5 ; Z = ? SUBI R16 , 2 ; result = 3, Z = 0 SUBI R16 , 3 ; result = 2, Z = 1","title":"Z \u6807\u5fd7\u4f4d"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#n","text":"N \u6807\u5fd7\u4f4d\u6307\u793a\u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u4e3a\u8d1f\u6570\uff0c\u5f53\u7ed3\u679c\u5c0f\u4e8e0\u65f6\u7f6e\u4f4d\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 LDI R16 , 1 ; N = ?, Z = ? LDI R17 , 2 ; N = ?, Z = ? ADD R16 , R17 ; result = 3, N = 0, Z = 0 SUBI R16 , 3 ; result = 0, N = 0, Z = 1 SUBI R16 , 1 ; result = -1, N = 1, Z = 0","title":"N \u6807\u5fd7\u4f4d"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#c-v","text":"C \u6807\u5fd7\u4f4d\u6307\u793a\u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u8d85\u8fc7\u65e0\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u5f53\u7ed3\u679c\u8d85\u8fc7[0, 255]\u65f6\u7f6e\u4f4d\u3002 V \u6807\u5fd7\u4f4d\u6307\u793a\u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u8d85\u8fc7\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u5f53\u7ed3\u679c\u8d85\u8fc7[-128, 127]\u65f6\u7f6e\u4f4d\u3002 \u6bd4\u5982\uff0c\u5bf9\u4e8e0x7F+0x01=0x80\uff0c\u4ece\u65e0\u7b26\u53f7\u6570\u89d2\u5ea6\u770b\uff0c\u5c31\u662f127+1=128\uff0c\u6ca1\u6709\u8d85\u8fc7\u65e0\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u6545 C \u4e3a0\u3002\u4ece\u7b26\u53f7\u6570\u89d2\u5ea6\u770b\uff0c127+1=128(-128)\uff0c\u8d85\u8fc7\u4e86\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u6545 V \u4e3a1\u3002 \u518d\u6bd4\u5982\uff0c\u5bf9\u4e8e0xFE+0x02=0x00\uff0c\u4ece\u65e0\u7b26\u53f7\u6570\u89d2\u5ea6\u770b\uff0c\u4e3a254+2=256(0)\uff0c\u8d85\u8fc7\u4e86\u65e0\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u6545 C \u4e3a1\u3002\u4ece\u7b26\u53f7\u6570\u89d2\u5ea6\u770b\uff0c-2+2=0\uff0c\u6ca1\u6709\u8d85\u8fc7\u7b26\u53f7\u6570\u8303\u56f4\uff0c\u6545 V \u4e3a0\u3002 \u66f4\u591a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 LDI R17 , 4 ; N = ?, Z = ?, V = ?, C = ? LDI R18 , 2 ; N = ?, Z = ?, V = ?, C = ? LDI R19 , 1 ; N = ?, Z = ?, V = ?, C = ? LDI R16 , 250 ; N = ?, Z = ?, V = ?, C = ? ADD R16 , R17 ; result = 0xFE/-2/254, N = 1, Z = 0, V = 0, C = 0 ADD R16 , R18 ; result = 0x00/0/256(0), N = 0, Z = 1, V = 0, C = 1 ADD R16 , R19 ; result = 0x01/1/1, N = 0, Z = 0, V = 0, C = 0 SUBI R16 , 2 ; result = 0xFF/-1/-1(255), N = 1, Z = 0, V = 0, C = 1","title":"C / V \u6807\u5fd7\u4f4d"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/#_4","text":"ATmega328P Datasheet AVR Instruction Set Manual Programming and Interfacing ATMEL's AVRs","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4/","text":"AVR\u6c47\u7f16\uff08\u516d\uff09\uff1a\u5206\u652f\u6307\u4ee4 \u00b6 \u5206\u652f\u6307\u4ee4\u7528\u4e8e\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\uff0c\u5206\u4e3a\u65e0\u6761\u4ef6\u5206\u652f\u548c\u6761\u4ef6\u5206\u652f\u4e24\u7c7b\u3002 \u65e0\u6761\u4ef6\u5206\u652f\u6307\u4ee4 \u00b6 JMP \u00b6 JMP \u6307\u4ee4\u7528\u4e8e\u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u7c7b\u4f3c\u4e8eC\u4e2d\u7684 goto \u5173\u952e\u5b57\uff0c JMP \u6307\u4ee4\u7684\u8df3\u8f6c\u8303\u56f4\u4e3a[0, 4M-1]\u5b57\u3002 RJMP \u6307\u4ee4\u7528\u4e8e\u76f8\u5bf9\u8df3\u8f6c\uff0c\u8df3\u8f6c\u8303\u56f4\u4e3a\u5f53\u524d\u4f4d\u7f6e[-2K, 2K-1]\u5b57\u3002 IJMP \u6307\u4ee4\u7528\u4e8e\u95f4\u63a5\u8df3\u8f6c\uff0c\u8df3\u8f6c\u7684\u76ee\u7684\u5730\u5740\u5b58\u653e\u5728 Z \u5bc4\u5b58\u5668\u4e2d\uff08\u8bb0\u4f4f\u5355\u4f4d\u662f\u5b57\uff09\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 JMP f2 ; \u8df3\u8f6c\u5230f2 f1: RJMP f3 ; \u8df3\u8f6c\u5230f3 f2: LDI ZL , lo8 ( f1 ) LDI ZH , hi8 ( f1 ) ; Z = f1 CLC ROR ZH ROR ZL ; Z = Z >> 1 IJMP ; \u8df3\u8f6c\u5230f1 f3: RJMP f2 ; \u8df3\u8f6c\u5230f2 \u6ce8\u610f\uff1a\u5b9e\u6d4b\u5728GNU\u6c47\u7f16\u4e0b\uff0c IJMP \u6307\u4ee4\u4e2d\u4e0d\u80fd\u76f4\u63a5\u628a\u6807\u7b7e\u8d4b\u503c\u7ed9 Z \u5bc4\u5b58\u5668\uff0c\u56e0\u4e3a\u6807\u7b7e\u8868\u793a\u7684\u5730\u5740\u7684\u5355\u4f4d\u662f\u5b57\u8282\uff0c\u800c Z \u5bc4\u5b58\u5668\u4e2d\u5b58\u653e\u7684\u5e94\u8be5\u662f\u5b57\u5730\u5740\uff0c\u6240\u4ee5\u8981\u5c06\u6807\u7b7e\u53f3\u79fb\u4e00\u4f4d\u4f20\u7ed9 Z \u5bc4\u5b58\u5668\u3002\u800c JMP \u6307\u4ee4\u548c RJMP \u6307\u4ee4\u5219\u53ef\u4ee5\u76f4\u63a5\u4f20\u6807\u7b7e\u3002 CALL / RET \u00b6 CALL \u6307\u4ee4\u7528\u4e8e\u5b50\u7a0b\u5e8f\u8c03\u7528\uff0c\u548c JMP \u6307\u4ee4\u4e00\u6837\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u7a0b\u5e8f\u8df3\u8f6c\uff0c\u4f46\u662f CALL \u6307\u4ee4\u5728\u8df3\u8f6c\u4e4b\u524d\u4f1a\u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff08\u8fd4\u56de\u5730\u5740\uff09\u538b\u5165\u6808\u4e2d\u3002 CALL \u6307\u4ee4\u7684\u8df3\u8f6c\u8303\u56f4\u4e3a[0, 64K-1]\u5b57\u3002 RCALL \u6307\u4ee4\u7528\u4e8e\u76f8\u5bf9\u5b50\u7a0b\u5e8f\u8c03\u7528\uff0c\u8df3\u8f6c\u8303\u56f4\u4e3a\u5f53\u524d\u4f4d\u7f6e[-2K, 2K-1]\u5b57\u3002 ICALL \u6307\u4ee4\u7528\u4e8e\u95f4\u63a5\u5b50\u7a0b\u5e8f\u8c03\u7528\uff0c\u5b50\u7a0b\u5e8f\u7684\u5730\u5740\u5b58\u653e\u5728 Z \u5bc4\u5b58\u5668\u4e2d\uff08\u8bb0\u4f4f\u5355\u4f4d\u662f\u5b57\uff09\u3002 RET \u6307\u4ee4\u7528\u4e8e\u5b50\u7a0b\u5e8f\u8fd4\u56de\uff0c\u5148\u5c06\u8fd4\u56de\u5730\u5740\u4ece\u6808\u4e2d\u5f39\u51fa\uff0c\u7136\u540e\u8fdb\u884c\u8df3\u8f6c\u3002 RETI \u6307\u4ee4\u7528\u4e8e\u4e2d\u65ad\u5b50\u7a0b\u5e8f\u8fd4\u56de\uff0c\u548c RET \u6307\u4ee4\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u8fd8\u4f1a\u8bbe\u7f6e\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd\u4f4d I \u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 CALL f1 ; \u8c03\u7528f1\u5b50\u7a0b\u5e8f RCALL f1 ; \u8c03\u7528f1\u5b50\u7a0b\u5e8f LDI ZL , lo8 ( f1 ) LDI ZH , hi8 ( f1 ) ; Z = f1 CLC ROR ZH ROR ZL ; Z = Z >> 1 ICALL ; \u8c03\u7528f1\u5b50\u7a0b\u5e8f f1: ... RET ; \u5b50\u7a0b\u5e8f\u8fd4\u56de XXX_IRQHandler: ... RETI ; \u4e2d\u65ad\u5b50\u7a0b\u5e8f\u8fd4\u56de \u6761\u4ef6\u5206\u652f\u6307\u4ee4 \u00b6 CP \u00b6 CP \u6307\u4ee4\u7528\u4e8e\u6bd4\u8f83\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u53ea\u5f71\u54cd\u6807\u5fd7\u4f4d\u800c\u4e0d\u4fdd\u5b58\u7ed3\u679c\u7684\u51cf\u6cd5\u64cd\u4f5c\u3002\u540e\u7f00\u5e26 C \u8868\u793a\u5e26\u8fdb\u4f4d\u6bd4\u8f83\uff0c\u540e\u7f00\u5e26 I \u8868\u793a\u4e0e\u7acb\u5373\u6570\u6bd4\u8f83\uff0c\u540e\u7f00\u5e26 SE \u8868\u793a\u5982\u679c\u76f8\u7b49\uff0c\u5219\u8df3\u8fc7\u4e0b\u4e00\u6761\u6307\u4ee4\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 LDI R16 , 0x01 LDI R17 , 0x02 CP R16 , R17 BRLT f1 ; 1 < 2\uff0c\u8df3\u8f6c\u5230f1 RJMP f3 ; \u4e0d\u4f1a\u6267\u884c f1: CPI R16 , 0x01 BREQ f2 ; 1 == 1\uff0c\u8df3\u8f6c\u5230f2 RJMP f3 ; \u4e0d\u4f1a\u6267\u884c f2: LDI R17 , 0x01 CPSE R16 , R17 ; 1 == 1\uff0c\u8df3\u8fc7\u4e0b\u4e00\u6761\u6307\u4ee4 RJMP f3 ; \u4e0d\u4f1a\u6267\u884c SEC CPC R16 , R17 BRLT f3 ; 1 < 1 + C(1)\uff0c\u8df3\u8f6c\u5230f3 RJMP f1 ; \u4e0d\u4f1a\u6267\u884c f3: RJMP f3 SBxx \u00b6 \u5f62\u5982 SBxx \u7684\u6307\u4ee4\u6839\u636e\u5bc4\u5b58\u5668\u4e2d\u7684\u67d0\u4e00\u4f4d\u6765\u9009\u62e9\u8df3\u8fc7\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c SBRC / SBRS \u6307\u4ee4\u6839\u636e\u7684\u662f\u901a\u7528\u5bc4\u5b58\u5668\u4e2d\u7684\u4f4d\u7684\u6e05\u9664/\u8bbe\u7f6e\u72b6\u6001\uff0c\u800c SBIC / SBIS \u6307\u4ee4\u6839\u636e\u7684\u662fI/O\u5bc4\u5b58\u5668\u4e2d\u7684\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 f1: LDI R16 , 0xAA SBRS R16 , 1 ; R16.1 == 1\uff0c\u8df3\u8fc7\u4e0b\u4e00\u6761\u6307\u4ee4 RJMP f1 ; \u4e0d\u4f1a\u6267\u884c SBIC PINB , 2 ; \u5982\u679cPB2\u8f93\u5165\u4e3a\u4f4e\u7535\u5e73\uff0c\u8df3\u8fc7\u4e0b\u4e00\u6761\u6307\u4ee4 RJMP f1 BRxx \u00b6 \u5f62\u5982 BRxx \u7684\u6307\u4ee4\u7528\u4e8e\u6839\u636e\u6761\u4ef6\u6539\u53d8\u7a0b\u5e8f\u6267\u884c\u6d41\uff0c\u652f\u6301\u7684\u6761\u4ef6\u5177\u4f53\u89c1\u4e0b\u8868\uff1a BRxx \u7c7b\u7684\u6307\u4ee4\u4e00\u822c\u548c CP \u6216 SUB \u6307\u4ee4\u914d\u5408\u4f7f\u7528\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 f1: LDI R16 , 0X01 LDI R17 , 0X02 CP R16 , R17 BRLO f2 ; 0x01 < 0x02\uff0c\u8df3\u8f6c\u5230f2 RJMP f1 ; \u4e0d\u4f1a\u6267\u884c f2: CPI R16 , 0x01 BRSH f3 ; 0x01 == 0x01\uff0c\u8df3\u8f6c\u5230f3 RJMP f1 ; \u4e0d\u4f1a\u6267\u884c f3: RJMP f3 \u53c2\u8003\u8d44\u6599 \u00b6 ATmega328P Datasheet AVR Instruction Set Manual","title":"AVR\u6c47\u7f16\uff08\u516d\uff09\uff1a\u5206\u652f\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4/#avr","text":"\u5206\u652f\u6307\u4ee4\u7528\u4e8e\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\uff0c\u5206\u4e3a\u65e0\u6761\u4ef6\u5206\u652f\u548c\u6761\u4ef6\u5206\u652f\u4e24\u7c7b\u3002","title":"AVR\u6c47\u7f16\uff08\u516d\uff09\uff1a\u5206\u652f\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4/#_1","text":"","title":"\u65e0\u6761\u4ef6\u5206\u652f\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4/#jmp","text":"JMP \u6307\u4ee4\u7528\u4e8e\u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u7c7b\u4f3c\u4e8eC\u4e2d\u7684 goto \u5173\u952e\u5b57\uff0c JMP \u6307\u4ee4\u7684\u8df3\u8f6c\u8303\u56f4\u4e3a[0, 4M-1]\u5b57\u3002 RJMP \u6307\u4ee4\u7528\u4e8e\u76f8\u5bf9\u8df3\u8f6c\uff0c\u8df3\u8f6c\u8303\u56f4\u4e3a\u5f53\u524d\u4f4d\u7f6e[-2K, 2K-1]\u5b57\u3002 IJMP \u6307\u4ee4\u7528\u4e8e\u95f4\u63a5\u8df3\u8f6c\uff0c\u8df3\u8f6c\u7684\u76ee\u7684\u5730\u5740\u5b58\u653e\u5728 Z \u5bc4\u5b58\u5668\u4e2d\uff08\u8bb0\u4f4f\u5355\u4f4d\u662f\u5b57\uff09\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 JMP f2 ; \u8df3\u8f6c\u5230f2 f1: RJMP f3 ; \u8df3\u8f6c\u5230f3 f2: LDI ZL , lo8 ( f1 ) LDI ZH , hi8 ( f1 ) ; Z = f1 CLC ROR ZH ROR ZL ; Z = Z >> 1 IJMP ; \u8df3\u8f6c\u5230f1 f3: RJMP f2 ; \u8df3\u8f6c\u5230f2 \u6ce8\u610f\uff1a\u5b9e\u6d4b\u5728GNU\u6c47\u7f16\u4e0b\uff0c IJMP \u6307\u4ee4\u4e2d\u4e0d\u80fd\u76f4\u63a5\u628a\u6807\u7b7e\u8d4b\u503c\u7ed9 Z \u5bc4\u5b58\u5668\uff0c\u56e0\u4e3a\u6807\u7b7e\u8868\u793a\u7684\u5730\u5740\u7684\u5355\u4f4d\u662f\u5b57\u8282\uff0c\u800c Z \u5bc4\u5b58\u5668\u4e2d\u5b58\u653e\u7684\u5e94\u8be5\u662f\u5b57\u5730\u5740\uff0c\u6240\u4ee5\u8981\u5c06\u6807\u7b7e\u53f3\u79fb\u4e00\u4f4d\u4f20\u7ed9 Z \u5bc4\u5b58\u5668\u3002\u800c JMP \u6307\u4ee4\u548c RJMP \u6307\u4ee4\u5219\u53ef\u4ee5\u76f4\u63a5\u4f20\u6807\u7b7e\u3002","title":"JMP"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4/#call-ret","text":"CALL \u6307\u4ee4\u7528\u4e8e\u5b50\u7a0b\u5e8f\u8c03\u7528\uff0c\u548c JMP \u6307\u4ee4\u4e00\u6837\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u7a0b\u5e8f\u8df3\u8f6c\uff0c\u4f46\u662f CALL \u6307\u4ee4\u5728\u8df3\u8f6c\u4e4b\u524d\u4f1a\u5c06\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff08\u8fd4\u56de\u5730\u5740\uff09\u538b\u5165\u6808\u4e2d\u3002 CALL \u6307\u4ee4\u7684\u8df3\u8f6c\u8303\u56f4\u4e3a[0, 64K-1]\u5b57\u3002 RCALL \u6307\u4ee4\u7528\u4e8e\u76f8\u5bf9\u5b50\u7a0b\u5e8f\u8c03\u7528\uff0c\u8df3\u8f6c\u8303\u56f4\u4e3a\u5f53\u524d\u4f4d\u7f6e[-2K, 2K-1]\u5b57\u3002 ICALL \u6307\u4ee4\u7528\u4e8e\u95f4\u63a5\u5b50\u7a0b\u5e8f\u8c03\u7528\uff0c\u5b50\u7a0b\u5e8f\u7684\u5730\u5740\u5b58\u653e\u5728 Z \u5bc4\u5b58\u5668\u4e2d\uff08\u8bb0\u4f4f\u5355\u4f4d\u662f\u5b57\uff09\u3002 RET \u6307\u4ee4\u7528\u4e8e\u5b50\u7a0b\u5e8f\u8fd4\u56de\uff0c\u5148\u5c06\u8fd4\u56de\u5730\u5740\u4ece\u6808\u4e2d\u5f39\u51fa\uff0c\u7136\u540e\u8fdb\u884c\u8df3\u8f6c\u3002 RETI \u6307\u4ee4\u7528\u4e8e\u4e2d\u65ad\u5b50\u7a0b\u5e8f\u8fd4\u56de\uff0c\u548c RET \u6307\u4ee4\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u8fd8\u4f1a\u8bbe\u7f6e\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd\u4f4d I \u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 CALL f1 ; \u8c03\u7528f1\u5b50\u7a0b\u5e8f RCALL f1 ; \u8c03\u7528f1\u5b50\u7a0b\u5e8f LDI ZL , lo8 ( f1 ) LDI ZH , hi8 ( f1 ) ; Z = f1 CLC ROR ZH ROR ZL ; Z = Z >> 1 ICALL ; \u8c03\u7528f1\u5b50\u7a0b\u5e8f f1: ... RET ; \u5b50\u7a0b\u5e8f\u8fd4\u56de XXX_IRQHandler: ... RETI ; \u4e2d\u65ad\u5b50\u7a0b\u5e8f\u8fd4\u56de","title":"CALL / RET"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4/#_2","text":"","title":"\u6761\u4ef6\u5206\u652f\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4/#cp","text":"CP \u6307\u4ee4\u7528\u4e8e\u6bd4\u8f83\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u53ea\u5f71\u54cd\u6807\u5fd7\u4f4d\u800c\u4e0d\u4fdd\u5b58\u7ed3\u679c\u7684\u51cf\u6cd5\u64cd\u4f5c\u3002\u540e\u7f00\u5e26 C \u8868\u793a\u5e26\u8fdb\u4f4d\u6bd4\u8f83\uff0c\u540e\u7f00\u5e26 I \u8868\u793a\u4e0e\u7acb\u5373\u6570\u6bd4\u8f83\uff0c\u540e\u7f00\u5e26 SE \u8868\u793a\u5982\u679c\u76f8\u7b49\uff0c\u5219\u8df3\u8fc7\u4e0b\u4e00\u6761\u6307\u4ee4\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 LDI R16 , 0x01 LDI R17 , 0x02 CP R16 , R17 BRLT f1 ; 1 < 2\uff0c\u8df3\u8f6c\u5230f1 RJMP f3 ; \u4e0d\u4f1a\u6267\u884c f1: CPI R16 , 0x01 BREQ f2 ; 1 == 1\uff0c\u8df3\u8f6c\u5230f2 RJMP f3 ; \u4e0d\u4f1a\u6267\u884c f2: LDI R17 , 0x01 CPSE R16 , R17 ; 1 == 1\uff0c\u8df3\u8fc7\u4e0b\u4e00\u6761\u6307\u4ee4 RJMP f3 ; \u4e0d\u4f1a\u6267\u884c SEC CPC R16 , R17 BRLT f3 ; 1 < 1 + C(1)\uff0c\u8df3\u8f6c\u5230f3 RJMP f1 ; \u4e0d\u4f1a\u6267\u884c f3: RJMP f3","title":"CP"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4/#sbxx","text":"\u5f62\u5982 SBxx \u7684\u6307\u4ee4\u6839\u636e\u5bc4\u5b58\u5668\u4e2d\u7684\u67d0\u4e00\u4f4d\u6765\u9009\u62e9\u8df3\u8fc7\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c SBRC / SBRS \u6307\u4ee4\u6839\u636e\u7684\u662f\u901a\u7528\u5bc4\u5b58\u5668\u4e2d\u7684\u4f4d\u7684\u6e05\u9664/\u8bbe\u7f6e\u72b6\u6001\uff0c\u800c SBIC / SBIS \u6307\u4ee4\u6839\u636e\u7684\u662fI/O\u5bc4\u5b58\u5668\u4e2d\u7684\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 f1: LDI R16 , 0xAA SBRS R16 , 1 ; R16.1 == 1\uff0c\u8df3\u8fc7\u4e0b\u4e00\u6761\u6307\u4ee4 RJMP f1 ; \u4e0d\u4f1a\u6267\u884c SBIC PINB , 2 ; \u5982\u679cPB2\u8f93\u5165\u4e3a\u4f4e\u7535\u5e73\uff0c\u8df3\u8fc7\u4e0b\u4e00\u6761\u6307\u4ee4 RJMP f1","title":"SBxx"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4/#brxx","text":"\u5f62\u5982 BRxx \u7684\u6307\u4ee4\u7528\u4e8e\u6839\u636e\u6761\u4ef6\u6539\u53d8\u7a0b\u5e8f\u6267\u884c\u6d41\uff0c\u652f\u6301\u7684\u6761\u4ef6\u5177\u4f53\u89c1\u4e0b\u8868\uff1a BRxx \u7c7b\u7684\u6307\u4ee4\u4e00\u822c\u548c CP \u6216 SUB \u6307\u4ee4\u914d\u5408\u4f7f\u7528\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 f1: LDI R16 , 0X01 LDI R17 , 0X02 CP R16 , R17 BRLO f2 ; 0x01 < 0x02\uff0c\u8df3\u8f6c\u5230f2 RJMP f1 ; \u4e0d\u4f1a\u6267\u884c f2: CPI R16 , 0x01 BRSH f3 ; 0x01 == 0x01\uff0c\u8df3\u8f6c\u5230f3 RJMP f1 ; \u4e0d\u4f1a\u6267\u884c f3: RJMP f3","title":"BRxx"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%86%E6%94%AF%E6%8C%87%E4%BB%A4/#_3","text":"ATmega328P Datasheet AVR Instruction Set Manual","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/","text":"AVR\u6c47\u7f16\uff08\u56db\uff09\uff1a\u6570\u636e\u4f20\u9001\u6307\u4ee4 \u00b6 AVR\u6307\u4ee4\u4e3b\u8981\u5206\u4e3a\u4e94\u7c7b\uff1a\u7b97\u672f\u548c\u903b\u8f91\u6307\u4ee4\u3001\u5206\u652f\u6307\u4ee4\u3001\u4f4d\u64cd\u4f5c\u6307\u4ee4\u3001\u6570\u636e\u4f20\u9001\u6307\u4ee4\u3001MCU\u63a7\u5236\u6307\u4ee4\uff0c\u4eca\u5929\u6211\u4eec\u5148\u6765\u8ba4\u8bc6\u5176\u4e2d\u6700\u5e38\u7528\u7684\u6570\u636e\u4f20\u9001\u6307\u4ee4\u3002 \u6c47\u7f16\u7a0b\u5e8f\u7684\u7f16\u5199\u3001\u7f16\u8bd1\u548c\u8c03\u8bd5 \u00b6 \u5b66\u4e60\u4efb\u4f55\u6280\u672f\u90fd\u79bb\u4e0d\u5f00\u5b9e\u8df5\uff0c\u6c47\u7f16\u8bed\u8a00\u4e5f\u662f\u5982\u6b64\u3002\u5728\u6b63\u5f0f\u5b66\u4e60\u6307\u4ee4\u524d\uff0c\u6211\u4eec\u5148\u6765\u4f53\u9a8c\u4e00\u4e0b\u6c47\u7f16\u7a0b\u5e8f\u4ece\u7f16\u5199\u5230\u7f16\u8bd1\uff0c\u518d\u5230\u8c03\u8bd5\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002 \u4f2a\u6307\u4ee4 \u00b6 \u6839\u636e \u767e\u5ea6\u767e\u79d1 \uff1a\u4f2a\u6307\u4ee4(Pseudo Instruction)\u662f\u7528\u4e8e\u5bf9\u6c47\u7f16\u8fc7\u7a0b\u8fdb\u884c\u63a7\u5236\u7684\u6307\u4ee4\uff0c\u8be5\u7c7b\u6307\u4ee4\u5e76\u4e0d\u662f\u53ef\u6267\u884c\u6307\u4ee4\uff0c\u6ca1\u6709\u673a\u5668\u4ee3\u7801\uff0c\u53ea\u7528\u4e8e\u6c47\u7f16\u8fc7\u7a0b\u4e2d\u4e3a\u6c47\u7f16\u7a0b\u5e8f\u63d0\u4f9b\u6c47\u7f16\u4fe1\u606f\u3002 \u4e0b\u9762\u662f\u51e0\u4e2a\u5e38\u7528\u7684\u4f2a\u6307\u4ee4\uff1a \u4f2a\u6307\u4ee4 \u8bf4\u660e \u4e3e\u4f8b .section \u5b9a\u4e49\u4e00\u4e2a\u6bb5 .section .text .section .data .global \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u7b26\u53f7 .global _start .byte \u5b9a\u4e49\u4e00\u4e2a\u5b57\u8282\u6570\u636e .byte 0x01 .word \u5b9a\u4e49\u4e00\u4e2a\u5b57\u6570\u636e .word 0x3412 .ascii \u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u636e .ascii \"hello\" .align \u8bbe\u7f6e\u5bf9\u9f50\u65b9\u5f0f .align 4 .equ \u5b9a\u4e49\u4e00\u4e2a\u7b26\u53f7\u5e38\u91cf\uff0c\u7c7b\u4f3c\u4e8eC\u5b8f\u5b9a\u4e49 .equ INT8_MAX, 0xFF \u7b2c\u4e00\u4e2a\u6c47\u7f16\u7a0b\u5e8f \u00b6 hello.s 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .equ PINB , 0x03 .equ DDRB , 0x04 .equ PORTB , 0x05 .section .text ; \u5b9a\u4e49text\u6bb5 .global _start ; \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u7b26\u53f7_start _start: LDI R16 , 0x20 ; R16 = 0x20 OUT DDRB , R16 ; \u8bbe\u7f6ePB5\u4e3a\u8f93\u51fa OUT PORTB , R16 ; PB5\u521d\u59cb\u8f93\u51fa\u9ad8\u7535\u5e73 loop: OUT PINB , R16 ; \u7ffb\u8f6cPB5\u7535\u5e73 RJMP loop ; \u8df3\u8f6c\u5230loop\u5904\u7ee7\u7eed\u6267\u884c \u4e0a\u8ff0\u7a0b\u5e8f\u5b9e\u73b0\u7684\u529f\u80fd\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e0d\u65ad\u7ffb\u8f6cPB5\u7684\u7535\u5e73\u72b6\u6001\u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\uff0c\u751f\u6210elf\u6587\u4ef6\uff1a 1 2 avr-gcc -mmcu = atmega328p -x assembler-with-cpp -g -Og -Wall -c -o hello.o hello.s avr-gcc -mmcu = atmega328p -nostartfiles -o hello.elf hello.o \u5176\u4e2d\uff0c -x assembler-with-cpp \u8868\u793a\u7f16\u8bd1\u6c47\u7f16\u7a0b\u5e8f\uff0c -nostartfiles \u8868\u793a\u4e0d\u6dfb\u52a0\u9ed8\u8ba4\u542f\u52a8\u6587\u4ef6\uff0c\u542f\u52a8\u6587\u4ef6\u7684\u4f5c\u7528\u662f\u521d\u59cb\u5316MCU\uff0c\u521b\u5efaC\u8bed\u8a00\u8fd0\u884c\u73af\u5883\uff0c\u7531\u4e8e\u8fd9\u91cc\u7f16\u5199\u7684\u662f\u6c47\u7f16\u7a0b\u5e8f\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5b83\uff0c\u5426\u5219\u7f16\u8bd1\u65f6\u4f1a\u63d0\u793a\u627e\u4e0d\u5230 main \u51fd\u6570\u3002 \u4e3a\u4e86\u4ee5\u540e\u6bcf\u6b21\u91cd\u65b0\u7f16\u8bd1\u7684\u65f6\u5019\u4e0d\u7528\u90fd\u8f93\u4e00\u904d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5199\u4e00\u4e2a Makefile \u6587\u4ef6\uff1a Makefile 1 2 3 4 5 6 7 8 9 10 11 12 13 .PHONY : all clean TARGET := hello all : $( TARGET ) . elf %.o : %. s avr-gcc -mmcu = atmega328p -x assembler-with-cpp -g -Og -Wall -c -o $@ $< $(TARGET).elf : $( TARGET ) . o avr-gcc -mmcu = atmega328p -nostartfiles -o $@ $< clean : rm -f *.o $( TARGET ) .elf \u8c03\u8bd5\u7a0b\u5e8f \u00b6 \u4f7f\u7528 simavr \u5bf9\u4e0a\u9762\u751f\u6210\u7684elf\u6587\u4ef6\u8fdb\u884c\u4eff\u771f\uff1a 1 simavr -f 16000000 -m atmega328p --gdb hello.elf \u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5728 Makefile \u4e2d\u6dfb\u52a0\u4e00\u4e2a run \u4f2a\u76ee\u6807\uff0c\u5c06\u4e0a\u9762\u7684\u547d\u4ee4\u6dfb\u52a0\u8fdb\u53bb\uff1a Makefile 1 2 3 4 5 6 .PHONY : all clean run ... run : $( TARGET ) . elf simavr -f 16000000 -m atmega328p --gdb $< \u4e4b\u540e\u9700\u8981\u4eff\u771f\u65f6\uff0c\u76f4\u63a5\u6267\u884c make run \u5373\u53ef\u3002 \u4f7f\u7528 avr-gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c simavr \u7684GDB\u7aef\u53e3\u662f 1234 \uff1a 1 avr-gdb -ex \"target remote localhost:1234\" -ex \"layout split\" -q --tui hello.elf \u5728GDB\u7a97\u53e3\u4e2d\uff0c\u53ef\u4ee5\u8f93\u5165 s \u8fdb\u884c\u5355\u6b65\u6267\u884c\u3002 \u4e3a\u4e86\u89c2\u5bdf PINB \u3001 DDRB \u3001 PORTB \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u53ef\u4ee5\u501f\u52a9 x/<n/f/u> <addr> \u547d\u4ee4\uff0c\u5176\u4e2d n \u8868\u793a\u8981\u67e5\u770b\u7684\u503c\u7684\u4e2a\u6570\uff1b f \u6307\u5b9a\u663e\u793a\u683c\u5f0f\uff0c\u5982\u679c\u8981\u5341\u516d\u8fdb\u5236\u663e\u793a\uff0c\u8fd9\u91cc\u5c31\u8981\u6307\u5b9a x \uff1b u \u8868\u793a\u503c\u7684\u5355\u4f4d\uff0c\u5982\u679c\u5355\u4f4d\u662f\u5b57\u8282\uff0c\u8fd9\u91cc\u5c31\u8981\u6307\u5b9a b \u3002\u8fd9\u6761\u547d\u4ee4\u7684\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7 help x \u547d\u4ee4\u67e5\u770b\u3002 \u8fd9\u91cc\u6211\u4eec\u67e5\u770b\u4eceI/O\u5730\u57400x03\u5f00\u59cb\u76843\u4e2a\u5b57\u8282\uff1a 1 x/3xb 0x03 # \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5730\u5740\u662f\u9519\u8bef\u7684\uff01 \u7ed3\u679c\u5982\u4e0b\uff1a \u53d1\u73b0\u8bfb\u53d6\u7684\u503c\u5e76\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0a\u9762\u547d\u4ee4\u4e2d\u7684\u5730\u5740\u8bbe\u7f6e\u9519\u4e86\uff0c\u6709\u4e24\u4e2a\u56e0\u7d20\uff1a PINB \u3001 DDRB \u3001 PORTB \u5728I/O\u7a7a\u95f4\u7684\u5730\u5740\u662f0x03\u5f00\u59cb\uff0c\u800c\u5728\u6570\u636e\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u9700\u8981\u52a0\u4e0a0x20\uff1b AVR\u7684\u7a0b\u5e8f\u7a7a\u95f4\u548c\u6570\u636e\u7a7a\u95f4\u662f\u5206\u522b\u72ec\u7acb\u7f16\u5740\u7684\uff0c\u56e0\u6b64\u5730\u5740\u5b58\u5728\u91cd\u53e0\u60c5\u51b5\u3002\u901a\u8fc7 avr-readelf -S hello.elf \u67e5\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0 .data \u6bb5\u7684\u5730\u5740\u662f\u4ece0x800100\u5f00\u59cb\u7684\uff0c\u800c\u5b9e\u9645\u7684SRAM\u5730\u5740\u662f\u4ece 0x0100 \u5f00\u59cb\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053elf\u6587\u4ef6\u4e2d\u6570\u636e\u7a7a\u95f4\u7684\u5730\u5740\u8fd8\u9700\u8981\u52a0\u4e0a0x800000\uff0c\u5982\u679c\u4e0d\u52a0\uff0c\u5219\u4ee3\u8868\u7684\u662f .text \u6bb5\uff08Flash\uff09\u7684\u5730\u5740\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\uff0c\u5c06\u547d\u4ee4\u4e2d\u7684\u5730\u5740\u6539\u4e3a0x800023\u5373\u53ef\u6b63\u786e\u67e5\u770b PINB \u3001 DDRB \u3001 PORTB \u4e2d\u7684\u5185\u5bb9\uff1a 1 x/3xb 0x800023 \u7ed3\u679c\u5982\u4e0b\uff1a \u8fd9\u6837\u663e\u793a\u7684\u7ed3\u679c\u4e0e\u6211\u4eec\u7684\u7a0b\u5e8f\u903b\u8f91\u662f\u4e00\u81f4\u7684\u3002 \u6570\u636e\u4f20\u9001\u6307\u4ee4 \u00b6 \u7531\u4e8eAVR\u5177\u6709\u591a\u79cd\u5bfb\u5740\u65b9\u5f0f\uff0c\u56e0\u6b64\u6570\u636e\u4f20\u9001\u6307\u4ee4\u4e5f\u5bf9\u5e94\u6709\u591a\u79cd\u3002 \u7a7a\u95f4 \u6307\u4ee4 \u5bc4\u5b58\u5668\u5806 MOV \u6570\u636e\u7a7a\u95f4 LD / ST \u7a0b\u5e8f\u7a7a\u95f4 LPM / SPM I/O\u7a7a\u95f4 IN / OUT \u6808\u7a7a\u95f4 PUSH / POP \u4e00\u822c\u800c\u8a00\uff0cAVR\u6307\u4ee4\u5982\u679c\u6709\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u5219\u7b2c\u4e00\u4e2a\u662f\u76ee\u7684\u64cd\u4f5c\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6e90\u64cd\u4f5c\u6570\u3002 MOV \u00b6 MOV \u6307\u4ee4\u7528\u4e8e\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u9001\uff08\u4e00\u4e2a\u5b57\u8282\uff09\uff0c\u540e\u7f00\u5982\u679c\u52a0 W \u8868\u793a\u4f20\u9001\u4e00\u4e2a\u5b57\u7684\u6570\u636e\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 LDI R16 , 0x10 ; R16 = 0x10 MOV R0 , R16 ; R0 = 0x10 LDI R16 , 0x20 ; R16 = 0x20 LDI R17 , 0x30 ; R17 = 0x30 MOVW R0 , R16 ; R0 = 0x20, R1 = 0x30 LD \u00b6 LD \u6307\u4ee4\u7528\u4e8e\u5c06\u6570\u636e\u4ece\u6570\u636e\u7a7a\u95f4\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u540e\u7f00\u52a0 I \u8868\u793a\u52a0\u8f7d\u7acb\u5373\u6570\uff0c\u52a0 D \u8868\u793a\u504f\u79fb\u91cf\u5bfb\u5740\uff0c\u52a0 S \u8868\u793a\u76f4\u63a5\u5bfb\u5740\u3002 X / Y / Z \u5bc4\u5b58\u5668\u53ef\u4ee5\u7528\u4e8e\u95f4\u63a5\u5bfb\u5740\uff0c\u5982\u679c\u524d\u7f00\u52a0 - \uff0c\u8868\u793a\u6267\u884c\u64cd\u4f5c\u524d\u5bc4\u5b58\u5668\u7684\u503c\u81ea\u51cf\u4e00\uff0c\u5982\u679c\u540e\u7f00\u52a0 + \uff0c\u8868\u793a\u6267\u884c\u64cd\u4f5c\u540e\u5bc4\u5b58\u5668\u7684\u503c\u81ea\u52a0\u4e00\u3002 Y / Z \u5bc4\u5b58\u5668\u53ef\u4ee5\u7528\u4e8e\u504f\u79fb\u91cf\u5bfb\u5740\uff08\u6ce8\u610f\u4e0d\u5305\u62ec X \u5bc4\u5b58\u5668\uff09\uff0c\u540e\u9762\u52a0 +q \u8868\u793a\u504f\u79fb\u91cf\u4e3a q \u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 LDI R16 , 0xAA ; R16 = 0xAA LDI XL , 0x00 LDI XH , 0x01 ; X = 0x0100 ST X , R16 ; (0x0100) = 0xAA LD R0 , X + ; R0 = 0xAA, X = 0x0101 LDI ZL , 0xF1 LDI ZH , 0x00 ; Z = 0x00F1 LDD R1 , Z + 0xF ; R1 = 0xAA LDS R2 , 0x0100 ; R2 = 0xAA ST \u00b6 ST \u6307\u4ee4\u7528\u4e8e\u5c06\u6570\u636e\u4ece\u5bc4\u5b58\u5668\u5199\u5165\u5230\u6570\u636e\u7a7a\u95f4\u4e2d\uff0c\u540e\u7f00\u52a0 D / S \u7684\u610f\u4e49\u540c LD \uff0c\u6ce8\u610f ST \u4e0d\u652f\u6301\u7acb\u5373\u5bfb\u5740\uff0c\u5373\u6ca1\u6709 STI \u8fd9\u6837\u7684\u6307\u4ee4\uff01 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 LDI R16 , 0x55 ; R16 = 0x55 LDI XL , 0x80 LDI XH , 0x01 ; X = 0x0180 ST X , R16 ; (0x0180) = 0x55 LD R0 , X ; R0 = 0x55 LDI R16 , 0xAA ; R16 = 0xAA LDI ZL , 0x50 LDI ZH , 0x01 ; Z = 0x0150 STD Z + 0x30 , R16 ; (0x0180) = 0xAA LD R1 , X ; R1 = 0xAA LDI R16 , 0xA5 ; R16 = 0xA5 STS 0x0180 , R16 ; (0x0180) = 0xA5 LD R2 , X ; R2 = 0xA5 LPM / SPM \u00b6 LPM / SPM \u6307\u4ee4\u7528\u4e8e\u5c06\u6570\u636e\u4ece\u7a0b\u5e8f\u7a7a\u95f4\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668/\u4ece\u5bc4\u5b58\u5668\u5199\u5165\u5230\u7a0b\u5e8f\u7a7a\u95f4\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 LDI ZL , lo8 ( const ) LDI ZH , hi8 ( const ) ; Z = const LPM R0 , Z + ; R0 = 0xA5, Z = CONST + 1 LPM R1 , Z + ; R1 = 0x5A, Z = CONST + 2 LPM R2 , Z + ; R2 = 0x55, Z = CONST + 3 LPM R3 , Z ; R3 = 0xAA const: .byte 0xA5 .byte 0x5A .word 0xAA55 SPM \u6307\u4ee4\u7684\u7528\u6cd5\u8f83\u4e3a\u7279\u6b8a\uff0c\u540e\u9762\u6709\u673a\u4f1a\u518d\u6765\u4ecb\u7ecd\u3002 IN / OUT \u00b6 IN / OUT \u7528\u4e8e\u4eceI/O\u7a7a\u95f4\u8bfb\u5165\u6570\u636e\u5230\u5bc4\u5b58\u5668/\u5411I/O\u7a7a\u95f4\u5199\u5165\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u636e\uff0c\u6ce8\u610f P \u4e3aI/O\u7a7a\u95f4\u7684\u5730\u5740\uff0c\u6b64\u547d\u4ee4\u4e0d\u80fd\u8bbf\u95ee\u6269\u5c55I/O\u7a7a\u95f4\u3002 \u4f8b\u5982\uff1a 1 2 OUT DDRB , 0x00 ; DDRB = 0xAA IN R0 , DDRB ; R0 = 0xAA PUSH / POP \u00b6 PUSH / POP \u7528\u4e8e\u5c06\u6570\u636e\u538b\u5165/\u5f39\u51fa\u6808\uff0c\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610fSP\u7684\u521d\u59cb\u503c\u8981\u8bbe\u7f6e\u6b63\u786e\uff08AVR\u662f\u7a7a\u51cf\u6808\uff09\uff0c\u5e76\u8981\u907f\u514d\u51fa\u73b0\u6808\u6ea2\u51fa\u7684\u60c5\u51b5\u3002 \u4f8b\u5982\uff1a 1 2 3 LDI R16 , 0xA5 ; R16 = 0xA5 PUSH R16 ; (SP) = 0xA5, SP -= 1 POP R0 ; R0 = 0xA5, SP += 1 \u53c2\u8003\u8d44\u6599 \u00b6 ATmega328P Datasheet AVR Instruction Set Manual \u767e\u5ea6\u767e\u79d1 - \u4f2a\u6307\u4ee4","title":"AVR\u6c47\u7f16\uff08\u56db\uff09\uff1a\u6570\u636e\u4f20\u9001\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#avr","text":"AVR\u6307\u4ee4\u4e3b\u8981\u5206\u4e3a\u4e94\u7c7b\uff1a\u7b97\u672f\u548c\u903b\u8f91\u6307\u4ee4\u3001\u5206\u652f\u6307\u4ee4\u3001\u4f4d\u64cd\u4f5c\u6307\u4ee4\u3001\u6570\u636e\u4f20\u9001\u6307\u4ee4\u3001MCU\u63a7\u5236\u6307\u4ee4\uff0c\u4eca\u5929\u6211\u4eec\u5148\u6765\u8ba4\u8bc6\u5176\u4e2d\u6700\u5e38\u7528\u7684\u6570\u636e\u4f20\u9001\u6307\u4ee4\u3002","title":"AVR\u6c47\u7f16\uff08\u56db\uff09\uff1a\u6570\u636e\u4f20\u9001\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#_1","text":"\u5b66\u4e60\u4efb\u4f55\u6280\u672f\u90fd\u79bb\u4e0d\u5f00\u5b9e\u8df5\uff0c\u6c47\u7f16\u8bed\u8a00\u4e5f\u662f\u5982\u6b64\u3002\u5728\u6b63\u5f0f\u5b66\u4e60\u6307\u4ee4\u524d\uff0c\u6211\u4eec\u5148\u6765\u4f53\u9a8c\u4e00\u4e0b\u6c47\u7f16\u7a0b\u5e8f\u4ece\u7f16\u5199\u5230\u7f16\u8bd1\uff0c\u518d\u5230\u8c03\u8bd5\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002","title":"\u6c47\u7f16\u7a0b\u5e8f\u7684\u7f16\u5199\u3001\u7f16\u8bd1\u548c\u8c03\u8bd5"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#_2","text":"\u6839\u636e \u767e\u5ea6\u767e\u79d1 \uff1a\u4f2a\u6307\u4ee4(Pseudo Instruction)\u662f\u7528\u4e8e\u5bf9\u6c47\u7f16\u8fc7\u7a0b\u8fdb\u884c\u63a7\u5236\u7684\u6307\u4ee4\uff0c\u8be5\u7c7b\u6307\u4ee4\u5e76\u4e0d\u662f\u53ef\u6267\u884c\u6307\u4ee4\uff0c\u6ca1\u6709\u673a\u5668\u4ee3\u7801\uff0c\u53ea\u7528\u4e8e\u6c47\u7f16\u8fc7\u7a0b\u4e2d\u4e3a\u6c47\u7f16\u7a0b\u5e8f\u63d0\u4f9b\u6c47\u7f16\u4fe1\u606f\u3002 \u4e0b\u9762\u662f\u51e0\u4e2a\u5e38\u7528\u7684\u4f2a\u6307\u4ee4\uff1a \u4f2a\u6307\u4ee4 \u8bf4\u660e \u4e3e\u4f8b .section \u5b9a\u4e49\u4e00\u4e2a\u6bb5 .section .text .section .data .global \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u7b26\u53f7 .global _start .byte \u5b9a\u4e49\u4e00\u4e2a\u5b57\u8282\u6570\u636e .byte 0x01 .word \u5b9a\u4e49\u4e00\u4e2a\u5b57\u6570\u636e .word 0x3412 .ascii \u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u636e .ascii \"hello\" .align \u8bbe\u7f6e\u5bf9\u9f50\u65b9\u5f0f .align 4 .equ \u5b9a\u4e49\u4e00\u4e2a\u7b26\u53f7\u5e38\u91cf\uff0c\u7c7b\u4f3c\u4e8eC\u5b8f\u5b9a\u4e49 .equ INT8_MAX, 0xFF","title":"\u4f2a\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#_3","text":"hello.s 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .equ PINB , 0x03 .equ DDRB , 0x04 .equ PORTB , 0x05 .section .text ; \u5b9a\u4e49text\u6bb5 .global _start ; \u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u7b26\u53f7_start _start: LDI R16 , 0x20 ; R16 = 0x20 OUT DDRB , R16 ; \u8bbe\u7f6ePB5\u4e3a\u8f93\u51fa OUT PORTB , R16 ; PB5\u521d\u59cb\u8f93\u51fa\u9ad8\u7535\u5e73 loop: OUT PINB , R16 ; \u7ffb\u8f6cPB5\u7535\u5e73 RJMP loop ; \u8df3\u8f6c\u5230loop\u5904\u7ee7\u7eed\u6267\u884c \u4e0a\u8ff0\u7a0b\u5e8f\u5b9e\u73b0\u7684\u529f\u80fd\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e0d\u65ad\u7ffb\u8f6cPB5\u7684\u7535\u5e73\u72b6\u6001\u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\uff0c\u751f\u6210elf\u6587\u4ef6\uff1a 1 2 avr-gcc -mmcu = atmega328p -x assembler-with-cpp -g -Og -Wall -c -o hello.o hello.s avr-gcc -mmcu = atmega328p -nostartfiles -o hello.elf hello.o \u5176\u4e2d\uff0c -x assembler-with-cpp \u8868\u793a\u7f16\u8bd1\u6c47\u7f16\u7a0b\u5e8f\uff0c -nostartfiles \u8868\u793a\u4e0d\u6dfb\u52a0\u9ed8\u8ba4\u542f\u52a8\u6587\u4ef6\uff0c\u542f\u52a8\u6587\u4ef6\u7684\u4f5c\u7528\u662f\u521d\u59cb\u5316MCU\uff0c\u521b\u5efaC\u8bed\u8a00\u8fd0\u884c\u73af\u5883\uff0c\u7531\u4e8e\u8fd9\u91cc\u7f16\u5199\u7684\u662f\u6c47\u7f16\u7a0b\u5e8f\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5b83\uff0c\u5426\u5219\u7f16\u8bd1\u65f6\u4f1a\u63d0\u793a\u627e\u4e0d\u5230 main \u51fd\u6570\u3002 \u4e3a\u4e86\u4ee5\u540e\u6bcf\u6b21\u91cd\u65b0\u7f16\u8bd1\u7684\u65f6\u5019\u4e0d\u7528\u90fd\u8f93\u4e00\u904d\u547d\u4ee4\uff0c\u53ef\u4ee5\u5199\u4e00\u4e2a Makefile \u6587\u4ef6\uff1a Makefile 1 2 3 4 5 6 7 8 9 10 11 12 13 .PHONY : all clean TARGET := hello all : $( TARGET ) . elf %.o : %. s avr-gcc -mmcu = atmega328p -x assembler-with-cpp -g -Og -Wall -c -o $@ $< $(TARGET).elf : $( TARGET ) . o avr-gcc -mmcu = atmega328p -nostartfiles -o $@ $< clean : rm -f *.o $( TARGET ) .elf","title":"\u7b2c\u4e00\u4e2a\u6c47\u7f16\u7a0b\u5e8f"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#_4","text":"\u4f7f\u7528 simavr \u5bf9\u4e0a\u9762\u751f\u6210\u7684elf\u6587\u4ef6\u8fdb\u884c\u4eff\u771f\uff1a 1 simavr -f 16000000 -m atmega328p --gdb hello.elf \u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5728 Makefile \u4e2d\u6dfb\u52a0\u4e00\u4e2a run \u4f2a\u76ee\u6807\uff0c\u5c06\u4e0a\u9762\u7684\u547d\u4ee4\u6dfb\u52a0\u8fdb\u53bb\uff1a Makefile 1 2 3 4 5 6 .PHONY : all clean run ... run : $( TARGET ) . elf simavr -f 16000000 -m atmega328p --gdb $< \u4e4b\u540e\u9700\u8981\u4eff\u771f\u65f6\uff0c\u76f4\u63a5\u6267\u884c make run \u5373\u53ef\u3002 \u4f7f\u7528 avr-gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c simavr \u7684GDB\u7aef\u53e3\u662f 1234 \uff1a 1 avr-gdb -ex \"target remote localhost:1234\" -ex \"layout split\" -q --tui hello.elf \u5728GDB\u7a97\u53e3\u4e2d\uff0c\u53ef\u4ee5\u8f93\u5165 s \u8fdb\u884c\u5355\u6b65\u6267\u884c\u3002 \u4e3a\u4e86\u89c2\u5bdf PINB \u3001 DDRB \u3001 PORTB \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u53ef\u4ee5\u501f\u52a9 x/<n/f/u> <addr> \u547d\u4ee4\uff0c\u5176\u4e2d n \u8868\u793a\u8981\u67e5\u770b\u7684\u503c\u7684\u4e2a\u6570\uff1b f \u6307\u5b9a\u663e\u793a\u683c\u5f0f\uff0c\u5982\u679c\u8981\u5341\u516d\u8fdb\u5236\u663e\u793a\uff0c\u8fd9\u91cc\u5c31\u8981\u6307\u5b9a x \uff1b u \u8868\u793a\u503c\u7684\u5355\u4f4d\uff0c\u5982\u679c\u5355\u4f4d\u662f\u5b57\u8282\uff0c\u8fd9\u91cc\u5c31\u8981\u6307\u5b9a b \u3002\u8fd9\u6761\u547d\u4ee4\u7684\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7 help x \u547d\u4ee4\u67e5\u770b\u3002 \u8fd9\u91cc\u6211\u4eec\u67e5\u770b\u4eceI/O\u5730\u57400x03\u5f00\u59cb\u76843\u4e2a\u5b57\u8282\uff1a 1 x/3xb 0x03 # \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5730\u5740\u662f\u9519\u8bef\u7684\uff01 \u7ed3\u679c\u5982\u4e0b\uff1a \u53d1\u73b0\u8bfb\u53d6\u7684\u503c\u5e76\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0a\u9762\u547d\u4ee4\u4e2d\u7684\u5730\u5740\u8bbe\u7f6e\u9519\u4e86\uff0c\u6709\u4e24\u4e2a\u56e0\u7d20\uff1a PINB \u3001 DDRB \u3001 PORTB \u5728I/O\u7a7a\u95f4\u7684\u5730\u5740\u662f0x03\u5f00\u59cb\uff0c\u800c\u5728\u6570\u636e\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u9700\u8981\u52a0\u4e0a0x20\uff1b AVR\u7684\u7a0b\u5e8f\u7a7a\u95f4\u548c\u6570\u636e\u7a7a\u95f4\u662f\u5206\u522b\u72ec\u7acb\u7f16\u5740\u7684\uff0c\u56e0\u6b64\u5730\u5740\u5b58\u5728\u91cd\u53e0\u60c5\u51b5\u3002\u901a\u8fc7 avr-readelf -S hello.elf \u67e5\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0 .data \u6bb5\u7684\u5730\u5740\u662f\u4ece0x800100\u5f00\u59cb\u7684\uff0c\u800c\u5b9e\u9645\u7684SRAM\u5730\u5740\u662f\u4ece 0x0100 \u5f00\u59cb\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053elf\u6587\u4ef6\u4e2d\u6570\u636e\u7a7a\u95f4\u7684\u5730\u5740\u8fd8\u9700\u8981\u52a0\u4e0a0x800000\uff0c\u5982\u679c\u4e0d\u52a0\uff0c\u5219\u4ee3\u8868\u7684\u662f .text \u6bb5\uff08Flash\uff09\u7684\u5730\u5740\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\uff0c\u5c06\u547d\u4ee4\u4e2d\u7684\u5730\u5740\u6539\u4e3a0x800023\u5373\u53ef\u6b63\u786e\u67e5\u770b PINB \u3001 DDRB \u3001 PORTB \u4e2d\u7684\u5185\u5bb9\uff1a 1 x/3xb 0x800023 \u7ed3\u679c\u5982\u4e0b\uff1a \u8fd9\u6837\u663e\u793a\u7684\u7ed3\u679c\u4e0e\u6211\u4eec\u7684\u7a0b\u5e8f\u903b\u8f91\u662f\u4e00\u81f4\u7684\u3002","title":"\u8c03\u8bd5\u7a0b\u5e8f"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#_5","text":"\u7531\u4e8eAVR\u5177\u6709\u591a\u79cd\u5bfb\u5740\u65b9\u5f0f\uff0c\u56e0\u6b64\u6570\u636e\u4f20\u9001\u6307\u4ee4\u4e5f\u5bf9\u5e94\u6709\u591a\u79cd\u3002 \u7a7a\u95f4 \u6307\u4ee4 \u5bc4\u5b58\u5668\u5806 MOV \u6570\u636e\u7a7a\u95f4 LD / ST \u7a0b\u5e8f\u7a7a\u95f4 LPM / SPM I/O\u7a7a\u95f4 IN / OUT \u6808\u7a7a\u95f4 PUSH / POP \u4e00\u822c\u800c\u8a00\uff0cAVR\u6307\u4ee4\u5982\u679c\u6709\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u5219\u7b2c\u4e00\u4e2a\u662f\u76ee\u7684\u64cd\u4f5c\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6e90\u64cd\u4f5c\u6570\u3002","title":"\u6570\u636e\u4f20\u9001\u6307\u4ee4"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#mov","text":"MOV \u6307\u4ee4\u7528\u4e8e\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u9001\uff08\u4e00\u4e2a\u5b57\u8282\uff09\uff0c\u540e\u7f00\u5982\u679c\u52a0 W \u8868\u793a\u4f20\u9001\u4e00\u4e2a\u5b57\u7684\u6570\u636e\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 LDI R16 , 0x10 ; R16 = 0x10 MOV R0 , R16 ; R0 = 0x10 LDI R16 , 0x20 ; R16 = 0x20 LDI R17 , 0x30 ; R17 = 0x30 MOVW R0 , R16 ; R0 = 0x20, R1 = 0x30","title":"MOV"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#ld","text":"LD \u6307\u4ee4\u7528\u4e8e\u5c06\u6570\u636e\u4ece\u6570\u636e\u7a7a\u95f4\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u540e\u7f00\u52a0 I \u8868\u793a\u52a0\u8f7d\u7acb\u5373\u6570\uff0c\u52a0 D \u8868\u793a\u504f\u79fb\u91cf\u5bfb\u5740\uff0c\u52a0 S \u8868\u793a\u76f4\u63a5\u5bfb\u5740\u3002 X / Y / Z \u5bc4\u5b58\u5668\u53ef\u4ee5\u7528\u4e8e\u95f4\u63a5\u5bfb\u5740\uff0c\u5982\u679c\u524d\u7f00\u52a0 - \uff0c\u8868\u793a\u6267\u884c\u64cd\u4f5c\u524d\u5bc4\u5b58\u5668\u7684\u503c\u81ea\u51cf\u4e00\uff0c\u5982\u679c\u540e\u7f00\u52a0 + \uff0c\u8868\u793a\u6267\u884c\u64cd\u4f5c\u540e\u5bc4\u5b58\u5668\u7684\u503c\u81ea\u52a0\u4e00\u3002 Y / Z \u5bc4\u5b58\u5668\u53ef\u4ee5\u7528\u4e8e\u504f\u79fb\u91cf\u5bfb\u5740\uff08\u6ce8\u610f\u4e0d\u5305\u62ec X \u5bc4\u5b58\u5668\uff09\uff0c\u540e\u9762\u52a0 +q \u8868\u793a\u504f\u79fb\u91cf\u4e3a q \u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 LDI R16 , 0xAA ; R16 = 0xAA LDI XL , 0x00 LDI XH , 0x01 ; X = 0x0100 ST X , R16 ; (0x0100) = 0xAA LD R0 , X + ; R0 = 0xAA, X = 0x0101 LDI ZL , 0xF1 LDI ZH , 0x00 ; Z = 0x00F1 LDD R1 , Z + 0xF ; R1 = 0xAA LDS R2 , 0x0100 ; R2 = 0xAA","title":"LD"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#st","text":"ST \u6307\u4ee4\u7528\u4e8e\u5c06\u6570\u636e\u4ece\u5bc4\u5b58\u5668\u5199\u5165\u5230\u6570\u636e\u7a7a\u95f4\u4e2d\uff0c\u540e\u7f00\u52a0 D / S \u7684\u610f\u4e49\u540c LD \uff0c\u6ce8\u610f ST \u4e0d\u652f\u6301\u7acb\u5373\u5bfb\u5740\uff0c\u5373\u6ca1\u6709 STI \u8fd9\u6837\u7684\u6307\u4ee4\uff01 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 LDI R16 , 0x55 ; R16 = 0x55 LDI XL , 0x80 LDI XH , 0x01 ; X = 0x0180 ST X , R16 ; (0x0180) = 0x55 LD R0 , X ; R0 = 0x55 LDI R16 , 0xAA ; R16 = 0xAA LDI ZL , 0x50 LDI ZH , 0x01 ; Z = 0x0150 STD Z + 0x30 , R16 ; (0x0180) = 0xAA LD R1 , X ; R1 = 0xAA LDI R16 , 0xA5 ; R16 = 0xA5 STS 0x0180 , R16 ; (0x0180) = 0xA5 LD R2 , X ; R2 = 0xA5","title":"ST"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#lpm-spm","text":"LPM / SPM \u6307\u4ee4\u7528\u4e8e\u5c06\u6570\u636e\u4ece\u7a0b\u5e8f\u7a7a\u95f4\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668/\u4ece\u5bc4\u5b58\u5668\u5199\u5165\u5230\u7a0b\u5e8f\u7a7a\u95f4\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 LDI ZL , lo8 ( const ) LDI ZH , hi8 ( const ) ; Z = const LPM R0 , Z + ; R0 = 0xA5, Z = CONST + 1 LPM R1 , Z + ; R1 = 0x5A, Z = CONST + 2 LPM R2 , Z + ; R2 = 0x55, Z = CONST + 3 LPM R3 , Z ; R3 = 0xAA const: .byte 0xA5 .byte 0x5A .word 0xAA55 SPM \u6307\u4ee4\u7684\u7528\u6cd5\u8f83\u4e3a\u7279\u6b8a\uff0c\u540e\u9762\u6709\u673a\u4f1a\u518d\u6765\u4ecb\u7ecd\u3002","title":"LPM / SPM"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#in-out","text":"IN / OUT \u7528\u4e8e\u4eceI/O\u7a7a\u95f4\u8bfb\u5165\u6570\u636e\u5230\u5bc4\u5b58\u5668/\u5411I/O\u7a7a\u95f4\u5199\u5165\u5bc4\u5b58\u5668\u4e2d\u7684\u6570\u636e\uff0c\u6ce8\u610f P \u4e3aI/O\u7a7a\u95f4\u7684\u5730\u5740\uff0c\u6b64\u547d\u4ee4\u4e0d\u80fd\u8bbf\u95ee\u6269\u5c55I/O\u7a7a\u95f4\u3002 \u4f8b\u5982\uff1a 1 2 OUT DDRB , 0x00 ; DDRB = 0xAA IN R0 , DDRB ; R0 = 0xAA","title":"IN / OUT"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#push-pop","text":"PUSH / POP \u7528\u4e8e\u5c06\u6570\u636e\u538b\u5165/\u5f39\u51fa\u6808\uff0c\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610fSP\u7684\u521d\u59cb\u503c\u8981\u8bbe\u7f6e\u6b63\u786e\uff08AVR\u662f\u7a7a\u51cf\u6808\uff09\uff0c\u5e76\u8981\u907f\u514d\u51fa\u73b0\u6808\u6ea2\u51fa\u7684\u60c5\u51b5\u3002 \u4f8b\u5982\uff1a 1 2 3 LDI R16 , 0xA5 ; R16 = 0xA5 PUSH R16 ; (SP) = 0xA5, SP -= 1 POP R0 ; R0 = 0xA5, SP += 1","title":"PUSH / POP"},{"location":"Embed/AVR%E6%B1%87%E7%BC%96%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/#_6","text":"ATmega328P Datasheet AVR Instruction Set Manual \u767e\u5ea6\u767e\u79d1 - \u4f2a\u6307\u4ee4","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","text":"\u4f7f\u7528MkDocs\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2 \u00b6 \u63a5\u89e6\u7f16\u7a0b\u5df2\u7ecf\u597d\u51e0\u5e74\u4e86\uff0c\u9605\u8bfb\u4e86\u65e0\u6570\u5927\u4f6c\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u4f46\u662f\u4ece\u6765\u6ca1\u6709\u81ea\u5df1\u5199\u8fc7\u3002\u8fd9\u5176\u4e2d\u6700\u91cd\u8981\u7684\u539f\u56e0\u5f53\u7136\u662f\u61d2\u60f0\uff0c\u89c9\u5f97\u5199\u535a\u5ba2\u592a\u8d39\u65f6\u95f4\u4e86\uff0c\u5bf9\u81ea\u5df1\u7684\u5e2e\u52a9\u4e5f\u4e0d\u5927\u3002\u53ef\u662f\u5982\u4eca\u53d1\u73b0\u81ea\u5df1\u7684\u8bb0\u6027\u8d8a\u6765\u8d8a\u6349\u6025\u4e86\uff0c\u67d0\u6837\u6280\u672f\u5728\u4e00\u6bb5\u65f6\u95f4\u4e0d\u63a5\u89e6\u4e4b\u540e\uff0c\u5c31\u51e0\u4e4e\u5b8c\u5168\u5fd8\u8bb0\u4e86\u3002\u5bf9\u6b64\u6211\u5f88\u662f\u82e6\u607c\uff0c\u4e8e\u662f\u840c\u751f\u4e86\u5199\u535a\u5ba2\u7684\u60f3\u6cd5\uff0c\u6bd5\u7adf\u597d\u8bb0\u6027\u4e0d\u5982\u70c2\u7b14\u5934\u561b\u3002\u66fe\u7ecf\u542c\u8bf4\u8fc7GitHub\u4e0a\u53ef\u4ee5\u642d\u5efa\u535a\u5ba2\uff0c\u4e5f\u770b\u5230\u5f88\u591a\u4eba\u662f\u8fd9\u6837\u505a\u7684\uff0c\u6b63\u597d\u501f\u8fd9\u4e2a\u673a\u4f1a\u597d\u597d\u7814\u7a76\u4e0b\u3002 MkDocs\u4ecb\u7ecd \u00b6 \u6839\u636e MkDocs \u5b98\u7f51\u4ecb\u7ecd\uff1a MkDocs is a fast , simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. MkDocs\u662f\u4e00\u4e2a \u5feb\u901f \u3001 \u7b80\u5355 \u3001 \u534e\u4e3d \u7684\u9759\u6001\u7ad9\u70b9\u751f\u6210\u5668\uff0c\u9002\u7528\u4e8e\u6784\u5efa\u9879\u76ee\u6587\u6863\u3002\u6587\u6863\u6e90\u6587\u4ef6\u4f7f\u7528Markdown\u7f16\u5199\uff0c\u5e76\u4f7f\u7528\u5355\u4e2aYAML\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\u3002 MkDocs\u7684\u7279\u70b9\u6709\uff1a \u591a\u4e2a\u6f02\u4eae\u4e3b\u9898 \u6613\u4e8e\u4e2a\u6027\u5316 \u5b9e\u65f6\u9884\u89c8 \u968f\u5904\u6258\u7ba1 \u5feb\u901f\u642d\u5efa \u00b6 \u65b0\u5efaGitHub\u4ed3\u5e93 \u00b6 \u6253\u5f00 GitHub \u5b98\u7f51\u5e76\u767b\u5f55\uff0c\u65b0\u5efa\u4e00\u4e2a\u4ed3\u5e93\uff0c\u540d\u79f0\u5fc5\u987b\u4e3a <username>.github.io \u5c06\u8fd9\u4e2a\u4ed3\u5e93\u514b\u9686\u5230\u672c\u5730\uff0c\u8fd9\u91cc\u91cd\u547d\u540d\u4e3a github-pages 1 git clone https://github.com/<username>/<username>.github.io.git github-pages \u5b89\u88c5MkDocs\u7a0b\u5e8f \u00b6 \u8fdb\u5165 github-pages \u76ee\u5f55 1 cd github-pages \u521b\u5efapython\u865a\u62df\u73af\u5883\uff0c\u8fd9\u91cc\u4f7f\u7528 pipenv 1 pipenv install \u5b89\u88c5MkDocs\u7a0b\u5e8f 1 pipenv install mkdocs \u8fdb\u5165python\u865a\u62df\u73af\u5883 1 pipenv shell \u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f 1 mkdocs --version \u5982\u679c\u5b89\u88c5\u6210\u529f\uff0c\u5219\u5e94\u8be5\u4f1a\u8f93\u51faMkDocs\u7684\u7248\u672c\u4fe1\u606f \u521b\u5efaMkDocs\u5de5\u7a0b \u00b6 \u5728\u5f53\u524d\u76ee\u5f55( github-pages )\u4e0b\u65b0\u5efa\u5de5\u7a0b 1 mkdocs new . \u7136\u540e\u7f16\u8bd1MkDos\u6587\u6863 1 mkdocs build \u8fd9\u65f6\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210 site \u6587\u4ef6\u5939\uff0c\u91cc\u9762\u4fdd\u5b58\u7740\u7f51\u7ad9\u7684\u9759\u6001\u6587\u4ef6 \u9884\u89c8\u548c\u90e8\u7f72 \u00b6 MkDocs\u652f\u6301\u5728\u90e8\u7f72\u4e4b\u524d\uff0c\u5b9e\u65f6\u9884\u89c8\u7f51\u9875\u5185\u5bb9 1 mkdocs serve -a 0 .0.0.0:8000 \u5176\u4e2d\u7684 -a \u9009\u9879\u7528\u4e8e\u6307\u5b9a\u7ed1\u5b9a\u7684 <IP:PORT> \uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a localhost:8000 \u5982\u679c\u9884\u89c8\u53d1\u73b0\u95ee\u9898\uff0c\u76f4\u63a5\u4fee\u6539\u6587\u6863\u6e90\u6587\u4ef6\uff0cMkDocs\u68c0\u6d4b\u5230\u6587\u4ef6\u53d1\u751f\u53d8\u5316\u4f1a\u81ea\u52a8\u66f4\u65b0\u9884\u89c8\u5185\u5bb9 \u9884\u89c8\u5982\u679c\u6ca1\u6709\u53d1\u73b0\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u90e8\u7f72\u5230GitHub\u4e86 1 mkdocs gh-deploy --clean \u6267\u884c\u7ed3\u675f\u540e\uff0c\u67e5\u770bGitHub\u4ed3\u5e93\uff0c\u53d1\u73b0\u591a\u4e86\u4e00\u4e2a gh-pages \u5206\u652f\uff0c\u8fd9\u4e2a\u5206\u652f\u91cc\u5b58\u653e\u7684\u5c31\u662f site \u6587\u4ef6\u5939\u4e2d\u7684\u5185\u5bb9 \u6700\u540e\u4e00\u6b65\uff0c\u914d\u7f6eGitHub Pages\u7684\u6784\u5efa\u548c\u90e8\u7f72\u5206\u652f\uff0c\u5c06 Settings -> Pages -> Build and deployment -> Branch \u8bbe\u7f6e\u4e3a gh-pages/(root) \uff0c\u70b9\u51fb Save \u4fdd\u5b58\u8bbe\u7f6e \u8fd9\u65f6\u7406\u8bba\u4e0a\u5c31\u53ef\u4ee5\u6b63\u5e38\u8bbf\u95ee\u81ea\u5df1\u521a\u521a\u642d\u5efa\u7684\u535a\u5ba2\u4e86\uff0c\u5728\u6d4f\u89c8\u5668\u5730\u5740\u680f\u4e2d\u8f93\u5165 https://<username>.github.io/ \uff0c\u82e5\u51fa\u73b0MkDocs\u7684\u6b22\u8fce\u9875\u5219\u8bf4\u660e\u90e8\u7f72\u6210\u529f \u914d\u7f6e\u7f51\u9875 \u00b6 MkDocs\u5de5\u7a0b\u7684\u6240\u6709\u914d\u7f6e\u90fd\u96c6\u6210\u5728 mkdocs.yml \u6587\u4ef6\u4e2d \u4fee\u6539\u7f51\u9875\u540d\u79f0 \u00b6 \u7f51\u9875\u540d\u79f0\u5c31\u662f\u663e\u793a\u5728\u6d4f\u89c8\u5668\u6807\u7b7e\u4ee5\u53ca\u7f51\u9875\u5de6\u4e0a\u4f4d\u7f6e\u7684\u5185\u5bb9\uff0c\u9ed8\u8ba4\u4e3a My Docs \uff0c\u53ef\u4ee5\u5728 mkdocs.yml \u6587\u4ef6\u4e2d\u7684\u8bbe\u7f6e site_name \u6765\u6539\u53d8 mkdocs.yml 1 site_name : <\u7f51\u9875\u540d\u79f0> \u4fee\u6539\u4e3b\u9898 \u00b6 MkDocs\u652f\u6301\u591a\u4e2a\u4e3b\u9898\uff0c\u5185\u7f6e\u4e3b\u9898\u6709 mkdocs \u548c readthedocs \uff0c\u7b2c\u4e09\u65b9\u4e3b\u9898\u53ef\u4ee5\u5728 MkDocs Wiki \u627e\u5230\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e3b\u9898 \u8fd9\u91cc\u6211\u662f\u7528\u7684\u662f\u6bd4\u8f83\u53d7\u6b22\u8fce\u7684 material \u4e3b\u9898 1 pipenv install mkdocs-material material \u4e3b\u9898\u7684\u8be6\u7ec6\u914d\u7f6e\u8bf4\u660e\u53ef\u4ee5\u53c2\u9605 Material for MkDocs \uff0c\u8fd9\u91cc\u6211\u7684\u914d\u7f6e\u5982\u4e0b mkdocs.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 theme : name : material language : zh hljs_languages : - yaml markdown_extensions : - toc : permalink : true - pymdownx.highlight : linenums : true anchor_linenums : true - pymdownx.inlinehilite - pymdownx.superfences name \u6307\u5b9a\u4f7f\u7528\u7684\u4e3b\u9898\u540d\u79f0 language \u6307\u5b9a\u7f51\u9875\u8bed\u8a00 hljs_languages \u6307\u5b9a\u989d\u5916\u9700\u8981\u9ad8\u4eae\u7684\u8bed\u8a00 toc \u7528\u4e8e\u8bbe\u7f6e\u76ee\u5f55\uff0c permalink: true \u8868\u793a\u4e3a\u7f51\u9875\u4e2d\u7684\u4e00\u7ea7/\u4e8c\u7ea7/\u4e09\u7ea7/...\u6807\u9898\u751f\u6210\u94fe\u63a5 pymdownx.highlight \u7528\u4e8e\u8bbe\u7f6e\u4ee3\u7801\u9ad8\u4eae\uff0c linenums: true \u8868\u793a\u663e\u793a\u884c\u53f7\uff0c anchor_linenums: true \u7528\u4e8e\u4e3a\u4ee3\u7801\u5757\u7684\u884c\u53f7\u751f\u6210\u94fe\u63a5 pymdownx.inlinehilite \u542f\u7528\u5bf9\u5185\u8054\u4ee3\u7801\u9ad8\u4eae\u7684\u652f\u6301 pymdownx.superfences \u5141\u8bb8\u5728\u4ee3\u7801\u548c\u5185\u5bb9\u5757\u4e4b\u95f4\u4efb\u610f\u5d4c\u5957 \u6700\u7ec8\u6548\u679c\u5982\u4e0b \u53d1\u5e03\u6587\u7ae0 \u00b6 MkDocs\u7684\u6587\u7ae0\u4ee5markdown\u6587\u4ef6\u7684\u5f62\u5f0f\u5b58\u50a8\u5728docs\u6587\u4ef6\u5939\u4e0b\uff0c\u5176\u4e2d index.md \u4e3a\u4e3b\u9875 \u53d1\u5e03\u65b0\u6587\u7ae0\u65f6\uff0c\u5728docs\u76ee\u5f55\u4e0b\u65b0\u5efa <article>.md \u6587\u4ef6\u5e76\u7f16\u8f91 \u7136\u540e\u4fee\u6539 mkdocs.yml \u6587\u4ef6\uff0c\u5c06\u65b0\u6587\u7ae0\u52a0\u5230\u5bfc\u822a\u680f\u4e2d mkdocs.yml 1 2 3 nav : - \u4e3b\u9875 : index.md - <\u6807\u9898> : <article>.md \u6807\u9898\u53ef\u4ee5\u4e0d\u8bbe\u7f6e\uff0cMkDocs\u6309\u7167 nav\u914d\u7f6e\u7684\u6807\u9898 > \u6587\u7ae0\u4e2d\u5b9a\u4e49\u7684\u6807\u9898(h1) > \u6587\u4ef6\u540d \u7684\u987a\u5e8f\u8fdb\u884c\u63a8\u65ad \u5982\u679c\u8981\u4f7f\u7528\u591a\u7ea7\u5bfc\u822a\uff0c\u5219\u53ef\u4ee5\u8fd9\u6837\u914d\u7f6e mkdocs.yml 1 2 3 4 nav : - \u4e3b\u9875 : index.md - <\u5206\u7c7b> : - <\u6807\u9898> : <aritle>.md \u7136\u540e\u6267\u884c mkdocs gh-deploy \u547d\u4ee4\u90e8\u7f72\u5230GitHub \u81ea\u52a8\u90e8\u7f72 \u00b6 \u4e00\u822c\u4f1a\u5c06MkDocs\u6e90\u6587\u4ef6\u4e5f\u63a8\u9001\u5230GitHub\u4ee5\u9632\u6b62\u4e22\u5931\uff0c\u8fd9\u91cc\u6211\u5c31\u76f4\u63a5\u63a8\u9001\u5230 main \u5206\u652f \u65b0\u5efa .gitignore \u6587\u4ef6\uff0c\u5ffd\u7565\u6389\u9664 docs \u3001 mkdocs.yml \u4ee5\u53ca git \u76f8\u5173\u6587\u4ef6\u4e4b\u5916\u7684\u6587\u4ef6 .gitignore 1 2 3 4 5 /* !/docs !/mkdocs.yml !/.gitignore !/.github \u7136\u540e\u6211\u4eec\u5728\u7f16\u5199\u5b8c\u6587\u7ae0\u540e\uff0c\u4e00\u822c\u81f3\u5c11\u90fd\u8981\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4 1 2 3 4 git add . git commit -m 'new article' git push # \u7b2c\u4e00\u6b21push\u65f6\u6267\u884cgit push -u origin main mkdocs gh-deploy \u672c\u7740\u7701\u4e00\u70b9\u662f\u4e00\u70b9\u7684\u539f\u5219\uff0c\u524d\u9762\u51e0\u4e2a git \u76f8\u5173\u7684\u547d\u4ee4\u65e0\u6cd5\u7701\u7565\uff0c\u4f46 mkdocs gh-deploy \u53ef\u4ee5\u901a\u8fc7GitHub Actions\u6765\u5e2e\u52a9\u6211\u4eec\u81ea\u52a8\u5b8c\u6210 \u5728\u4ed3\u5e93\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa .github/workflows \u6587\u4ef6\u5939 1 mkdir -p .github/workflows \u5728 .github/workflows \u6587\u4ef6\u5939\u4e0b\u65b0\u5efa gh-deploy.yml \u6587\u4ef6\uff0c\u5176\u4ed6\u6587\u4ef6\u540d\u4e5f\u53ef\u4ee5\uff0c\u5185\u5bb9\u5982\u4e0b\uff0c\u5177\u4f53\u542b\u4e49\u53ef\u4ee5\u53c2\u8003 Deploy MkDocs gh-deploy.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 name : Publish docs via GitHub Pages on : push : branches : - main jobs : build : name : Deploy docs runs-on : ubuntu-latest steps : - name : Checkout main uses : actions/checkout@v2 - name : Deploy docs uses : mhausenblas/mkdocs-deploy-gh-pages@master env : GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} EXTRA_PACKAGES : build-base \u5728GitHub\u4ed3\u5e93\u9875\u9762\u4e2d\uff0c\u5c06 Settings -> Actions -> General -> Workflow Permissions \u8bbe\u7f6e\u4e3a Read an write permissions \uff0c\u70b9\u51fb Save \u4fdd\u5b58\u8bbe\u7f6e \u8fd9\u6837\u6bcf\u6b21\u7f16\u5199\u5b8c\u6587\u7ae0\uff0c\u53ea\u9700\u6210\u529f\u6267\u884c git push \uff0cGitHub\u5c31\u4f1a\u81ea\u52a8\u5e2e\u52a9\u6211\u4eec\u90e8\u7f72 \u53c2\u8003\u8d44\u6599 \u00b6 MkDocs\u5b98\u7f51 MkDocs\u4e2d\u6587\u6587\u6863 Material for MkDocs Mkdocs \u914d\u7f6e\u548c\u4f7f\u7528 Deploy MkDocs","title":"\u4f7f\u7528MkDocs\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#mkdocs","text":"\u63a5\u89e6\u7f16\u7a0b\u5df2\u7ecf\u597d\u51e0\u5e74\u4e86\uff0c\u9605\u8bfb\u4e86\u65e0\u6570\u5927\u4f6c\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u4f46\u662f\u4ece\u6765\u6ca1\u6709\u81ea\u5df1\u5199\u8fc7\u3002\u8fd9\u5176\u4e2d\u6700\u91cd\u8981\u7684\u539f\u56e0\u5f53\u7136\u662f\u61d2\u60f0\uff0c\u89c9\u5f97\u5199\u535a\u5ba2\u592a\u8d39\u65f6\u95f4\u4e86\uff0c\u5bf9\u81ea\u5df1\u7684\u5e2e\u52a9\u4e5f\u4e0d\u5927\u3002\u53ef\u662f\u5982\u4eca\u53d1\u73b0\u81ea\u5df1\u7684\u8bb0\u6027\u8d8a\u6765\u8d8a\u6349\u6025\u4e86\uff0c\u67d0\u6837\u6280\u672f\u5728\u4e00\u6bb5\u65f6\u95f4\u4e0d\u63a5\u89e6\u4e4b\u540e\uff0c\u5c31\u51e0\u4e4e\u5b8c\u5168\u5fd8\u8bb0\u4e86\u3002\u5bf9\u6b64\u6211\u5f88\u662f\u82e6\u607c\uff0c\u4e8e\u662f\u840c\u751f\u4e86\u5199\u535a\u5ba2\u7684\u60f3\u6cd5\uff0c\u6bd5\u7adf\u597d\u8bb0\u6027\u4e0d\u5982\u70c2\u7b14\u5934\u561b\u3002\u66fe\u7ecf\u542c\u8bf4\u8fc7GitHub\u4e0a\u53ef\u4ee5\u642d\u5efa\u535a\u5ba2\uff0c\u4e5f\u770b\u5230\u5f88\u591a\u4eba\u662f\u8fd9\u6837\u505a\u7684\uff0c\u6b63\u597d\u501f\u8fd9\u4e2a\u673a\u4f1a\u597d\u597d\u7814\u7a76\u4e0b\u3002","title":"\u4f7f\u7528MkDocs\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#mkdocs_1","text":"\u6839\u636e MkDocs \u5b98\u7f51\u4ecb\u7ecd\uff1a MkDocs is a fast , simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. MkDocs\u662f\u4e00\u4e2a \u5feb\u901f \u3001 \u7b80\u5355 \u3001 \u534e\u4e3d \u7684\u9759\u6001\u7ad9\u70b9\u751f\u6210\u5668\uff0c\u9002\u7528\u4e8e\u6784\u5efa\u9879\u76ee\u6587\u6863\u3002\u6587\u6863\u6e90\u6587\u4ef6\u4f7f\u7528Markdown\u7f16\u5199\uff0c\u5e76\u4f7f\u7528\u5355\u4e2aYAML\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\u3002 MkDocs\u7684\u7279\u70b9\u6709\uff1a \u591a\u4e2a\u6f02\u4eae\u4e3b\u9898 \u6613\u4e8e\u4e2a\u6027\u5316 \u5b9e\u65f6\u9884\u89c8 \u968f\u5904\u6258\u7ba1","title":"MkDocs\u4ecb\u7ecd"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#_1","text":"","title":"\u5feb\u901f\u642d\u5efa"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#github","text":"\u6253\u5f00 GitHub \u5b98\u7f51\u5e76\u767b\u5f55\uff0c\u65b0\u5efa\u4e00\u4e2a\u4ed3\u5e93\uff0c\u540d\u79f0\u5fc5\u987b\u4e3a <username>.github.io \u5c06\u8fd9\u4e2a\u4ed3\u5e93\u514b\u9686\u5230\u672c\u5730\uff0c\u8fd9\u91cc\u91cd\u547d\u540d\u4e3a github-pages 1 git clone https://github.com/<username>/<username>.github.io.git github-pages","title":"\u65b0\u5efaGitHub\u4ed3\u5e93"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#mkdocs_2","text":"\u8fdb\u5165 github-pages \u76ee\u5f55 1 cd github-pages \u521b\u5efapython\u865a\u62df\u73af\u5883\uff0c\u8fd9\u91cc\u4f7f\u7528 pipenv 1 pipenv install \u5b89\u88c5MkDocs\u7a0b\u5e8f 1 pipenv install mkdocs \u8fdb\u5165python\u865a\u62df\u73af\u5883 1 pipenv shell \u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f 1 mkdocs --version \u5982\u679c\u5b89\u88c5\u6210\u529f\uff0c\u5219\u5e94\u8be5\u4f1a\u8f93\u51faMkDocs\u7684\u7248\u672c\u4fe1\u606f","title":"\u5b89\u88c5MkDocs\u7a0b\u5e8f"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#mkdocs_3","text":"\u5728\u5f53\u524d\u76ee\u5f55( github-pages )\u4e0b\u65b0\u5efa\u5de5\u7a0b 1 mkdocs new . \u7136\u540e\u7f16\u8bd1MkDos\u6587\u6863 1 mkdocs build \u8fd9\u65f6\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210 site \u6587\u4ef6\u5939\uff0c\u91cc\u9762\u4fdd\u5b58\u7740\u7f51\u7ad9\u7684\u9759\u6001\u6587\u4ef6","title":"\u521b\u5efaMkDocs\u5de5\u7a0b"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#_2","text":"MkDocs\u652f\u6301\u5728\u90e8\u7f72\u4e4b\u524d\uff0c\u5b9e\u65f6\u9884\u89c8\u7f51\u9875\u5185\u5bb9 1 mkdocs serve -a 0 .0.0.0:8000 \u5176\u4e2d\u7684 -a \u9009\u9879\u7528\u4e8e\u6307\u5b9a\u7ed1\u5b9a\u7684 <IP:PORT> \uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a localhost:8000 \u5982\u679c\u9884\u89c8\u53d1\u73b0\u95ee\u9898\uff0c\u76f4\u63a5\u4fee\u6539\u6587\u6863\u6e90\u6587\u4ef6\uff0cMkDocs\u68c0\u6d4b\u5230\u6587\u4ef6\u53d1\u751f\u53d8\u5316\u4f1a\u81ea\u52a8\u66f4\u65b0\u9884\u89c8\u5185\u5bb9 \u9884\u89c8\u5982\u679c\u6ca1\u6709\u53d1\u73b0\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u90e8\u7f72\u5230GitHub\u4e86 1 mkdocs gh-deploy --clean \u6267\u884c\u7ed3\u675f\u540e\uff0c\u67e5\u770bGitHub\u4ed3\u5e93\uff0c\u53d1\u73b0\u591a\u4e86\u4e00\u4e2a gh-pages \u5206\u652f\uff0c\u8fd9\u4e2a\u5206\u652f\u91cc\u5b58\u653e\u7684\u5c31\u662f site \u6587\u4ef6\u5939\u4e2d\u7684\u5185\u5bb9 \u6700\u540e\u4e00\u6b65\uff0c\u914d\u7f6eGitHub Pages\u7684\u6784\u5efa\u548c\u90e8\u7f72\u5206\u652f\uff0c\u5c06 Settings -> Pages -> Build and deployment -> Branch \u8bbe\u7f6e\u4e3a gh-pages/(root) \uff0c\u70b9\u51fb Save \u4fdd\u5b58\u8bbe\u7f6e \u8fd9\u65f6\u7406\u8bba\u4e0a\u5c31\u53ef\u4ee5\u6b63\u5e38\u8bbf\u95ee\u81ea\u5df1\u521a\u521a\u642d\u5efa\u7684\u535a\u5ba2\u4e86\uff0c\u5728\u6d4f\u89c8\u5668\u5730\u5740\u680f\u4e2d\u8f93\u5165 https://<username>.github.io/ \uff0c\u82e5\u51fa\u73b0MkDocs\u7684\u6b22\u8fce\u9875\u5219\u8bf4\u660e\u90e8\u7f72\u6210\u529f","title":"\u9884\u89c8\u548c\u90e8\u7f72"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#_3","text":"MkDocs\u5de5\u7a0b\u7684\u6240\u6709\u914d\u7f6e\u90fd\u96c6\u6210\u5728 mkdocs.yml \u6587\u4ef6\u4e2d","title":"\u914d\u7f6e\u7f51\u9875"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#_4","text":"\u7f51\u9875\u540d\u79f0\u5c31\u662f\u663e\u793a\u5728\u6d4f\u89c8\u5668\u6807\u7b7e\u4ee5\u53ca\u7f51\u9875\u5de6\u4e0a\u4f4d\u7f6e\u7684\u5185\u5bb9\uff0c\u9ed8\u8ba4\u4e3a My Docs \uff0c\u53ef\u4ee5\u5728 mkdocs.yml \u6587\u4ef6\u4e2d\u7684\u8bbe\u7f6e site_name \u6765\u6539\u53d8 mkdocs.yml 1 site_name : <\u7f51\u9875\u540d\u79f0>","title":"\u4fee\u6539\u7f51\u9875\u540d\u79f0"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#_5","text":"MkDocs\u652f\u6301\u591a\u4e2a\u4e3b\u9898\uff0c\u5185\u7f6e\u4e3b\u9898\u6709 mkdocs \u548c readthedocs \uff0c\u7b2c\u4e09\u65b9\u4e3b\u9898\u53ef\u4ee5\u5728 MkDocs Wiki \u627e\u5230\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e3b\u9898 \u8fd9\u91cc\u6211\u662f\u7528\u7684\u662f\u6bd4\u8f83\u53d7\u6b22\u8fce\u7684 material \u4e3b\u9898 1 pipenv install mkdocs-material material \u4e3b\u9898\u7684\u8be6\u7ec6\u914d\u7f6e\u8bf4\u660e\u53ef\u4ee5\u53c2\u9605 Material for MkDocs \uff0c\u8fd9\u91cc\u6211\u7684\u914d\u7f6e\u5982\u4e0b mkdocs.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 theme : name : material language : zh hljs_languages : - yaml markdown_extensions : - toc : permalink : true - pymdownx.highlight : linenums : true anchor_linenums : true - pymdownx.inlinehilite - pymdownx.superfences name \u6307\u5b9a\u4f7f\u7528\u7684\u4e3b\u9898\u540d\u79f0 language \u6307\u5b9a\u7f51\u9875\u8bed\u8a00 hljs_languages \u6307\u5b9a\u989d\u5916\u9700\u8981\u9ad8\u4eae\u7684\u8bed\u8a00 toc \u7528\u4e8e\u8bbe\u7f6e\u76ee\u5f55\uff0c permalink: true \u8868\u793a\u4e3a\u7f51\u9875\u4e2d\u7684\u4e00\u7ea7/\u4e8c\u7ea7/\u4e09\u7ea7/...\u6807\u9898\u751f\u6210\u94fe\u63a5 pymdownx.highlight \u7528\u4e8e\u8bbe\u7f6e\u4ee3\u7801\u9ad8\u4eae\uff0c linenums: true \u8868\u793a\u663e\u793a\u884c\u53f7\uff0c anchor_linenums: true \u7528\u4e8e\u4e3a\u4ee3\u7801\u5757\u7684\u884c\u53f7\u751f\u6210\u94fe\u63a5 pymdownx.inlinehilite \u542f\u7528\u5bf9\u5185\u8054\u4ee3\u7801\u9ad8\u4eae\u7684\u652f\u6301 pymdownx.superfences \u5141\u8bb8\u5728\u4ee3\u7801\u548c\u5185\u5bb9\u5757\u4e4b\u95f4\u4efb\u610f\u5d4c\u5957 \u6700\u7ec8\u6548\u679c\u5982\u4e0b","title":"\u4fee\u6539\u4e3b\u9898"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#_6","text":"MkDocs\u7684\u6587\u7ae0\u4ee5markdown\u6587\u4ef6\u7684\u5f62\u5f0f\u5b58\u50a8\u5728docs\u6587\u4ef6\u5939\u4e0b\uff0c\u5176\u4e2d index.md \u4e3a\u4e3b\u9875 \u53d1\u5e03\u65b0\u6587\u7ae0\u65f6\uff0c\u5728docs\u76ee\u5f55\u4e0b\u65b0\u5efa <article>.md \u6587\u4ef6\u5e76\u7f16\u8f91 \u7136\u540e\u4fee\u6539 mkdocs.yml \u6587\u4ef6\uff0c\u5c06\u65b0\u6587\u7ae0\u52a0\u5230\u5bfc\u822a\u680f\u4e2d mkdocs.yml 1 2 3 nav : - \u4e3b\u9875 : index.md - <\u6807\u9898> : <article>.md \u6807\u9898\u53ef\u4ee5\u4e0d\u8bbe\u7f6e\uff0cMkDocs\u6309\u7167 nav\u914d\u7f6e\u7684\u6807\u9898 > \u6587\u7ae0\u4e2d\u5b9a\u4e49\u7684\u6807\u9898(h1) > \u6587\u4ef6\u540d \u7684\u987a\u5e8f\u8fdb\u884c\u63a8\u65ad \u5982\u679c\u8981\u4f7f\u7528\u591a\u7ea7\u5bfc\u822a\uff0c\u5219\u53ef\u4ee5\u8fd9\u6837\u914d\u7f6e mkdocs.yml 1 2 3 4 nav : - \u4e3b\u9875 : index.md - <\u5206\u7c7b> : - <\u6807\u9898> : <aritle>.md \u7136\u540e\u6267\u884c mkdocs gh-deploy \u547d\u4ee4\u90e8\u7f72\u5230GitHub","title":"\u53d1\u5e03\u6587\u7ae0"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#_7","text":"\u4e00\u822c\u4f1a\u5c06MkDocs\u6e90\u6587\u4ef6\u4e5f\u63a8\u9001\u5230GitHub\u4ee5\u9632\u6b62\u4e22\u5931\uff0c\u8fd9\u91cc\u6211\u5c31\u76f4\u63a5\u63a8\u9001\u5230 main \u5206\u652f \u65b0\u5efa .gitignore \u6587\u4ef6\uff0c\u5ffd\u7565\u6389\u9664 docs \u3001 mkdocs.yml \u4ee5\u53ca git \u76f8\u5173\u6587\u4ef6\u4e4b\u5916\u7684\u6587\u4ef6 .gitignore 1 2 3 4 5 /* !/docs !/mkdocs.yml !/.gitignore !/.github \u7136\u540e\u6211\u4eec\u5728\u7f16\u5199\u5b8c\u6587\u7ae0\u540e\uff0c\u4e00\u822c\u81f3\u5c11\u90fd\u8981\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4 1 2 3 4 git add . git commit -m 'new article' git push # \u7b2c\u4e00\u6b21push\u65f6\u6267\u884cgit push -u origin main mkdocs gh-deploy \u672c\u7740\u7701\u4e00\u70b9\u662f\u4e00\u70b9\u7684\u539f\u5219\uff0c\u524d\u9762\u51e0\u4e2a git \u76f8\u5173\u7684\u547d\u4ee4\u65e0\u6cd5\u7701\u7565\uff0c\u4f46 mkdocs gh-deploy \u53ef\u4ee5\u901a\u8fc7GitHub Actions\u6765\u5e2e\u52a9\u6211\u4eec\u81ea\u52a8\u5b8c\u6210 \u5728\u4ed3\u5e93\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa .github/workflows \u6587\u4ef6\u5939 1 mkdir -p .github/workflows \u5728 .github/workflows \u6587\u4ef6\u5939\u4e0b\u65b0\u5efa gh-deploy.yml \u6587\u4ef6\uff0c\u5176\u4ed6\u6587\u4ef6\u540d\u4e5f\u53ef\u4ee5\uff0c\u5185\u5bb9\u5982\u4e0b\uff0c\u5177\u4f53\u542b\u4e49\u53ef\u4ee5\u53c2\u8003 Deploy MkDocs gh-deploy.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 name : Publish docs via GitHub Pages on : push : branches : - main jobs : build : name : Deploy docs runs-on : ubuntu-latest steps : - name : Checkout main uses : actions/checkout@v2 - name : Deploy docs uses : mhausenblas/mkdocs-deploy-gh-pages@master env : GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} EXTRA_PACKAGES : build-base \u5728GitHub\u4ed3\u5e93\u9875\u9762\u4e2d\uff0c\u5c06 Settings -> Actions -> General -> Workflow Permissions \u8bbe\u7f6e\u4e3a Read an write permissions \uff0c\u70b9\u51fb Save \u4fdd\u5b58\u8bbe\u7f6e \u8fd9\u6837\u6bcf\u6b21\u7f16\u5199\u5b8c\u6587\u7ae0\uff0c\u53ea\u9700\u6210\u529f\u6267\u884c git push \uff0cGitHub\u5c31\u4f1a\u81ea\u52a8\u5e2e\u52a9\u6211\u4eec\u90e8\u7f72","title":"\u81ea\u52a8\u90e8\u7f72"},{"location":"Web/%E4%BD%BF%E7%94%A8MkDocs%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#_8","text":"MkDocs\u5b98\u7f51 MkDocs\u4e2d\u6587\u6587\u6863 Material for MkDocs Mkdocs \u914d\u7f6e\u548c\u4f7f\u7528 Deploy MkDocs","title":"\u53c2\u8003\u8d44\u6599"},{"location":"Web/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%AE%BE%E7%BD%AESilence%E4%B8%BB%E9%A2%98/","text":"\u535a\u5ba2\u56ed\u8bbe\u7f6eSilence\u4e3b\u9898 \u00b6 \u535a\u5ba2\u56ed\u7684\u63d0\u4f9b\u4e86\u4e00\u767e\u591a\u4e2a\u9ed8\u8ba4\u4e3b\u9898\uff0c\u4f46\u6211\u8fd8\u662f\u627e\u4e0d\u5230\u4e00\u4e2a\u5e72\u51c0\u3001\u7b80\u6d01\u3001\u7f8e\u89c2\u7684\u3002\u4e86\u89e3\u5230\u535a\u5ba2\u56ed\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e3b\u9898\uff0c\u4e8e\u662f\u5728\u7f51\u4e0a\u641c\u5bfb\u76f8\u5173\u5185\u5bb9\uff0c\u7ec8\u4e8e\u88ab\u6211\u53d1\u73b0\u4e86Silence\u2014\u2014\u4e00\u4e2a\u4e13\u6ce8\u4e8e\u9605\u8bfb\u7684\u535a\u5ba2\u56ed\u4e3b\u9898\u3002 Silence\u4ecb\u7ecd \u00b6 Silence \u662f\u4e00\u4e2a\u4e13\u6ce8\u4e8e\u9605\u8bfb\u7684\u535a\u5ba2\u56ed\u4e3b\u9898 \u754c\u9762\u7b80\u6d01\u4f18\u96c5\uff0c\u54cd\u5e94\u5f0f\u7f51\u9875\u8bbe\u8ba1 \u8f7b\u91cf\u914d\u7f6e\uff0c\u6587\u6863\u7ed9\u529b\uff0c\u975e\u5e38\u5bb9\u6613\u4f7f\u7528 \u63d0\u4f9b\u6697\u9ed1\u6a21\u5f0f\u548c\u591a\u79cd\u8272\u5f69\u4e3b\u9898\uff0c\u53ef\u968f\u65f6\u5207\u6362 \u652f\u6301\u81ea\u5b9a\u4e49\u5bfc\u822a\u680f\u83dc\u5355\u9879\u3001\u60ac\u6d6e\u6807\u9898\u76ee\u5f55\u7b49 \u63d0\u4f9b\u6587\u7ae0\u7248\u6743\u7b7e\u540d\u3001\u8d5e\u8d4f\u529f\u80fd\u7b49 \u9879\u76ee\u7ed3\u6784\u6e05\u6670\uff0c\u4ee3\u7801\u7b80\u5355\uff0c\u53ef\u5b9e\u73b0\u9ad8\u5ea6\u5b9a\u5236\u5316\u5f00\u53d1 \u90e8\u7f72\u4e3b\u9898 \u00b6 \u5728\u8fdb\u884c\u4e0b\u9762\u7684\u64cd\u4f5c\u4e4b\u524d\uff0c\u9700\u8981\u7533\u8bf7\u535a\u5ba2\u56ed\u7684JS\u6743\u9650\uff0c\u53c2\u8003 \u535a\u5ba2\u56ed\u7533\u8bf7JS\u6743\u9650\u6559\u7a0b \uff0c\u8fd9\u91cc\u4e0d\u505a\u4ecb\u7ecd \u6210\u529f\u5f00\u901aJS\u6743\u9650\u540e\uff0c\u8fdb\u5165\u535a\u5ba2\u56ed\u540e\u53f0\u201c\u8bbe\u7f6e\u201d\u9875\u9762 \u5728\u201c\u57fa\u672c\u8bbe\u7f6e\u201d\u4e2d\u8bbe\u7f6e\u535a\u5ba2\u6807\u9898\uff0c\u5e76\u9009\u62e9 Custom \u4f5c\u4e3a\u535a\u5ba2\u76ae\u80a4\uff0c\u6ce8\u610f\u535a\u5ba2\u5b50\u6807\u9898\u4e0d\u7528\u8bbe\u7f6e\uff0c\u56e0\u4e3aSilence\u4e0d\u652f\u6301 \u5728\u201c\u4ee3\u7801\u9ad8\u4eae\u201d\u4e2d\u8bbe\u7f6e\u6e32\u67d3\u5f15\u64ce\u4e3a highlight.js \uff0c\u53d6\u6d88\u52fe\u9009\u201c\u663e\u793a\u884c\u53f7\u201d\uff0c\u5e76\u5c06\u7cfb\u7edf\u4e3b\u9898\u8bbe\u4e3a cnblogs \u5728\u201c\u9875\u9762\u5b9a\u5236CSS\u4ee3\u7801\u201d\u4e2d\u52fe\u9009\u201c\u7981\u7528\u6a21\u677f\u9ed8\u8ba4CSS\u201d\uff0c\u5e76\u5728\u8f93\u5165\u6846\u4e2d\u586b\u5165\u5982\u4e0b\u5185\u5bb9 1 @ import url ( https :// cdn . jsdelivr . net / gh / esofar / cnblogs-theme-silence @ latest / dist / silence . min . css ) \u53ef\u4ee5\u901a\u8fc7 url \u4e2d\u7684 @ \u6307\u5b9a\u4e3b\u9898\u7684\u7248\u672c\uff0c\u8fd9\u91cc\u7684 @latest \u8868\u793a\u4f7f\u7528\u6700\u65b0\u7684\u7248\u672c\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u5176\u4ed6\u7248\u672c\uff0c\u6bd4\u5982 @3.0.0-rc2 \u3001 @3.0.0-beta4 \u7b49 \u5728\u201c\u9875\u811aHTML\u4ee3\u7801\u201d\u4e2d\u586b\u5165\u5982\u4e0b\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 < script > window . $silence = { avatar : 'https://files.cnblogs.com/files/blogs/611458/avatar.ico' , favicon : 'https://files.cnblogs.com/files/blogs/611458/favicon.ico' , github : 'https://github.com/chinjinyu' , defaultMode : 'auto' , defaultTheme : 'a' , navbars : [{ title : '\u6807\u7b7e' , url : 'https://www.cnblogs.com/chinjinyu/tag/' }, { title : '\u5f52\u6863' , url : 'https://www.cnblogs.com/chinjinyu/p/' }], showNavAdmin : true , catalog : { enable : true , index : true , active : false , levels : [ 'h2' , 'h3' , 'h4' ], }, signature : { enable : true , author : 'chinjinyu' , license : [ '\u7f72\u540d-\u975e\u5546\u4e1a\u6027\u4f7f\u7528-\u76f8\u540c\u65b9\u5f0f\u5171\u4eab 4.0 \u56fd\u9645' , 'https://creativecommons.org/licenses/by-nc-sa/4.0/' ], }, sponsor : { enable : true , wechat : 'https://files.cnblogs.com/files/blogs/611458/wechat.ico' , alipay : 'https://files.cnblogs.com/files/blogs/611458/alipay.ico' } }; </ script > < script src = \"https://cdn.jsdelivr.net/gh/esofar/cnblogs-theme-silence@latest/dist/silence.min.js\" ></ script > \u6ce8\u610f\u8fd9\u91cc\u6700\u540e\u4e00\u884c src \u4e2d @ \u7684\u7248\u672c\u9700\u8981\u548c\u201c\u9875\u9762\u5b9a\u5236CSS\u4ee3\u7801\u201d\u4e2d\u7684\u4fdd\u6301\u4e00\u81f4 avatar : \u535a\u5ba2\u4e3b\u9875\u5de6\u4fa7\u680f\u7684\u5934\u50cf favicon : \u7f51\u9875\u6807\u9898\u524d\u7684\u5c0f\u56fe\u6807 github : \u4e2a\u4eba\u7684GitHub\u4e3b\u9875\u5730\u5740\uff0c\u535a\u5ba2\u5de6\u4e0a\u89d2\u6709\u4e2aGitHub\u6302\u4ef6\uff0c\u70b9\u51fb\u65f6\u4f1a\u8fdb\u884c\u8df3\u8f6c defaultMode : \u4e3b\u9898\u6a21\u5f0f\uff0c\u6709 light / dark / auto \u4e09\u79cd\u9009\u9879 defaultTheme : \u9ed8\u8ba4\u52a0\u8f7d\u7684\u4e3b\u9898\u8272\u5f69\uff0c a \u8868\u793a\u84dd\u8272\uff0c\u5176\u4ed6\u503c\u53c2\u8003 \u5b98\u65b9\u6587\u6863 navbars : \u8bbe\u7f6e\u5bfc\u822a\u680f\u4e2d\u7684\u81ea\u5b9a\u4e49\u83dc\u5355\u9879 title : \u5bfc\u822a\u680f\u663e\u793a\u7684\u6807\u9898 url : \u5730\u5740 children : \u8bbe\u7f6e\u4e8c\u7ea7\u83dc\u5355\u9879 title : \u4e8c\u7ea7\u83dc\u5355\u6807\u9898 url : \u5730\u5740 target : _blank \u8868\u793a\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00 showNavAdmin : \u662f\u5426\u663e\u793a\u5bfc\u822a\u680f\u4e2d\u7684\u201c\u7ba1\u7406\u201d\u83dc\u5355\u9879 catalog : \u8bbe\u7f6e\u535a\u6587\u7684\u6807\u9898\u76ee\u5f55 enable : \u662f\u5426\u542f\u7528\u76ee\u5f55 index : \u662f\u5426\u5728\u76ee\u5f55\u6807\u9898\u524d\u6dfb\u52a0\u7d22\u5f15 active : \u662f\u5426\u76f4\u63a5\u663e\u793a\u76ee\u5f55 levels : \u8bbe\u7f6e\u9700\u8981\u751f\u6210\u76ee\u5f55\u7684\u6807\u9898\u7b49\u7ea7 signature : \u8bbe\u7f6e\u7248\u6743\u7b7e\u540d enable : \u662f\u5426\u542f\u7528\u7b7e\u540d author : \u4f5c\u8005 license : \u77e5\u8bc6\u5171\u4eab\u8bb8\u53ef\u534f\u8bae remark : \u5176\u4ed6\u5907\u6ce8 sponsor : \u8bbe\u7f6e\u6253\u8d4f enable : \u662f\u5426\u542f\u7528\u6253\u8d4f text : \u6253\u8d4f\u7684\u63d0\u793a\u4fe1\u606f paypal : PayPal\u6536\u6b3e\u7801 wechat : \u5fae\u4fe1\u6536\u6b3e\u7801 alipay : \u652f\u4ed8\u5b9d\u6536\u6b3e\u7801 \u5728\u201c\u9875\u9996HTML\u4ee3\u7801\u201d\u8f93\u5165\u6846\u4e2d\u586b\u5165\u5982\u4e0b\u4ee3\u7801 1 2 3 4 5 6 < div class = \"loading\" > < div class = \"box\" > < h2 > Loading </ h2 > < span ></ span >< span ></ span >< span ></ span >< span ></ span >< span ></ span >< span ></ span >< span ></ span > </ div > </ div > \u4ee3\u7801\u9ad8\u4eae\u53ca\u663e\u793a\u884c\u53f7 \u00b6 Slicence\u6700\u65b0\u7248\u672c\u4e0d\u80fd\u4ee3\u7801\u9ad8\u4eae\u548c\u663e\u793a\u884c\u53f7\u4e86\uff0c\u53c2\u89c1GitHub\u4e0a\u8fd9\u4e2a Issue #191 \uff0c\u4ee3\u7801\u5757\u7684\u5c55\u793a\u6548\u679c\u50cf\u8fd9\u6837 \u8fd9\u5bf9\u9605\u8bfb\u4ee3\u7801\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\uff0c\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u6848 \u4e00\u4e2a\u662f\u9000\u56de 3.0.0-beta4 \u4ee5\u53ca\u4e4b\u524d\u7248\u672c\u7684Silience\uff0c\u5e76\u5728\u914d\u7f6e\u4e2d\u6dfb\u52a0 hljsln: true \u5f00\u542f\u663e\u793a\u884c\u53f7 \u53e6\u4e00\u4e2a\u505a\u6cd5\u662f\uff0c\u5728\u201c\u4ee3\u7801\u9ad8\u4eae\u201d\u4e2d\u8bbe\u7f6e\u6e32\u67d3\u5f15\u64ce\u4e3a prismjs \uff0c\u52fe\u9009\u201c\u663e\u793a\u884c\u53f7\u201d\uff0c\u5e76\u5c06\u7cfb\u7edf\u4e3b\u9898\u8bbe\u4e3a prism-xonokai \u6548\u679c\u5982\u4e0b \u53c2\u8003\u8d44\u6599 \u00b6 Silence\u9879\u76ee Silence\u6587\u6863 \u535a\u5ba2\u56ed\u7533\u8bf7JS\u6743\u9650\u6559\u7a0b \u65b0\u7248\u672c\u4e0d\u80fd\u4ee3\u7801\u9ad8\u4eae\u4e86\u5417\uff1f","title":"\u535a\u5ba2\u56ed\u8bbe\u7f6eSilence\u4e3b\u9898"},{"location":"Web/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%AE%BE%E7%BD%AESilence%E4%B8%BB%E9%A2%98/#silence","text":"\u535a\u5ba2\u56ed\u7684\u63d0\u4f9b\u4e86\u4e00\u767e\u591a\u4e2a\u9ed8\u8ba4\u4e3b\u9898\uff0c\u4f46\u6211\u8fd8\u662f\u627e\u4e0d\u5230\u4e00\u4e2a\u5e72\u51c0\u3001\u7b80\u6d01\u3001\u7f8e\u89c2\u7684\u3002\u4e86\u89e3\u5230\u535a\u5ba2\u56ed\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e3b\u9898\uff0c\u4e8e\u662f\u5728\u7f51\u4e0a\u641c\u5bfb\u76f8\u5173\u5185\u5bb9\uff0c\u7ec8\u4e8e\u88ab\u6211\u53d1\u73b0\u4e86Silence\u2014\u2014\u4e00\u4e2a\u4e13\u6ce8\u4e8e\u9605\u8bfb\u7684\u535a\u5ba2\u56ed\u4e3b\u9898\u3002","title":"\u535a\u5ba2\u56ed\u8bbe\u7f6eSilence\u4e3b\u9898"},{"location":"Web/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%AE%BE%E7%BD%AESilence%E4%B8%BB%E9%A2%98/#silence_1","text":"Silence \u662f\u4e00\u4e2a\u4e13\u6ce8\u4e8e\u9605\u8bfb\u7684\u535a\u5ba2\u56ed\u4e3b\u9898 \u754c\u9762\u7b80\u6d01\u4f18\u96c5\uff0c\u54cd\u5e94\u5f0f\u7f51\u9875\u8bbe\u8ba1 \u8f7b\u91cf\u914d\u7f6e\uff0c\u6587\u6863\u7ed9\u529b\uff0c\u975e\u5e38\u5bb9\u6613\u4f7f\u7528 \u63d0\u4f9b\u6697\u9ed1\u6a21\u5f0f\u548c\u591a\u79cd\u8272\u5f69\u4e3b\u9898\uff0c\u53ef\u968f\u65f6\u5207\u6362 \u652f\u6301\u81ea\u5b9a\u4e49\u5bfc\u822a\u680f\u83dc\u5355\u9879\u3001\u60ac\u6d6e\u6807\u9898\u76ee\u5f55\u7b49 \u63d0\u4f9b\u6587\u7ae0\u7248\u6743\u7b7e\u540d\u3001\u8d5e\u8d4f\u529f\u80fd\u7b49 \u9879\u76ee\u7ed3\u6784\u6e05\u6670\uff0c\u4ee3\u7801\u7b80\u5355\uff0c\u53ef\u5b9e\u73b0\u9ad8\u5ea6\u5b9a\u5236\u5316\u5f00\u53d1","title":"Silence\u4ecb\u7ecd"},{"location":"Web/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%AE%BE%E7%BD%AESilence%E4%B8%BB%E9%A2%98/#_1","text":"\u5728\u8fdb\u884c\u4e0b\u9762\u7684\u64cd\u4f5c\u4e4b\u524d\uff0c\u9700\u8981\u7533\u8bf7\u535a\u5ba2\u56ed\u7684JS\u6743\u9650\uff0c\u53c2\u8003 \u535a\u5ba2\u56ed\u7533\u8bf7JS\u6743\u9650\u6559\u7a0b \uff0c\u8fd9\u91cc\u4e0d\u505a\u4ecb\u7ecd \u6210\u529f\u5f00\u901aJS\u6743\u9650\u540e\uff0c\u8fdb\u5165\u535a\u5ba2\u56ed\u540e\u53f0\u201c\u8bbe\u7f6e\u201d\u9875\u9762 \u5728\u201c\u57fa\u672c\u8bbe\u7f6e\u201d\u4e2d\u8bbe\u7f6e\u535a\u5ba2\u6807\u9898\uff0c\u5e76\u9009\u62e9 Custom \u4f5c\u4e3a\u535a\u5ba2\u76ae\u80a4\uff0c\u6ce8\u610f\u535a\u5ba2\u5b50\u6807\u9898\u4e0d\u7528\u8bbe\u7f6e\uff0c\u56e0\u4e3aSilence\u4e0d\u652f\u6301 \u5728\u201c\u4ee3\u7801\u9ad8\u4eae\u201d\u4e2d\u8bbe\u7f6e\u6e32\u67d3\u5f15\u64ce\u4e3a highlight.js \uff0c\u53d6\u6d88\u52fe\u9009\u201c\u663e\u793a\u884c\u53f7\u201d\uff0c\u5e76\u5c06\u7cfb\u7edf\u4e3b\u9898\u8bbe\u4e3a cnblogs \u5728\u201c\u9875\u9762\u5b9a\u5236CSS\u4ee3\u7801\u201d\u4e2d\u52fe\u9009\u201c\u7981\u7528\u6a21\u677f\u9ed8\u8ba4CSS\u201d\uff0c\u5e76\u5728\u8f93\u5165\u6846\u4e2d\u586b\u5165\u5982\u4e0b\u5185\u5bb9 1 @ import url ( https :// cdn . jsdelivr . net / gh / esofar / cnblogs-theme-silence @ latest / dist / silence . min . css ) \u53ef\u4ee5\u901a\u8fc7 url \u4e2d\u7684 @ \u6307\u5b9a\u4e3b\u9898\u7684\u7248\u672c\uff0c\u8fd9\u91cc\u7684 @latest \u8868\u793a\u4f7f\u7528\u6700\u65b0\u7684\u7248\u672c\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u5176\u4ed6\u7248\u672c\uff0c\u6bd4\u5982 @3.0.0-rc2 \u3001 @3.0.0-beta4 \u7b49 \u5728\u201c\u9875\u811aHTML\u4ee3\u7801\u201d\u4e2d\u586b\u5165\u5982\u4e0b\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 < script > window . $silence = { avatar : 'https://files.cnblogs.com/files/blogs/611458/avatar.ico' , favicon : 'https://files.cnblogs.com/files/blogs/611458/favicon.ico' , github : 'https://github.com/chinjinyu' , defaultMode : 'auto' , defaultTheme : 'a' , navbars : [{ title : '\u6807\u7b7e' , url : 'https://www.cnblogs.com/chinjinyu/tag/' }, { title : '\u5f52\u6863' , url : 'https://www.cnblogs.com/chinjinyu/p/' }], showNavAdmin : true , catalog : { enable : true , index : true , active : false , levels : [ 'h2' , 'h3' , 'h4' ], }, signature : { enable : true , author : 'chinjinyu' , license : [ '\u7f72\u540d-\u975e\u5546\u4e1a\u6027\u4f7f\u7528-\u76f8\u540c\u65b9\u5f0f\u5171\u4eab 4.0 \u56fd\u9645' , 'https://creativecommons.org/licenses/by-nc-sa/4.0/' ], }, sponsor : { enable : true , wechat : 'https://files.cnblogs.com/files/blogs/611458/wechat.ico' , alipay : 'https://files.cnblogs.com/files/blogs/611458/alipay.ico' } }; </ script > < script src = \"https://cdn.jsdelivr.net/gh/esofar/cnblogs-theme-silence@latest/dist/silence.min.js\" ></ script > \u6ce8\u610f\u8fd9\u91cc\u6700\u540e\u4e00\u884c src \u4e2d @ \u7684\u7248\u672c\u9700\u8981\u548c\u201c\u9875\u9762\u5b9a\u5236CSS\u4ee3\u7801\u201d\u4e2d\u7684\u4fdd\u6301\u4e00\u81f4 avatar : \u535a\u5ba2\u4e3b\u9875\u5de6\u4fa7\u680f\u7684\u5934\u50cf favicon : \u7f51\u9875\u6807\u9898\u524d\u7684\u5c0f\u56fe\u6807 github : \u4e2a\u4eba\u7684GitHub\u4e3b\u9875\u5730\u5740\uff0c\u535a\u5ba2\u5de6\u4e0a\u89d2\u6709\u4e2aGitHub\u6302\u4ef6\uff0c\u70b9\u51fb\u65f6\u4f1a\u8fdb\u884c\u8df3\u8f6c defaultMode : \u4e3b\u9898\u6a21\u5f0f\uff0c\u6709 light / dark / auto \u4e09\u79cd\u9009\u9879 defaultTheme : \u9ed8\u8ba4\u52a0\u8f7d\u7684\u4e3b\u9898\u8272\u5f69\uff0c a \u8868\u793a\u84dd\u8272\uff0c\u5176\u4ed6\u503c\u53c2\u8003 \u5b98\u65b9\u6587\u6863 navbars : \u8bbe\u7f6e\u5bfc\u822a\u680f\u4e2d\u7684\u81ea\u5b9a\u4e49\u83dc\u5355\u9879 title : \u5bfc\u822a\u680f\u663e\u793a\u7684\u6807\u9898 url : \u5730\u5740 children : \u8bbe\u7f6e\u4e8c\u7ea7\u83dc\u5355\u9879 title : \u4e8c\u7ea7\u83dc\u5355\u6807\u9898 url : \u5730\u5740 target : _blank \u8868\u793a\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00 showNavAdmin : \u662f\u5426\u663e\u793a\u5bfc\u822a\u680f\u4e2d\u7684\u201c\u7ba1\u7406\u201d\u83dc\u5355\u9879 catalog : \u8bbe\u7f6e\u535a\u6587\u7684\u6807\u9898\u76ee\u5f55 enable : \u662f\u5426\u542f\u7528\u76ee\u5f55 index : \u662f\u5426\u5728\u76ee\u5f55\u6807\u9898\u524d\u6dfb\u52a0\u7d22\u5f15 active : \u662f\u5426\u76f4\u63a5\u663e\u793a\u76ee\u5f55 levels : \u8bbe\u7f6e\u9700\u8981\u751f\u6210\u76ee\u5f55\u7684\u6807\u9898\u7b49\u7ea7 signature : \u8bbe\u7f6e\u7248\u6743\u7b7e\u540d enable : \u662f\u5426\u542f\u7528\u7b7e\u540d author : \u4f5c\u8005 license : \u77e5\u8bc6\u5171\u4eab\u8bb8\u53ef\u534f\u8bae remark : \u5176\u4ed6\u5907\u6ce8 sponsor : \u8bbe\u7f6e\u6253\u8d4f enable : \u662f\u5426\u542f\u7528\u6253\u8d4f text : \u6253\u8d4f\u7684\u63d0\u793a\u4fe1\u606f paypal : PayPal\u6536\u6b3e\u7801 wechat : \u5fae\u4fe1\u6536\u6b3e\u7801 alipay : \u652f\u4ed8\u5b9d\u6536\u6b3e\u7801 \u5728\u201c\u9875\u9996HTML\u4ee3\u7801\u201d\u8f93\u5165\u6846\u4e2d\u586b\u5165\u5982\u4e0b\u4ee3\u7801 1 2 3 4 5 6 < div class = \"loading\" > < div class = \"box\" > < h2 > Loading </ h2 > < span ></ span >< span ></ span >< span ></ span >< span ></ span >< span ></ span >< span ></ span >< span ></ span > </ div > </ div >","title":"\u90e8\u7f72\u4e3b\u9898"},{"location":"Web/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%AE%BE%E7%BD%AESilence%E4%B8%BB%E9%A2%98/#_2","text":"Slicence\u6700\u65b0\u7248\u672c\u4e0d\u80fd\u4ee3\u7801\u9ad8\u4eae\u548c\u663e\u793a\u884c\u53f7\u4e86\uff0c\u53c2\u89c1GitHub\u4e0a\u8fd9\u4e2a Issue #191 \uff0c\u4ee3\u7801\u5757\u7684\u5c55\u793a\u6548\u679c\u50cf\u8fd9\u6837 \u8fd9\u5bf9\u9605\u8bfb\u4ee3\u7801\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\uff0c\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u6848 \u4e00\u4e2a\u662f\u9000\u56de 3.0.0-beta4 \u4ee5\u53ca\u4e4b\u524d\u7248\u672c\u7684Silience\uff0c\u5e76\u5728\u914d\u7f6e\u4e2d\u6dfb\u52a0 hljsln: true \u5f00\u542f\u663e\u793a\u884c\u53f7 \u53e6\u4e00\u4e2a\u505a\u6cd5\u662f\uff0c\u5728\u201c\u4ee3\u7801\u9ad8\u4eae\u201d\u4e2d\u8bbe\u7f6e\u6e32\u67d3\u5f15\u64ce\u4e3a prismjs \uff0c\u52fe\u9009\u201c\u663e\u793a\u884c\u53f7\u201d\uff0c\u5e76\u5c06\u7cfb\u7edf\u4e3b\u9898\u8bbe\u4e3a prism-xonokai \u6548\u679c\u5982\u4e0b","title":"\u4ee3\u7801\u9ad8\u4eae\u53ca\u663e\u793a\u884c\u53f7"},{"location":"Web/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%AE%BE%E7%BD%AESilence%E4%B8%BB%E9%A2%98/#_3","text":"Silence\u9879\u76ee Silence\u6587\u6863 \u535a\u5ba2\u56ed\u7533\u8bf7JS\u6743\u9650\u6559\u7a0b \u65b0\u7248\u672c\u4e0d\u80fd\u4ee3\u7801\u9ad8\u4eae\u4e86\u5417\uff1f","title":"\u53c2\u8003\u8d44\u6599"}]}